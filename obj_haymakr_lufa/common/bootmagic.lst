   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_key,"ax",@progbits
  12               	scan_key:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "actionmap.h"
   9:../../tmk_core/common/bootmagic.c **** #include "host.h"
  10:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  11:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  12:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  13:../../tmk_core/common/bootmagic.c **** #include "hook.h"
  14:../../tmk_core/common/bootmagic.c **** 
  15:../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  16:../../tmk_core/common/bootmagic.c **** 
  17:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  18:../../tmk_core/common/bootmagic.c **** {
  19:../../tmk_core/common/bootmagic.c ****     /* check signature */
  20:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  21:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  22:../../tmk_core/common/bootmagic.c ****     }
  23:../../tmk_core/common/bootmagic.c **** 
  24:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  25:../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  26:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  27:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  28:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  29:../../tmk_core/common/bootmagic.c **** 
  30:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  31:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
  32:../../tmk_core/common/bootmagic.c ****         return;
  33:../../tmk_core/common/bootmagic.c ****     }
  34:../../tmk_core/common/bootmagic.c **** 
  35:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  36:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  37:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  38:../../tmk_core/common/bootmagic.c ****     }
  39:../../tmk_core/common/bootmagic.c **** 
  40:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  41:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
  42:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  43:../../tmk_core/common/bootmagic.c ****     }
  44:../../tmk_core/common/bootmagic.c **** 
  45:../../tmk_core/common/bootmagic.c ****     /* user-defined checks */
  46:../../tmk_core/common/bootmagic.c ****     hook_bootmagic();
  47:../../tmk_core/common/bootmagic.c **** 
  48:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  49:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  50:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  51:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  53:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  54:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  55:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  56:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  57:../../tmk_core/common/bootmagic.c ****         } else {
  58:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  59:../../tmk_core/common/bootmagic.c ****         }
  60:../../tmk_core/common/bootmagic.c ****     }
  61:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  62:../../tmk_core/common/bootmagic.c **** 
  63:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  64:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  84:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  85:../../tmk_core/common/bootmagic.c ****     }
  86:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
  87:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  88:../../tmk_core/common/bootmagic.c ****     }
  89:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  90:../../tmk_core/common/bootmagic.c **** 
  91:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  93:../../tmk_core/common/bootmagic.c **** #endif
  94:../../tmk_core/common/bootmagic.c **** 
  95:../../tmk_core/common/bootmagic.c ****     /* default layer */
  96:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 104:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 105:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 106:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 107:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 108:../../tmk_core/common/bootmagic.c ****     } else {
 109:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 110:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 111:../../tmk_core/common/bootmagic.c ****     }
 112:../../tmk_core/common/bootmagic.c **** }
 113:../../tmk_core/common/bootmagic.c **** 
 114:../../tmk_core/common/bootmagic.c **** static bool scan_key(uint16_t code)
 115:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58 0012 7C01      		movw r14,r24
  59               	.LVL1:
  60               	.LBB6:
 116:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  61               		.loc 1 116 0
  62 0014 C0E0      		ldi r28,0
  63               	.LBB7:
  64               	.LBB8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 118:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 119:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  65               		.loc 1 119 0
  66 0016 CC24      		clr r12
  67 0018 C394      		inc r12
  68 001a D12C      		mov r13,__zero_reg__
  69               	.LVL2:
  70               	.L8:
  71               	.LBE8:
 117:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  72               		.loc 1 117 0
  73 001c 8C2F      		mov r24,r28
  74               	.LVL3:
  75 001e 0E94 0000 		call matrix_get_row
  76               	.LVL4:
  77 0022 5C01      		movw r10,r24
  78               	.LVL5:
  79 0024 10E0      		ldi r17,0
  80 0026 00E0      		ldi r16,0
  81               	.LVL6:
  82               	.L7:
  83               	.LBB10:
  84               		.loc 1 119 0
  85 0028 C601      		movw r24,r12
  86               	.LVL7:
  87 002a 002E      		mov r0,r16
  88 002c 00C0      		rjmp 2f
  89               		1:
  90 002e 880F      		lsl r24
  91 0030 991F      		rol r25
  92               		2:
  93 0032 0A94      		dec r0
  94 0034 02F4      		brpl 1b
  95 0036 8A21      		and r24,r10
  96 0038 9B21      		and r25,r11
  97 003a 892B      		or r24,r25
  98 003c 01F0      		breq .L2
  99               	.LBB9:
 120:../../tmk_core/common/bootmagic.c ****                 // read key from Layer 0
 121:../../tmk_core/common/bootmagic.c ****                 action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
 100               		.loc 1 121 0
 101 003e 602F      		mov r22,r16
 102 0040 7C2F      		mov r23,r28
 103 0042 80E0      		ldi r24,0
 104 0044 0E94 0000 		call action_for_key
 105               	.LVL8:
 122:../../tmk_core/common/bootmagic.c ****                 if (action.code == code ||
 106               		.loc 1 122 0
 107 0048 8E15      		cp r24,r14
 108 004a 9F05      		cpc r25,r15
 109 004c 01F0      		breq .L3
 110               		.loc 1 122 0 is_stmt 0 discriminator 1
 111 004e 292F      		mov r18,r25
 112 0050 207E      		andi r18,lo8(-32)
 113 0052 392F      		mov r19,r25
 114 0054 307C      		andi r19,lo8(-64)
 115 0056 01F0      		breq .L4
 123:../../tmk_core/common/bootmagic.c ****                     ((action.kind.id == ACT_LMODS ||
 124:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS ||
 125:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LMODS_TAP ||
 126:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_RMODS_TAP ||
 116               		.loc 1 126 0 is_stmt 1
 117 0058 203A      		cpi r18,lo8(-96)
 118 005a 01F4      		brne .L2
 119               	.L4:
 127:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP ||
 128:../../tmk_core/common/bootmagic.c ****                       action.kind.id == ACT_LAYER_TAP_EXT) &&
 120               		.loc 1 128 0
 121 005c 8E15      		cp r24,r14
 122 005e 1F04      		cpc __zero_reg__,r15
 123 0060 01F4      		brne .L2
 124               	.L3:
 129:../../tmk_core/common/bootmagic.c ****                      action.key.code == code)) {
 130:../../tmk_core/common/bootmagic.c ****                     return true;
 125               		.loc 1 130 0
 126 0062 81E0      		ldi r24,lo8(1)
 127               	.LVL9:
 128               	.L1:
 129               	/* epilogue start */
 130               	.LBE9:
 131               	.LBE10:
 132               	.LBE7:
 133               	.LBE6:
 131:../../tmk_core/common/bootmagic.c ****                 }
 132:../../tmk_core/common/bootmagic.c ****             }
 133:../../tmk_core/common/bootmagic.c ****         }
 134:../../tmk_core/common/bootmagic.c ****     }
 135:../../tmk_core/common/bootmagic.c ****     return false;
 136:../../tmk_core/common/bootmagic.c **** }
 134               		.loc 1 136 0
 135 0064 CF91      		pop r28
 136               	.LVL10:
 137 0066 1F91      		pop r17
 138 0068 0F91      		pop r16
 139 006a FF90      		pop r15
 140 006c EF90      		pop r14
 141               	.LVL11:
 142 006e DF90      		pop r13
 143 0070 CF90      		pop r12
 144 0072 BF90      		pop r11
 145 0074 AF90      		pop r10
 146               	.LVL12:
 147 0076 0895      		ret
 148               	.LVL13:
 149               	.L2:
 150 0078 0F5F      		subi r16,-1
 151 007a 1F4F      		sbci r17,-1
 152               	.LVL14:
 153               	.LBB13:
 154               	.LBB12:
 155               	.LBB11:
 118:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 156               		.loc 1 118 0 discriminator 2
 157 007c 0F30      		cpi r16,15
 158 007e 1105      		cpc r17,__zero_reg__
 159 0080 01F4      		brne .L7
 160               	.LBE11:
 161               	.LBE12:
 116:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 162               		.loc 1 116 0 discriminator 2
 163 0082 CF5F      		subi r28,lo8(-(1))
 164               	.LVL15:
 165 0084 C530      		cpi r28,lo8(5)
 166 0086 01F4      		brne .L8
 167               	.LBE13:
 135:../../tmk_core/common/bootmagic.c **** }
 168               		.loc 1 135 0
 169 0088 80E0      		ldi r24,0
 170               	.LVL16:
 171 008a 00C0      		rjmp .L1
 172               		.cfi_endproc
 173               	.LFE104:
 175               		.section	.text.bootmagic_scan_key,"ax",@progbits
 176               	.global	bootmagic_scan_key
 178               	bootmagic_scan_key:
 179               	.LFB105:
 137:../../tmk_core/common/bootmagic.c **** 
 138:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_key(uint16_t code)
 139:../../tmk_core/common/bootmagic.c **** {
 180               		.loc 1 139 0
 181               		.cfi_startproc
 182               	.LVL17:
 183 0000 CF93      		push r28
 184               	.LCFI9:
 185               		.cfi_def_cfa_offset 3
 186               		.cfi_offset 28, -2
 187 0002 DF93      		push r29
 188               	.LCFI10:
 189               		.cfi_def_cfa_offset 4
 190               		.cfi_offset 29, -3
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 2 */
 194               	.L__stack_usage = 2
 195 0004 EC01      		movw r28,r24
 140:../../tmk_core/common/bootmagic.c ****     if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
 196               		.loc 1 140 0
 197 0006 8CE2      		ldi r24,lo8(44)
 198 0008 90E0      		ldi r25,0
 199               	.LVL18:
 200 000a 0E94 0000 		call scan_key
 201               	.LVL19:
 202 000e 8823      		tst r24
 203 0010 01F0      		breq .L17
 141:../../tmk_core/common/bootmagic.c **** 
 142:../../tmk_core/common/bootmagic.c ****     return scan_key(code);
 204               		.loc 1 142 0
 205 0012 CE01      		movw r24,r28
 206               	/* epilogue start */
 143:../../tmk_core/common/bootmagic.c **** }
 207               		.loc 1 143 0
 208 0014 DF91      		pop r29
 209 0016 CF91      		pop r28
 210               	.LVL20:
 142:../../tmk_core/common/bootmagic.c **** }
 211               		.loc 1 142 0
 212 0018 0C94 0000 		jmp scan_key
 213               	.LVL21:
 214               	.L17:
 215               		.loc 1 143 0
 216 001c 80E0      		ldi r24,0
 217               	/* epilogue start */
 218 001e DF91      		pop r29
 219 0020 CF91      		pop r28
 220               	.LVL22:
 221 0022 0895      		ret
 222               		.cfi_endproc
 223               	.LFE105:
 225               		.section	.text.bootmagic,"ax",@progbits
 226               	.global	bootmagic
 228               	bootmagic:
 229               	.LFB103:
  18:../../tmk_core/common/bootmagic.c ****     /* check signature */
 230               		.loc 1 18 0
 231               		.cfi_startproc
 232 0000 CF93      		push r28
 233               	.LCFI11:
 234               		.cfi_def_cfa_offset 3
 235               		.cfi_offset 28, -2
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 1 */
 239               	.L__stack_usage = 1
  20:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 240               		.loc 1 20 0
 241 0002 0E94 0000 		call eeconfig_is_enabled
 242               	.LVL23:
 243 0006 8111      		cpse r24,__zero_reg__
 244 0008 00C0      		rjmp .L20
  21:../../tmk_core/common/bootmagic.c ****     }
 245               		.loc 1 21 0
 246 000a 0E94 0000 		call eeconfig_init
 247               	.LVL24:
 248               	.L20:
  25:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
 249               		.loc 1 25 0
 250 000e 80E0      		ldi r24,lo8(__c.4834)
 251 0010 90E0      		ldi r25,hi8(__c.4834)
 252 0012 0E94 0000 		call xputs
 253               	.LVL25:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 254               		.loc 1 27 0
 255 0016 C5E6      		ldi r28,lo8(101)
 256               	.LVL26:
 257               	.L21:
 258 0018 C150      		subi r28,lo8(-(-1))
 259               	.LVL27:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 260               		.loc 1 27 0 is_stmt 0 discriminator 1
 261 001a 01F0      		breq .+2
 262 001c 00C0      		rjmp .L22
  28:../../tmk_core/common/bootmagic.c **** 
 263               		.loc 1 28 0 is_stmt 1
 264 001e 80E0      		ldi r24,lo8(__c.4840)
 265 0020 90E0      		ldi r25,hi8(__c.4840)
 266 0022 0E94 0000 		call xputs
 267               	.LVL28:
  31:../../tmk_core/common/bootmagic.c ****         return;
 268               		.loc 1 31 0
 269 0026 89E2      		ldi r24,lo8(41)
 270 0028 90E0      		ldi r25,0
 271 002a 0E94 0000 		call bootmagic_scan_key
 272               	.LVL29:
 273 002e 8111      		cpse r24,__zero_reg__
 274 0030 00C0      		rjmp .L19
  36:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 275               		.loc 1 36 0
 276 0032 8AE2      		ldi r24,lo8(42)
 277 0034 90E0      		ldi r25,0
 278 0036 0E94 0000 		call bootmagic_scan_key
 279               	.LVL30:
 280 003a 8111      		cpse r24,__zero_reg__
  37:../../tmk_core/common/bootmagic.c ****     }
 281               		.loc 1 37 0
 282 003c 0E94 0000 		call eeconfig_init
 283               	.LVL31:
 284               	.L24:
  41:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 285               		.loc 1 41 0
 286 0040 85E0      		ldi r24,lo8(5)
 287 0042 90E0      		ldi r25,0
 288 0044 0E94 0000 		call bootmagic_scan_key
 289               	.LVL32:
 290 0048 8111      		cpse r24,__zero_reg__
  42:../../tmk_core/common/bootmagic.c ****     }
 291               		.loc 1 42 0
 292 004a 0E94 0000 		call bootloader_jump
 293               	.LVL33:
 294               	.L25:
  46:../../tmk_core/common/bootmagic.c **** 
 295               		.loc 1 46 0
 296 004e 0E94 0000 		call hook_bootmagic
 297               	.LVL34:
  49:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 298               		.loc 1 49 0
 299 0052 0E94 0000 		call eeconfig_read_debug
 300               	.LVL35:
 301 0056 8093 0000 		sts debug_config,r24
  50:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 302               		.loc 1 50 0
 303 005a 87E0      		ldi r24,lo8(7)
 304 005c 90E0      		ldi r25,0
 305 005e 0E94 0000 		call bootmagic_scan_key
 306               	.LVL36:
 307 0062 8823      		tst r24
 308 0064 01F0      		breq .L26
  51:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 309               		.loc 1 51 0
 310 0066 8BE1      		ldi r24,lo8(27)
 311 0068 90E0      		ldi r25,0
 312 006a 0E94 0000 		call bootmagic_scan_key
 313               	.LVL37:
 314 006e 8823      		tst r24
 315 0070 01F4      		brne .+2
 316 0072 00C0      		rjmp .L27
  52:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 317               		.loc 1 52 0
 318 0074 9091 0000 		lds r25,debug_config
 319 0078 892F      		mov r24,r25
 320 007a 8D7F      		andi r24,~(1<<1)
 321 007c 91FF      		sbrs r25,1
 322 007e 8260      		ori r24,1<<1
 323               	.L98:
  58:../../tmk_core/common/bootmagic.c ****         }
 324               		.loc 1 58 0
 325 0080 8093 0000 		sts debug_config,r24
 326               	.L26:
  61:../../tmk_core/common/bootmagic.c **** 
 327               		.loc 1 61 0
 328 0084 8091 0000 		lds r24,debug_config
 329 0088 0E94 0000 		call eeconfig_write_debug
 330               	.LVL38:
  64:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 331               		.loc 1 64 0
 332 008c 0E94 0000 		call eeconfig_read_keymap
 333               	.LVL39:
 334 0090 8093 0000 		sts keymap_config,r24
  65:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 335               		.loc 1 65 0
 336 0094 80EE      		ldi r24,lo8(-32)
 337 0096 90E0      		ldi r25,0
 338 0098 0E94 0000 		call bootmagic_scan_key
 339               	.LVL40:
 340 009c 8823      		tst r24
 341 009e 01F0      		breq .L30
  66:../../tmk_core/common/bootmagic.c ****     }
 342               		.loc 1 66 0
 343 00a0 9091 0000 		lds r25,keymap_config
 344 00a4 892F      		mov r24,r25
 345 00a6 8E7F      		andi r24,~(1<<0)
 346 00a8 90FF      		sbrs r25,0
 347 00aa 8160      		ori r24,1<<0
 348 00ac 8093 0000 		sts keymap_config,r24
 349               	.L30:
  68:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 350               		.loc 1 68 0
 351 00b0 89E3      		ldi r24,lo8(57)
 352 00b2 90E0      		ldi r25,0
 353 00b4 0E94 0000 		call bootmagic_scan_key
 354               	.LVL41:
 355 00b8 8823      		tst r24
 356 00ba 01F0      		breq .L31
  69:../../tmk_core/common/bootmagic.c ****     }
 357               		.loc 1 69 0
 358 00bc 9091 0000 		lds r25,keymap_config
 359 00c0 892F      		mov r24,r25
 360 00c2 8D7F      		andi r24,~(1<<1)
 361 00c4 91FF      		sbrs r25,1
 362 00c6 8260      		ori r24,1<<1
 363 00c8 8093 0000 		sts keymap_config,r24
 364               	.L31:
  71:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 365               		.loc 1 71 0
 366 00cc 82EE      		ldi r24,lo8(-30)
 367 00ce 90E0      		ldi r25,0
 368 00d0 0E94 0000 		call bootmagic_scan_key
 369               	.LVL42:
 370 00d4 8823      		tst r24
 371 00d6 01F0      		breq .L32
  72:../../tmk_core/common/bootmagic.c ****     }
 372               		.loc 1 72 0
 373 00d8 9091 0000 		lds r25,keymap_config
 374 00dc 892F      		mov r24,r25
 375 00de 8B7F      		andi r24,~(1<<2)
 376 00e0 92FF      		sbrs r25,2
 377 00e2 8460      		ori r24,1<<2
 378 00e4 8093 0000 		sts keymap_config,r24
 379               	.L32:
  74:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 380               		.loc 1 74 0
 381 00e8 86EE      		ldi r24,lo8(-26)
 382 00ea 90E0      		ldi r25,0
 383 00ec 0E94 0000 		call bootmagic_scan_key
 384               	.LVL43:
 385 00f0 8823      		tst r24
 386 00f2 01F0      		breq .L33
  75:../../tmk_core/common/bootmagic.c ****     }
 387               		.loc 1 75 0
 388 00f4 9091 0000 		lds r25,keymap_config
 389 00f8 892F      		mov r24,r25
 390 00fa 877F      		andi r24,~(1<<3)
 391 00fc 93FF      		sbrs r25,3
 392 00fe 8860      		ori r24,1<<3
 393 0100 8093 0000 		sts keymap_config,r24
 394               	.L33:
  77:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 395               		.loc 1 77 0
 396 0104 83EE      		ldi r24,lo8(-29)
 397 0106 90E0      		ldi r25,0
 398 0108 0E94 0000 		call bootmagic_scan_key
 399               	.LVL44:
 400 010c 8823      		tst r24
 401 010e 01F0      		breq .L34
  78:../../tmk_core/common/bootmagic.c ****     }
 402               		.loc 1 78 0
 403 0110 9091 0000 		lds r25,keymap_config
 404 0114 892F      		mov r24,r25
 405 0116 8F7E      		andi r24,~(1<<4)
 406 0118 94FF      		sbrs r25,4
 407 011a 8061      		ori r24,1<<4
 408 011c 8093 0000 		sts keymap_config,r24
 409               	.L34:
  80:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 410               		.loc 1 80 0
 411 0120 85E3      		ldi r24,lo8(53)
 412 0122 90E0      		ldi r25,0
 413 0124 0E94 0000 		call bootmagic_scan_key
 414               	.LVL45:
 415 0128 8823      		tst r24
 416 012a 01F0      		breq .L35
  81:../../tmk_core/common/bootmagic.c ****     }
 417               		.loc 1 81 0
 418 012c 9091 0000 		lds r25,keymap_config
 419 0130 892F      		mov r24,r25
 420 0132 8F7D      		andi r24,~(1<<5)
 421 0134 95FF      		sbrs r25,5
 422 0136 8062      		ori r24,1<<5
 423 0138 8093 0000 		sts keymap_config,r24
 424               	.L35:
  83:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 425               		.loc 1 83 0
 426 013c 81E3      		ldi r24,lo8(49)
 427 013e 90E0      		ldi r25,0
 428 0140 0E94 0000 		call bootmagic_scan_key
 429               	.LVL46:
 430 0144 8823      		tst r24
 431 0146 01F0      		breq .L36
  84:../../tmk_core/common/bootmagic.c ****     }
 432               		.loc 1 84 0
 433 0148 9091 0000 		lds r25,keymap_config
 434 014c 892F      		mov r24,r25
 435 014e 8F7B      		andi r24,~(1<<6)
 436 0150 96FF      		sbrs r25,6
 437 0152 8064      		ori r24,1<<6
 438 0154 8093 0000 		sts keymap_config,r24
 439               	.L36:
  86:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 440               		.loc 1 86 0
 441 0158 81E1      		ldi r24,lo8(17)
 442 015a 90E0      		ldi r25,0
 443 015c 0E94 0000 		call bootmagic_scan_key
 444               	.LVL47:
 445 0160 8823      		tst r24
 446 0162 01F0      		breq .L37
  87:../../tmk_core/common/bootmagic.c ****     }
 447               		.loc 1 87 0
 448 0164 9091 0000 		lds r25,keymap_config
 449 0168 892F      		mov r24,r25
 450 016a 97FB      		bst r25,7
 451 016c 87F9      		bld r24,7
 452 016e 8058      		subi r24,0x80
 453 0170 8093 0000 		sts keymap_config,r24
 454               	.L37:
  89:../../tmk_core/common/bootmagic.c **** 
 455               		.loc 1 89 0
 456 0174 8091 0000 		lds r24,keymap_config
 457 0178 0E94 0000 		call eeconfig_write_keymap
 458               	.LVL48:
  92:../../tmk_core/common/bootmagic.c **** #endif
 459               		.loc 1 92 0
 460 017c 8091 0000 		lds r24,keymap_config
 461 0180 87FB      		bst r24,7
 462 0182 8827      		clr r24
 463 0184 80F9      		bld r24,0
 464 0186 8093 0000 		sts keyboard_nkro,r24
 465               	.LVL49:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 466               		.loc 1 97 0
 467 018a 87E2      		ldi r24,lo8(39)
 468 018c 90E0      		ldi r25,0
 469 018e 0E94 0000 		call bootmagic_scan_key
 470               	.LVL50:
 471 0192 C82F      		mov r28,r24
 472               	.LVL51:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 473               		.loc 1 98 0
 474 0194 8EE1      		ldi r24,lo8(30)
 475 0196 90E0      		ldi r25,0
 476               	.LVL52:
 477 0198 0E94 0000 		call bootmagic_scan_key
 478               	.LVL53:
 479 019c 8111      		cpse r24,__zero_reg__
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 480               		.loc 1 98 0 is_stmt 0 discriminator 1
 481 019e C260      		ori r28,lo8(2)
 482               	.LVL54:
 483               	.L38:
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 484               		.loc 1 99 0 is_stmt 1
 485 01a0 8FE1      		ldi r24,lo8(31)
 486 01a2 90E0      		ldi r25,0
 487 01a4 0E94 0000 		call bootmagic_scan_key
 488               	.LVL55:
 489 01a8 8111      		cpse r24,__zero_reg__
  99:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 490               		.loc 1 99 0 is_stmt 0 discriminator 1
 491 01aa C460      		ori r28,lo8(4)
 492               	.LVL56:
 493               	.L39:
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 494               		.loc 1 100 0 is_stmt 1
 495 01ac 80E2      		ldi r24,lo8(32)
 496 01ae 90E0      		ldi r25,0
 497 01b0 0E94 0000 		call bootmagic_scan_key
 498               	.LVL57:
 499 01b4 8111      		cpse r24,__zero_reg__
 100:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 500               		.loc 1 100 0 is_stmt 0 discriminator 1
 501 01b6 C860      		ori r28,lo8(8)
 502               	.LVL58:
 503               	.L40:
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 504               		.loc 1 101 0 is_stmt 1
 505 01b8 81E2      		ldi r24,lo8(33)
 506 01ba 90E0      		ldi r25,0
 507 01bc 0E94 0000 		call bootmagic_scan_key
 508               	.LVL59:
 509 01c0 8111      		cpse r24,__zero_reg__
 101:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 510               		.loc 1 101 0 is_stmt 0 discriminator 1
 511 01c2 C061      		ori r28,lo8(16)
 512               	.LVL60:
 513               	.L41:
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 514               		.loc 1 102 0 is_stmt 1
 515 01c4 82E2      		ldi r24,lo8(34)
 516 01c6 90E0      		ldi r25,0
 517 01c8 0E94 0000 		call bootmagic_scan_key
 518               	.LVL61:
 519 01cc 8111      		cpse r24,__zero_reg__
 102:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 520               		.loc 1 102 0 is_stmt 0 discriminator 1
 521 01ce C062      		ori r28,lo8(32)
 522               	.LVL62:
 523               	.L42:
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 524               		.loc 1 103 0 is_stmt 1
 525 01d0 83E2      		ldi r24,lo8(35)
 526 01d2 90E0      		ldi r25,0
 527 01d4 0E94 0000 		call bootmagic_scan_key
 528               	.LVL63:
 529 01d8 8111      		cpse r24,__zero_reg__
 103:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 530               		.loc 1 103 0 is_stmt 0 discriminator 1
 531 01da C064      		ori r28,lo8(64)
 532               	.LVL64:
 533               	.L43:
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 534               		.loc 1 104 0 is_stmt 1
 535 01dc 84E2      		ldi r24,lo8(36)
 536 01de 90E0      		ldi r25,0
 537 01e0 0E94 0000 		call bootmagic_scan_key
 538               	.LVL65:
 539 01e4 8823      		tst r24
 540 01e6 01F0      		breq .L44
 104:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 541               		.loc 1 104 0 is_stmt 0 discriminator 1
 542 01e8 C068      		ori r28,lo8(-128)
 543               	.LVL66:
 544               	.L45:
 106:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 545               		.loc 1 106 0 is_stmt 1
 546 01ea 8C2F      		mov r24,r28
 547 01ec 0E94 0000 		call eeconfig_write_default_layer
 548               	.LVL67:
 107:../../tmk_core/common/bootmagic.c ****     } else {
 549               		.loc 1 107 0
 550 01f0 6C2F      		mov r22,r28
 551               	.LVL68:
 552               	.L99:
 110:../../tmk_core/common/bootmagic.c ****     }
 553               		.loc 1 110 0
 554 01f2 70E0      		ldi r23,0
 555 01f4 90E0      		ldi r25,0
 556 01f6 80E0      		ldi r24,0
 557               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 558               		.loc 1 112 0
 559 01f8 CF91      		pop r28
 110:../../tmk_core/common/bootmagic.c ****     }
 560               		.loc 1 110 0
 561 01fa 0C94 0000 		jmp default_layer_set
 562               	.LVL69:
 563               	.L22:
  27:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 564               		.loc 1 27 0 discriminator 2
 565 01fe 0E94 0000 		call matrix_scan
 566               	.LVL70:
 567               	.LBB14:
 568               	.LBB15:
 569               		.file 2 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 570               		.loc 2 187 0 discriminator 2
 571 0202 8FE3      		ldi r24,lo8(-25537)
 572 0204 9CE9      		ldi r25,hi8(-25537)
 573 0206 0197      	1:	sbiw r24,1
 574 0208 01F4      		brne 1b
 575 020a 00C0      		rjmp .
 576 020c 0000      		nop
 577 020e 00C0      		rjmp .L21
 578               	.LVL71:
 579               	.L27:
 580               	.LBE15:
 581               	.LBE14:
  53:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 582               		.loc 1 53 0
 583 0210 8EE0      		ldi r24,lo8(14)
 584 0212 90E0      		ldi r25,0
 585 0214 0E94 0000 		call bootmagic_scan_key
 586               	.LVL72:
 587 0218 8823      		tst r24
 588 021a 01F0      		breq .L28
  54:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 589               		.loc 1 54 0
 590 021c 9091 0000 		lds r25,debug_config
 591 0220 892F      		mov r24,r25
 592 0222 8B7F      		andi r24,~(1<<2)
 593 0224 92FF      		sbrs r25,2
 594 0226 8460      		ori r24,1<<2
 595 0228 00C0      		rjmp .L98
 596               	.L28:
  55:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 597               		.loc 1 55 0
 598 022a 80E1      		ldi r24,lo8(16)
 599 022c 90E0      		ldi r25,0
 600 022e 0E94 0000 		call bootmagic_scan_key
 601               	.LVL73:
 602 0232 9091 0000 		lds r25,debug_config
 603 0236 8823      		tst r24
 604 0238 01F0      		breq .L29
  56:../../tmk_core/common/bootmagic.c ****         } else {
 605               		.loc 1 56 0
 606 023a 892F      		mov r24,r25
 607 023c 877F      		andi r24,~(1<<3)
 608 023e 93FF      		sbrs r25,3
 609 0240 8860      		ori r24,1<<3
 610 0242 00C0      		rjmp .L98
 611               	.L29:
  58:../../tmk_core/common/bootmagic.c ****         }
 612               		.loc 1 58 0
 613 0244 892F      		mov r24,r25
 614 0246 8E7F      		andi r24,~(1<<0)
 615 0248 90FF      		sbrs r25,0
 616 024a 8160      		ori r24,1<<0
 617 024c 00C0      		rjmp .L98
 618               	.LVL74:
 619               	.L44:
 105:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 620               		.loc 1 105 0
 621 024e C111      		cpse r28,__zero_reg__
 622 0250 00C0      		rjmp .L45
 109:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 623               		.loc 1 109 0
 624 0252 0E94 0000 		call eeconfig_read_default_layer
 625               	.LVL75:
 110:../../tmk_core/common/bootmagic.c ****     }
 626               		.loc 1 110 0
 627 0256 682F      		mov r22,r24
 628 0258 00C0      		rjmp .L99
 629               	.LVL76:
 630               	.L19:
 631               	/* epilogue start */
 112:../../tmk_core/common/bootmagic.c **** 
 632               		.loc 1 112 0
 633 025a CF91      		pop r28
 634               	.LVL77:
 635 025c 0895      		ret
 636               		.cfi_endproc
 637               	.LFE103:
 639               		.section	.progmem.data.__c.4840,"a",@progbits
 642               	__c.4840:
 643 0000 646F 6E65 		.string	"done.\n"
 643      2E0A 00
 644               		.section	.progmem.data.__c.4834,"a",@progbits
 647               	__c.4834:
 648 0000 626F 6F74 		.string	"bootmagic scan: ... "
 648      6D61 6769 
 648      6320 7363 
 648      616E 3A20 
 648      2E2E 2E20 
 649               		.comm	keymap_config,1,1
 650               		.text
 651               	.Letext0:
 652               		.file 3 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdint.h"
 653               		.file 4 "../../tmk_core/common/matrix.h"
 654               		.file 5 "../../tmk_core/common/debug.h"
 655               		.file 6 "../../tmk_core/common/avr/xprintf.h"
 656               		.file 7 "../../tmk_core/common/keyboard.h"
 657               		.file 8 "../../tmk_core/common/keycode.h"
 658               		.file 9 "../../tmk_core/common/action_code.h"
 659               		.file 10 "../../tmk_core/common/keymap.h"
 660               		.file 11 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 661               		.file 12 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 662               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 663               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 664               		.file 15 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdio.h"
 665               		.file 16 "../../tmk_core/common/host.h"
 666               		.file 17 "../../tmk_core/common/action_layer.h"
 667               		.file 18 "../../tmk_core/common/action.h"
 668               		.file 19 "../../tmk_core/common/eeconfig.h"
 669               		.file 20 "../../tmk_core/common/bootloader.h"
 670               		.file 21 "../../tmk_core/common/hook.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:12     .text.scan_key:0000000000000000 scan_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:178    .text.bootmagic_scan_key:0000000000000000 bootmagic_scan_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:228    .text.bootmagic:0000000000000000 bootmagic
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:647    .progmem.data.__c.4834:0000000000000000 __c.4834
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccPeEEt7.s:642    .progmem.data.__c.4840:0000000000000000 __c.4840
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
action_for_key
eeconfig_is_enabled
eeconfig_init
xputs
bootloader_jump
hook_bootmagic
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
default_layer_set
matrix_scan
eeconfig_read_default_layer
__do_clear_bss
