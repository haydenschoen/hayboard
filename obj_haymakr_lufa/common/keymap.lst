   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keycode_to_action,"ax",@progbits
  12               	keycode_to_action:
  13               	.LFB106:
  14               		.file 1 "../../tmk_core/common/keymap.c"
   1:../../tmk_core/common/keymap.c **** /*
   2:../../tmk_core/common/keymap.c **** Copyright 2013,2016 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keymap.c **** 
   4:../../tmk_core/common/keymap.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keymap.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keymap.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keymap.c **** (at your option) any later version.
   8:../../tmk_core/common/keymap.c **** 
   9:../../tmk_core/common/keymap.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keymap.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keymap.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keymap.c **** GNU General Public License for more details.
  13:../../tmk_core/common/keymap.c **** 
  14:../../tmk_core/common/keymap.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keymap.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keymap.c **** */
  17:../../tmk_core/common/keymap.c **** #include "keymap.h"
  18:../../tmk_core/common/keymap.c **** #include "report.h"
  19:../../tmk_core/common/keymap.c **** #include "keycode.h"
  20:../../tmk_core/common/keymap.c **** #include "action_layer.h"
  21:../../tmk_core/common/keymap.c **** #include "action.h"
  22:../../tmk_core/common/keymap.c **** #include "action_macro.h"
  23:../../tmk_core/common/keymap.c **** #include "wait.h"
  24:../../tmk_core/common/keymap.c **** #include "debug.h"
  25:../../tmk_core/common/keymap.c **** #include "bootloader.h"
  26:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
  27:../../tmk_core/common/keymap.c **** #include <avr/pgmspace.h>
  28:../../tmk_core/common/keymap.c **** #endif
  29:../../tmk_core/common/keymap.c **** 
  30:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  31:../../tmk_core/common/keymap.c **** extern keymap_config_t keymap_config;
  32:../../tmk_core/common/keymap.c **** #endif
  33:../../tmk_core/common/keymap.c **** 
  34:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode);
  35:../../tmk_core/common/keymap.c **** 
  36:../../tmk_core/common/keymap.c **** 
  37:../../tmk_core/common/keymap.c **** /* converts key to action */
  38:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
  39:../../tmk_core/common/keymap.c **** action_t action_for_key(uint8_t layer, keypos_t key)
  40:../../tmk_core/common/keymap.c **** {
  41:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
  42:../../tmk_core/common/keymap.c ****     switch (keycode) {
  43:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
  44:../../tmk_core/common/keymap.c ****             return keymap_fn_to_action(keycode);
  45:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
  46:../../tmk_core/common/keymap.c ****         case KC_CAPSLOCK:
  47:../../tmk_core/common/keymap.c ****         case KC_LOCKING_CAPS:
  48:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
  49:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
  50:../../tmk_core/common/keymap.c ****             }
  51:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
  52:../../tmk_core/common/keymap.c ****         case KC_LCTL:
  53:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_control_capslock) {
  54:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
  55:../../tmk_core/common/keymap.c ****             }
  56:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LCTL);
  57:../../tmk_core/common/keymap.c ****         case KC_LALT:
  58:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  59:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  60:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  61:../../tmk_core/common/keymap.c ****                 }
  62:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LGUI);
  63:../../tmk_core/common/keymap.c ****             }
  64:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LALT);
  65:../../tmk_core/common/keymap.c ****         case KC_LGUI:
  66:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_lalt_lgui) {
  67:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
  68:../../tmk_core/common/keymap.c ****             }
  69:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  70:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  71:../../tmk_core/common/keymap.c ****             }
  72:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_LGUI);
  73:../../tmk_core/common/keymap.c ****         case KC_RALT:
  74:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  75:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
  76:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
  77:../../tmk_core/common/keymap.c ****                 }
  78:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RGUI);
  79:../../tmk_core/common/keymap.c ****             }
  80:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RALT);
  81:../../tmk_core/common/keymap.c ****         case KC_RGUI:
  82:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_ralt_rgui) {
  83:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
  84:../../tmk_core/common/keymap.c ****             }
  85:../../tmk_core/common/keymap.c ****             if (keymap_config.no_gui) {
  86:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
  87:../../tmk_core/common/keymap.c ****             }
  88:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_RGUI);
  89:../../tmk_core/common/keymap.c ****         case KC_GRAVE:
  90:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  91:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
  92:../../tmk_core/common/keymap.c ****             }
  93:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_GRAVE);
  94:../../tmk_core/common/keymap.c ****         case KC_ESC:
  95:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_grave_esc) {
  96:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
  97:../../tmk_core/common/keymap.c ****             }
  98:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_ESC);
  99:../../tmk_core/common/keymap.c ****         case KC_BSLASH:
 100:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 101:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 102:../../tmk_core/common/keymap.c ****             }
 103:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSLASH);
 104:../../tmk_core/common/keymap.c ****         case KC_BSPACE:
 105:../../tmk_core/common/keymap.c ****             if (keymap_config.swap_backslash_backspace) {
 106:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
 107:../../tmk_core/common/keymap.c ****             }
 108:../../tmk_core/common/keymap.c ****             return keycode_to_action(KC_BSPACE);
 109:../../tmk_core/common/keymap.c **** #endif
 110:../../tmk_core/common/keymap.c ****         default:
 111:../../tmk_core/common/keymap.c ****             return keycode_to_action(keycode);
 112:../../tmk_core/common/keymap.c ****     }
 113:../../tmk_core/common/keymap.c **** }
 114:../../tmk_core/common/keymap.c **** 
 115:../../tmk_core/common/keymap.c **** 
 116:../../tmk_core/common/keymap.c **** /* Macro */
 117:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 118:../../tmk_core/common/keymap.c **** const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
 119:../../tmk_core/common/keymap.c **** {
 120:../../tmk_core/common/keymap.c ****     (void)record;
 121:../../tmk_core/common/keymap.c ****     (void)id;
 122:../../tmk_core/common/keymap.c ****     (void)opt;
 123:../../tmk_core/common/keymap.c ****     return MACRO_NONE;
 124:../../tmk_core/common/keymap.c **** }
 125:../../tmk_core/common/keymap.c **** 
 126:../../tmk_core/common/keymap.c **** /* Function */
 127:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 128:../../tmk_core/common/keymap.c **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 129:../../tmk_core/common/keymap.c **** {
 130:../../tmk_core/common/keymap.c ****     (void)record;
 131:../../tmk_core/common/keymap.c ****     (void)id;
 132:../../tmk_core/common/keymap.c ****     (void)opt;
 133:../../tmk_core/common/keymap.c **** }
 134:../../tmk_core/common/keymap.c **** 
 135:../../tmk_core/common/keymap.c **** 
 136:../../tmk_core/common/keymap.c **** 
 137:../../tmk_core/common/keymap.c **** /* translates keycode to action */
 138:../../tmk_core/common/keymap.c **** static action_t keycode_to_action(uint8_t keycode)
 139:../../tmk_core/common/keymap.c **** {
  15               		.loc 1 139 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 140:../../tmk_core/common/keymap.c ****     switch (keycode) {
  22               		.loc 1 140 0
  23 0000 8D3B      		cpi r24,lo8(-67)
  24 0002 00F4      		brsh .L3
  25 0004 883A      		cpi r24,lo8(-88)
  26 0006 00F4      		brsh .L4
  27 0008 853A      		cpi r24,lo8(-91)
  28 000a 00F4      		brsh .L5
  29 000c 8430      		cpi r24,lo8(4)
  30 000e 00F4      		brsh .L6
  31 0010 8130      		cpi r24,lo8(1)
  32 0012 01F4      		brne .+2
  33 0014 00C0      		rjmp .L7
  34               	.LVL1:
  35               	.L2:
 141:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
 142:../../tmk_core/common/keymap.c ****         case KC_LCTRL ... KC_RGUI:
 143:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_KEY(keycode);
 144:../../tmk_core/common/keymap.c ****             break;
 145:../../tmk_core/common/keymap.c ****         case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
 146:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
 147:../../tmk_core/common/keymap.c ****             break;
 148:../../tmk_core/common/keymap.c ****         case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
 149:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
 150:../../tmk_core/common/keymap.c ****             break;
 151:../../tmk_core/common/keymap.c ****         case KC_MS_UP ... KC_MS_ACCEL2:
 152:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_MOUSEKEY(keycode);
 153:../../tmk_core/common/keymap.c ****             break;
 154:../../tmk_core/common/keymap.c ****         case KC_TRNS:
 155:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_TRANSPARENT;
 156:../../tmk_core/common/keymap.c ****             break;
 157:../../tmk_core/common/keymap.c ****         case KC_BOOTLOADER:
 158:../../tmk_core/common/keymap.c ****             clear_keyboard();
 159:../../tmk_core/common/keymap.c ****             wait_ms(50);
 160:../../tmk_core/common/keymap.c ****             bootloader_jump(); // not return
 161:../../tmk_core/common/keymap.c ****             break;
 162:../../tmk_core/common/keymap.c ****         default:
 163:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
  36               		.loc 1 163 0
  37 0016 90E0      		ldi r25,0
  38 0018 80E0      		ldi r24,0
  39               	/* epilogue start */
 164:../../tmk_core/common/keymap.c ****             break;
 165:../../tmk_core/common/keymap.c ****     }
 166:../../tmk_core/common/keymap.c ****     return (action_t)ACTION_NO;
 167:../../tmk_core/common/keymap.c **** }
  40               		.loc 1 167 0
  41 001a 0895      		ret
  42               	.LVL2:
  43               	.L3:
 140:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
  44               		.loc 1 140 0
  45 001c 883E      		cpi r24,lo8(-24)
  46 001e 00F4      		brsh .L8
  47 0020 803E      		cpi r24,lo8(-32)
  48 0022 00F4      		brsh .L6
  49 0024 8F3B      		cpi r24,lo8(-65)
  50 0026 01F4      		brne .L2
 158:../../tmk_core/common/keymap.c ****             wait_ms(50);
  51               		.loc 1 158 0
  52 0028 0E94 0000 		call clear_keyboard
  53               	.LVL3:
  54               	.LBB4:
  55               	.LBB5:
  56               		.file 2 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  57               		.loc 2 187 0
  58 002c 2FEF      		ldi r18,lo8(159999)
  59 002e 80E7      		ldi r24,hi8(159999)
  60 0030 92E0      		ldi r25,hlo8(159999)
  61 0032 2150      	1:	subi r18,1
  62 0034 8040      		sbci r24,0
  63 0036 9040      		sbci r25,0
  64 0038 01F4      		brne 1b
  65 003a 00C0      		rjmp .
  66 003c 0000      		nop
  67               	.LVL4:
  68               	.LBE5:
  69               	.LBE4:
 160:../../tmk_core/common/keymap.c ****             break;
  70               		.loc 1 160 0
  71 003e 0E94 0000 		call bootloader_jump
  72               	.LVL5:
  73 0042 00C0      		rjmp .L2
  74               	.LVL6:
  75               	.L8:
 140:../../tmk_core/common/keymap.c ****         case KC_A ... KC_EXSEL:
  76               		.loc 1 140 0
  77 0044 803F      		cpi r24,lo8(-16)
  78 0046 00F0      		brlo .L2
  79 0048 90E0      		ldi r25,0
 152:../../tmk_core/common/keymap.c ****             break;
  80               		.loc 1 152 0
  81 004a 9065      		ori r25,80
  82               	.LVL7:
  83 004c 0895      		ret
  84               	.LVL8:
  85               	.L6:
 143:../../tmk_core/common/keymap.c ****             break;
  86               		.loc 1 143 0
  87 004e 90E0      		ldi r25,0
  88 0050 0895      		ret
  89               	.L5:
 146:../../tmk_core/common/keymap.c ****             break;
  90               		.loc 1 146 0
  91 0052 31E8      		ldi r19,lo8(-127)
  92 0054 853A      		cpi r24,lo8(-91)
  93 0056 01F0      		breq .L38
 146:../../tmk_core/common/keymap.c ****             break;
  94               		.loc 1 146 0 is_stmt 0 discriminator 1
  95 0058 33E8      		ldi r19,lo8(-125)
  96 005a 863A      		cpi r24,lo8(-90)
  97 005c 01F4      		brne .L38
 146:../../tmk_core/common/keymap.c ****             break;
  98               		.loc 1 146 0
  99 005e 32E8      		ldi r19,lo8(-126)
 100               	.L38:
 101 0060 20E4      		ldi r18,lo8(64)
 102               	.L13:
 149:../../tmk_core/common/keymap.c ****             break;
 103               		.loc 1 149 0 is_stmt 1 discriminator 84
 104 0062 832F      		mov r24,r19
 105               	.LVL9:
 106 0064 922F      		mov r25,r18
 107 0066 0895      		ret
 108               	.LVL10:
 109               	.L4:
 149:../../tmk_core/common/keymap.c ****             break;
 110               		.loc 1 149 0 is_stmt 0
 111 0068 883A      		cpi r24,lo8(-88)
 112 006a 01F0      		breq .L16
 149:../../tmk_core/common/keymap.c ****             break;
 113               		.loc 1 149 0 discriminator 1
 114 006c 893A      		cpi r24,lo8(-87)
 115 006e 01F0      		breq .L17
 149:../../tmk_core/common/keymap.c ****             break;
 116               		.loc 1 149 0 discriminator 3
 117 0070 8A3A      		cpi r24,lo8(-86)
 118 0072 01F0      		breq .L18
 149:../../tmk_core/common/keymap.c ****             break;
 119               		.loc 1 149 0 discriminator 5
 120 0074 8B3A      		cpi r24,lo8(-85)
 121 0076 01F0      		breq .L19
 149:../../tmk_core/common/keymap.c ****             break;
 122               		.loc 1 149 0 discriminator 7
 123 0078 8C3A      		cpi r24,lo8(-84)
 124 007a 01F0      		breq .L20
 149:../../tmk_core/common/keymap.c ****             break;
 125               		.loc 1 149 0 discriminator 9
 126 007c 8D3A      		cpi r24,lo8(-83)
 127 007e 01F0      		breq .L21
 149:../../tmk_core/common/keymap.c ****             break;
 128               		.loc 1 149 0 discriminator 11
 129 0080 8E3A      		cpi r24,lo8(-82)
 130 0082 01F0      		breq .L22
 149:../../tmk_core/common/keymap.c ****             break;
 131               		.loc 1 149 0 discriminator 13
 132 0084 8F3A      		cpi r24,lo8(-81)
 133 0086 01F0      		breq .L23
 149:../../tmk_core/common/keymap.c ****             break;
 134               		.loc 1 149 0 discriminator 15
 135 0088 813B      		cpi r24,lo8(-79)
 136 008a 01F0      		breq .L24
 149:../../tmk_core/common/keymap.c ****             break;
 137               		.loc 1 149 0 discriminator 17
 138 008c 803B      		cpi r24,lo8(-80)
 139 008e 01F0      		breq .L25
 149:../../tmk_core/common/keymap.c ****             break;
 140               		.loc 1 149 0 discriminator 19
 141 0090 823B      		cpi r24,lo8(-78)
 142 0092 01F0      		breq .L26
 149:../../tmk_core/common/keymap.c ****             break;
 143               		.loc 1 149 0 discriminator 21
 144 0094 833B      		cpi r24,lo8(-77)
 145 0096 01F0      		breq .L27
 149:../../tmk_core/common/keymap.c ****             break;
 146               		.loc 1 149 0 discriminator 23
 147 0098 843B      		cpi r24,lo8(-76)
 148 009a 01F0      		breq .L28
 149:../../tmk_core/common/keymap.c ****             break;
 149               		.loc 1 149 0 discriminator 25
 150 009c 853B      		cpi r24,lo8(-75)
 151 009e 01F0      		breq .L29
 149:../../tmk_core/common/keymap.c ****             break;
 152               		.loc 1 149 0 discriminator 27
 153 00a0 863B      		cpi r24,lo8(-74)
 154 00a2 01F0      		breq .L30
 149:../../tmk_core/common/keymap.c ****             break;
 155               		.loc 1 149 0 discriminator 29
 156 00a4 873B      		cpi r24,lo8(-73)
 157 00a6 01F0      		breq .L31
 149:../../tmk_core/common/keymap.c ****             break;
 158               		.loc 1 149 0 discriminator 31
 159 00a8 883B      		cpi r24,lo8(-72)
 160 00aa 01F0      		breq .L32
 149:../../tmk_core/common/keymap.c ****             break;
 161               		.loc 1 149 0 discriminator 33
 162 00ac 893B      		cpi r24,lo8(-71)
 163 00ae 01F0      		breq .L33
 149:../../tmk_core/common/keymap.c ****             break;
 164               		.loc 1 149 0 discriminator 35
 165 00b0 8A3B      		cpi r24,lo8(-70)
 166 00b2 01F0      		breq .L34
 149:../../tmk_core/common/keymap.c ****             break;
 167               		.loc 1 149 0 discriminator 37
 168 00b4 8B3B      		cpi r24,lo8(-69)
 169 00b6 01F0      		breq .L35
 149:../../tmk_core/common/keymap.c ****             break;
 170               		.loc 1 149 0 discriminator 39
 171 00b8 30E0      		ldi r19,0
 172 00ba 8C3B      		cpi r24,lo8(-68)
 173 00bc 01F4      		brne .L39
 149:../../tmk_core/common/keymap.c ****             break;
 174               		.loc 1 149 0
 175 00be 3AE2      		ldi r19,lo8(42)
 176 00c0 00C0      		rjmp .L40
 177               	.L16:
 178 00c2 32EE      		ldi r19,lo8(-30)
 179               	.L39:
 180 00c4 24E4      		ldi r18,lo8(68)
 181 00c6 00C0      		rjmp .L13
 182               	.L17:
 183 00c8 39EE      		ldi r19,lo8(-23)
 184 00ca 00C0      		rjmp .L39
 185               	.L18:
 186 00cc 3AEE      		ldi r19,lo8(-22)
 187 00ce 00C0      		rjmp .L39
 188               	.L19:
 189 00d0 35EB      		ldi r19,lo8(-75)
 190 00d2 00C0      		rjmp .L39
 191               	.L20:
 192 00d4 36EB      		ldi r19,lo8(-74)
 193 00d6 00C0      		rjmp .L39
 194               	.L21:
 195 00d8 33EB      		ldi r19,lo8(-77)
 196 00da 00C0      		rjmp .L39
 197               	.L22:
 198 00dc 34EB      		ldi r19,lo8(-76)
 199 00de 00C0      		rjmp .L39
 200               	.L23:
 201 00e0 37EB      		ldi r19,lo8(-73)
 202 00e2 00C0      		rjmp .L39
 203               	.L24:
 204 00e4 3CEC      		ldi r19,lo8(-52)
 205 00e6 00C0      		rjmp .L39
 206               	.L25:
 207 00e8 3DEC      		ldi r19,lo8(-51)
 208 00ea 00C0      		rjmp .L39
 209               	.L26:
 210 00ec 33E8      		ldi r19,lo8(-125)
 211               	.L41:
 212 00ee 25E4      		ldi r18,lo8(69)
 213 00f0 00C0      		rjmp .L13
 214               	.L27:
 215 00f2 3AE8      		ldi r19,lo8(-118)
 216 00f4 00C0      		rjmp .L41
 217               	.L28:
 218 00f6 32E9      		ldi r19,lo8(-110)
 219 00f8 00C0      		rjmp .L41
 220               	.L29:
 221 00fa 34E9      		ldi r19,lo8(-108)
 222 00fc 00C0      		rjmp .L41
 223               	.L30:
 224 00fe 31E2      		ldi r19,lo8(33)
 225               	.L40:
 226 0100 26E4      		ldi r18,lo8(70)
 227 0102 00C0      		rjmp .L13
 228               	.L31:
 229 0104 33E2      		ldi r19,lo8(35)
 230 0106 00C0      		rjmp .L40
 231               	.L32:
 232 0108 34E2      		ldi r19,lo8(36)
 233 010a 00C0      		rjmp .L40
 234               	.L33:
 235 010c 35E2      		ldi r19,lo8(37)
 236 010e 00C0      		rjmp .L40
 237               	.L34:
 238 0110 36E2      		ldi r19,lo8(38)
 239 0112 00C0      		rjmp .L40
 240               	.L35:
 241 0114 37E2      		ldi r19,lo8(39)
 242 0116 00C0      		rjmp .L40
 243               	.L7:
 155:../../tmk_core/common/keymap.c ****             break;
 244               		.loc 1 155 0 is_stmt 1
 245 0118 81E0      		ldi r24,lo8(1)
 246 011a 90E0      		ldi r25,0
 247               	.LVL11:
 248 011c 0895      		ret
 249               		.cfi_endproc
 250               	.LFE106:
 252               		.section	.text.action_get_macro,"ax",@progbits
 253               		.weak	action_get_macro
 255               	action_get_macro:
 256               	.LFB104:
 119:../../tmk_core/common/keymap.c ****     (void)record;
 257               		.loc 1 119 0
 258               		.cfi_startproc
 259               	.LVL12:
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 124:../../tmk_core/common/keymap.c **** 
 264               		.loc 1 124 0
 265 0000 90E0      		ldi r25,0
 266 0002 80E0      		ldi r24,0
 267               	.LVL13:
 268               	/* epilogue start */
 269 0004 0895      		ret
 270               		.cfi_endproc
 271               	.LFE104:
 273               		.section	.text.action_function,"ax",@progbits
 274               		.weak	action_function
 276               	action_function:
 277               	.LFB105:
 129:../../tmk_core/common/keymap.c ****     (void)record;
 278               		.loc 1 129 0
 279               		.cfi_startproc
 280               	.LVL14:
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 0 */
 284               	.L__stack_usage = 0
 285               	/* epilogue start */
 133:../../tmk_core/common/keymap.c **** 
 286               		.loc 1 133 0
 287 0000 0895      		ret
 288               		.cfi_endproc
 289               	.LFE105:
 291               		.section	.text.keymap_key_to_keycode,"ax",@progbits
 292               		.weak	keymap_key_to_keycode
 294               	keymap_key_to_keycode:
 295               	.LFB107:
 168:../../tmk_core/common/keymap.c **** 
 169:../../tmk_core/common/keymap.c **** 
 170:../../tmk_core/common/keymap.c **** 
 171:../../tmk_core/common/keymap.c **** #ifdef USE_LEGACY_KEYMAP
 172:../../tmk_core/common/keymap.c **** /*
 173:../../tmk_core/common/keymap.c ****  * Legacy keymap support
 174:../../tmk_core/common/keymap.c ****  *      Consider using new keymap API instead.
 175:../../tmk_core/common/keymap.c ****  */
 176:../../tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 177:../../tmk_core/common/keymap.c **** extern const uint8_t fn_layer[];
 178:../../tmk_core/common/keymap.c **** extern const uint8_t fn_keycode[];
 179:../../tmk_core/common/keymap.c **** 
 180:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 181:../../tmk_core/common/keymap.c **** uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
 182:../../tmk_core/common/keymap.c **** {
 183:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
 184:../../tmk_core/common/keymap.c **** }
 185:../../tmk_core/common/keymap.c **** 
 186:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 187:../../tmk_core/common/keymap.c **** uint8_t keymap_fn_layer(uint8_t index)
 188:../../tmk_core/common/keymap.c **** {
 189:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_layer[index]);
 190:../../tmk_core/common/keymap.c **** }
 191:../../tmk_core/common/keymap.c **** 
 192:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 193:../../tmk_core/common/keymap.c **** uint8_t keymap_fn_keycode(uint8_t index)
 194:../../tmk_core/common/keymap.c **** {
 195:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&fn_keycode[index]);
 196:../../tmk_core/common/keymap.c **** }
 197:../../tmk_core/common/keymap.c **** 
 198:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 199:../../tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 200:../../tmk_core/common/keymap.c **** {
 201:../../tmk_core/common/keymap.c ****     return keymap_get_keycode(layer, key.row, key.col);
 202:../../tmk_core/common/keymap.c **** }
 203:../../tmk_core/common/keymap.c **** 
 204:../../tmk_core/common/keymap.c **** 
 205:../../tmk_core/common/keymap.c **** /* Legacy keymap support */
 206:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 207:../../tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 208:../../tmk_core/common/keymap.c **** {
 209:../../tmk_core/common/keymap.c ****     switch (keycode) {
 210:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 211:../../tmk_core/common/keymap.c ****             {
 212:../../tmk_core/common/keymap.c ****                 uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
 213:../../tmk_core/common/keymap.c ****                 uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
 214:../../tmk_core/common/keymap.c ****                 if (key) {
 215:../../tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
 216:../../tmk_core/common/keymap.c ****                 } else {
 217:../../tmk_core/common/keymap.c ****                     return (action_t)ACTION_LAYER_MOMENTARY(layer);
 218:../../tmk_core/common/keymap.c ****                 }
 219:../../tmk_core/common/keymap.c ****             }
 220:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 221:../../tmk_core/common/keymap.c ****         default:
 222:../../tmk_core/common/keymap.c ****             return (action_t)ACTION_NO;
 223:../../tmk_core/common/keymap.c ****     }
 224:../../tmk_core/common/keymap.c **** }
 225:../../tmk_core/common/keymap.c **** 
 226:../../tmk_core/common/keymap.c **** #else
 227:../../tmk_core/common/keymap.c **** 
 228:../../tmk_core/common/keymap.c **** /* user keymaps should be defined somewhere */
 229:../../tmk_core/common/keymap.c **** extern const uint8_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
 230:../../tmk_core/common/keymap.c **** extern const action_t fn_actions[];
 231:../../tmk_core/common/keymap.c **** 
 232:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 233:../../tmk_core/common/keymap.c **** uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
 234:../../tmk_core/common/keymap.c **** {
 296               		.loc 1 234 0
 297               		.cfi_startproc
 298               	.LVL15:
 299               	/* prologue: function */
 300               	/* frame size = 0 */
 301               	/* stack size = 0 */
 302               	.L__stack_usage = 0
 303               	.LBB6:
 235:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
 236:../../tmk_core/common/keymap.c ****     return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
 304               		.loc 1 236 0
 305 0000 E62F      		mov r30,r22
 306 0002 F0E0      		ldi r31,0
 307 0004 9FE0      		ldi r25,lo8(15)
 308 0006 799F      		mul r23,r25
 309 0008 E00D      		add r30,r0
 310 000a F11D      		adc r31,r1
 311 000c 1124      		clr __zero_reg__
 312 000e 9BE4      		ldi r25,lo8(75)
 313 0010 899F      		mul r24,r25
 314 0012 E00D      		add r30,r0
 315 0014 F11D      		adc r31,r1
 316 0016 1124      		clr __zero_reg__
 317 0018 E050      		subi r30,lo8(-(keymaps))
 318 001a F040      		sbci r31,hi8(-(keymaps))
 319               	/* #APP */
 320               	 ;  236 "../../tmk_core/common/keymap.c" 1
 321 001c 8491      		lpm r24, Z
 322               		
 323               	 ;  0 "" 2
 324               	.LVL16:
 325               	/* epilogue start */
 326               	/* #NOAPP */
 327               	.LBE6:
 237:../../tmk_core/common/keymap.c **** #else
 238:../../tmk_core/common/keymap.c ****     return keymaps[(layer)][(key.row)][(key.col)];
 239:../../tmk_core/common/keymap.c **** #endif
 240:../../tmk_core/common/keymap.c **** }
 328               		.loc 1 240 0
 329 001e 0895      		ret
 330               		.cfi_endproc
 331               	.LFE107:
 333               		.section	.text.keymap_fn_to_action,"ax",@progbits
 334               		.weak	keymap_fn_to_action
 336               	keymap_fn_to_action:
 337               	.LFB108:
 241:../../tmk_core/common/keymap.c **** 
 242:../../tmk_core/common/keymap.c **** __attribute__ ((weak))
 243:../../tmk_core/common/keymap.c **** action_t keymap_fn_to_action(uint8_t keycode)
 244:../../tmk_core/common/keymap.c **** {
 338               		.loc 1 244 0
 339               		.cfi_startproc
 340               	.LVL17:
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 0 */
 344               	.L__stack_usage = 0
 345               	.LBB7:
 245:../../tmk_core/common/keymap.c **** #if defined(__AVR__)
 246:../../tmk_core/common/keymap.c ****     return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
 346               		.loc 1 246 0
 347 0000 282F      		mov r18,r24
 348 0002 205C      		subi r18,192
 349 0004 330B      		sbc r19,r19
 350 0006 F901      		movw r30,r18
 351 0008 EE0F      		lsl r30
 352 000a FF1F      		rol r31
 353               	.LVL18:
 354 000c E050      		subi r30,lo8(-(fn_actions))
 355 000e F040      		sbci r31,hi8(-(fn_actions))
 356               	.LVL19:
 357               	/* #APP */
 358               	 ;  246 "../../tmk_core/common/keymap.c" 1
 359 0010 8591      		lpm r24, Z+
 360 0012 9491      		lpm r25, Z
 361               		
 362               	 ;  0 "" 2
 363               	.LVL20:
 364               	/* epilogue start */
 365               	/* #NOAPP */
 366               	.LBE7:
 247:../../tmk_core/common/keymap.c **** #else
 248:../../tmk_core/common/keymap.c ****     return fn_actions[FN_INDEX(keycode)];
 249:../../tmk_core/common/keymap.c **** #endif
 250:../../tmk_core/common/keymap.c **** }
 367               		.loc 1 250 0
 368 0014 0895      		ret
 369               		.cfi_endproc
 370               	.LFE108:
 372               		.section	.text.action_for_key,"ax",@progbits
 373               		.weak	action_for_key
 375               	action_for_key:
 376               	.LFB103:
  40:../../tmk_core/common/keymap.c ****     uint8_t keycode = keymap_key_to_keycode(layer, key);
 377               		.loc 1 40 0
 378               		.cfi_startproc
 379               	.LVL21:
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
  41:../../tmk_core/common/keymap.c ****     switch (keycode) {
 384               		.loc 1 41 0
 385 0000 0E94 0000 		call keymap_key_to_keycode
 386               	.LVL22:
  42:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 387               		.loc 1 42 0
 388 0004 803E      		cpi r24,lo8(-32)
 389 0006 00F4      		brsh .L48
 390 0008 803C      		cpi r24,lo8(-64)
 391 000a 00F4      		brsh .L49
 392 000c 8133      		cpi r24,lo8(49)
 393 000e 01F4      		brne .+2
 394 0010 00C0      		rjmp .L50
 395 0012 00F4      		brsh .L51
 396 0014 8932      		cpi r24,lo8(41)
 397 0016 01F4      		brne .+2
 398 0018 00C0      		rjmp .L52
 399 001a 8A32      		cpi r24,lo8(42)
 400 001c 01F4      		brne .+2
 401 001e 00C0      		rjmp .L53
 402               	.LVL23:
 403               	.L47:
 111:../../tmk_core/common/keymap.c ****     }
 404               		.loc 1 111 0
 405 0020 0C94 0000 		jmp keycode_to_action
 406               	.LVL24:
 407               	.L51:
  42:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 408               		.loc 1 42 0
 409 0024 8933      		cpi r24,lo8(57)
 410 0026 01F0      		breq .L54
 411 0028 8238      		cpi r24,lo8(-126)
 412 002a 01F0      		breq .L54
 413 002c 8533      		cpi r24,lo8(53)
 414 002e 01F4      		brne .L47
  90:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_ESC);
 415               		.loc 1 90 0
 416 0030 8091 0000 		lds r24,keymap_config
 417               	.LVL25:
 418 0034 85FF      		sbrs r24,5
 419 0036 00C0      		rjmp .L69
 420               	.L70:
  91:../../tmk_core/common/keymap.c ****             }
 421               		.loc 1 91 0
 422 0038 89E2      		ldi r24,lo8(41)
 423 003a 00C0      		rjmp .L47
 424               	.LVL26:
 425               	.L48:
  42:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 426               		.loc 1 42 0
 427 003c 833E      		cpi r24,lo8(-29)
 428 003e 01F0      		breq .L56
 429 0040 00F4      		brsh .L57
 430 0042 803E      		cpi r24,lo8(-32)
 431 0044 01F0      		breq .L58
 432 0046 823E      		cpi r24,lo8(-30)
 433 0048 01F4      		brne .L47
  58:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 434               		.loc 1 58 0
 435 004a 8091 0000 		lds r24,keymap_config
 436               	.LVL27:
 437 004e 82FF      		sbrs r24,2
 438 0050 00C0      		rjmp .L64
 439               	.L97:
  59:../../tmk_core/common/keymap.c ****                     return keycode_to_action(KC_NO);
 440               		.loc 1 59 0
 441 0052 84FF      		sbrs r24,4
 442 0054 00C0      		rjmp .L65
 443               	.L66:
  60:../../tmk_core/common/keymap.c ****                 }
 444               		.loc 1 60 0
 445 0056 80E0      		ldi r24,0
 446 0058 00C0      		rjmp .L47
 447               	.LVL28:
 448               	.L57:
  42:../../tmk_core/common/keymap.c ****         case KC_FN0 ... KC_FN31:
 449               		.loc 1 42 0
 450 005a 863E      		cpi r24,lo8(-26)
 451 005c 01F0      		breq .L60
 452 005e 873E      		cpi r24,lo8(-25)
 453 0060 01F4      		brne .L47
  82:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_RALT);
 454               		.loc 1 82 0
 455 0062 8091 0000 		lds r24,keymap_config
 456               	.LVL29:
 457 0066 83FF      		sbrs r24,3
 458 0068 00C0      		rjmp .L98
 459               	.L67:
  80:../../tmk_core/common/keymap.c ****         case KC_RGUI:
 460               		.loc 1 80 0
 461 006a 86EE      		ldi r24,lo8(-26)
 462 006c 00C0      		rjmp .L47
 463               	.LVL30:
 464               	.L49:
  44:../../tmk_core/common/keymap.c **** #ifdef BOOTMAGIC_ENABLE
 465               		.loc 1 44 0
 466 006e 0C94 0000 		jmp keymap_fn_to_action
 467               	.LVL31:
 468               	.L54:
  48:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LCTL);
 469               		.loc 1 48 0
 470 0072 9091 0000 		lds r25,keymap_config
 471 0076 9370      		andi r25,lo8(3)
 472 0078 01F0      		breq .L47
 473               	.LVL32:
 474               	.L63:
  49:../../tmk_core/common/keymap.c ****             }
 475               		.loc 1 49 0
 476 007a 80EE      		ldi r24,lo8(-32)
 477 007c 00C0      		rjmp .L47
 478               	.LVL33:
 479               	.L58:
  53:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_CAPSLOCK);
 480               		.loc 1 53 0
 481 007e 8091 0000 		lds r24,keymap_config
 482               	.LVL34:
 483 0082 80FF      		sbrs r24,0
 484 0084 00C0      		rjmp .L63
  54:../../tmk_core/common/keymap.c ****             }
 485               		.loc 1 54 0
 486 0086 89E3      		ldi r24,lo8(57)
 487 0088 00C0      		rjmp .L47
 488               	.L65:
  62:../../tmk_core/common/keymap.c ****             }
 489               		.loc 1 62 0
 490 008a 83EE      		ldi r24,lo8(-29)
 491 008c 00C0      		rjmp .L47
 492               	.LVL35:
 493               	.L56:
  66:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_LALT);
 494               		.loc 1 66 0
 495 008e 8091 0000 		lds r24,keymap_config
 496               	.LVL36:
 497 0092 82FF      		sbrs r24,2
 498 0094 00C0      		rjmp .L97
 499               	.L64:
  64:../../tmk_core/common/keymap.c ****         case KC_LGUI:
 500               		.loc 1 64 0
 501 0096 82EE      		ldi r24,lo8(-30)
 502 0098 00C0      		rjmp .L47
 503               	.LVL37:
 504               	.L60:
  74:../../tmk_core/common/keymap.c ****                 if (keymap_config.no_gui) {
 505               		.loc 1 74 0
 506 009a 8091 0000 		lds r24,keymap_config
 507               	.LVL38:
 508 009e 83FF      		sbrs r24,3
 509 00a0 00C0      		rjmp .L67
 510               	.L98:
  85:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_NO);
 511               		.loc 1 85 0
 512 00a2 84FD      		sbrc r24,4
 513 00a4 00C0      		rjmp .L66
  78:../../tmk_core/common/keymap.c ****             }
 514               		.loc 1 78 0
 515 00a6 87EE      		ldi r24,lo8(-25)
 516 00a8 00C0      		rjmp .L47
 517               	.LVL39:
 518               	.L52:
  95:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_GRAVE);
 519               		.loc 1 95 0
 520 00aa 8091 0000 		lds r24,keymap_config
 521               	.LVL40:
 522 00ae 85FF      		sbrs r24,5
 523 00b0 00C0      		rjmp .L70
 524               	.L69:
  93:../../tmk_core/common/keymap.c ****         case KC_ESC:
 525               		.loc 1 93 0
 526 00b2 85E3      		ldi r24,lo8(53)
 527 00b4 00C0      		rjmp .L47
 528               	.LVL41:
 529               	.L50:
 100:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSPACE);
 530               		.loc 1 100 0
 531 00b6 8091 0000 		lds r24,keymap_config
 532               	.LVL42:
 533 00ba 86FF      		sbrs r24,6
 534 00bc 00C0      		rjmp .L71
 535               	.L72:
 101:../../tmk_core/common/keymap.c ****             }
 536               		.loc 1 101 0
 537 00be 8AE2      		ldi r24,lo8(42)
 538 00c0 00C0      		rjmp .L47
 539               	.LVL43:
 540               	.L53:
 105:../../tmk_core/common/keymap.c ****                 return keycode_to_action(KC_BSLASH);
 541               		.loc 1 105 0
 542 00c2 8091 0000 		lds r24,keymap_config
 543               	.LVL44:
 544 00c6 86FF      		sbrs r24,6
 545 00c8 00C0      		rjmp .L72
 546               	.L71:
 103:../../tmk_core/common/keymap.c ****         case KC_BSPACE:
 547               		.loc 1 103 0
 548 00ca 81E3      		ldi r24,lo8(49)
 549 00cc 00C0      		rjmp .L47
 550               		.cfi_endproc
 551               	.LFE103:
 553               		.text
 554               	.Letext0:
 555               		.file 3 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdint.h"
 556               		.file 4 "../../tmk_core/common/keyboard.h"
 557               		.file 5 "../../tmk_core/common/keycode.h"
 558               		.file 6 "../../tmk_core/common/action_code.h"
 559               		.file 7 "../../tmk_core/common/action_macro.h"
 560               		.file 8 "../../tmk_core/common/action.h"
 561               		.file 9 "../../tmk_core/common/keymap.h"
 562               		.file 10 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 563               		.file 11 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 564               		.file 12 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 565               		.file 13 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 566               		.file 14 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdio.h"
 567               		.file 15 "../../tmk_core/common/action_layer.h"
 568               		.file 16 "../../tmk_core/common/avr/xprintf.h"
 569               		.file 17 "../../tmk_core/common/debug.h"
 570               		.file 18 "../../tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:12     .text.keycode_to_action:0000000000000000 keycode_to_action
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:255    .text.action_get_macro:0000000000000000 action_get_macro
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:276    .text.action_function:0000000000000000 action_function
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:294    .text.keymap_key_to_keycode:0000000000000000 keymap_key_to_keycode
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:336    .text.keymap_fn_to_action:0000000000000000 keymap_fn_to_action
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//cckJv5Sp.s:375    .text.action_for_key:0000000000000000 action_for_key

UNDEFINED SYMBOLS
clear_keyboard
bootloader_jump
keymaps
fn_actions
keymap_config
