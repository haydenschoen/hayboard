   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_protocol
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               		.loc 1 79 0 is_stmt 0 discriminator 1
  28 0008 9091 0000 		lds r25,keyboard_nkro
  29 000c 9923      		tst r25
  30 000e 01F0      		breq .L2
  31               	.LVL1:
  32               	.LBB7:
  33               	.LBB8:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  34               		.loc 1 292 0 is_stmt 1
  35 0010 E82F      		mov r30,r24
  36 0012 E695      		lsr r30
  37 0014 E695      		lsr r30
  38 0016 E695      		lsr r30
  39 0018 EF31      		cpi r30,lo8(31)
  40 001a 01F0      		breq .L3
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  41               		.loc 1 293 0
  42 001c 2091 0000 		lds r18,keyboard_report
  43 0020 3091 0000 		lds r19,keyboard_report+1
  44 0024 E20F      		add r30,r18
  45 0026 F32F      		mov r31,r19
  46 0028 F11D      		adc r31,__zero_reg__
  47 002a 8770      		andi r24,lo8(7)
  48               	.LVL2:
  49 002c 21E0      		ldi r18,lo8(1)
  50 002e 30E0      		ldi r19,0
  51 0030 00C0      		rjmp 2f
  52               		1:
  53 0032 220F      		lsl r18
  54               		2:
  55 0034 8A95      		dec r24
  56 0036 02F4      		brpl 1b
  57 0038 8181      		ldd r24,Z+1
  58 003a 822B      		or r24,r18
  59 003c 8183      		std Z+1,r24
  60 003e 0895      		ret
  61               	.LVL3:
  62               	.L3:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  63               		.loc 1 295 0
  64 0040 9091 0000 		lds r25,debug_config
  65 0044 90FF      		sbrs r25,0
  66 0046 00C0      		rjmp .L1
  67 0048 1F92      		push __zero_reg__
  68               	.LCFI0:
  69               		.cfi_def_cfa_offset 3
  70 004a 8F93      		push r24
  71               	.LCFI1:
  72               		.cfi_def_cfa_offset 4
  73 004c 80E0      		ldi r24,lo8(__c.4668)
  74 004e 90E0      		ldi r25,hi8(__c.4668)
  75               	.LVL4:
  76 0050 9F93      		push r25
  77               	.LCFI2:
  78               		.cfi_def_cfa_offset 5
  79               	.LVL5:
  80 0052 8F93      		push r24
  81               	.LCFI3:
  82               		.cfi_def_cfa_offset 6
  83 0054 0E94 0000 		call __xprintf
  84               	.LVL6:
  85 0058 0F90      		pop __tmp_reg__
  86 005a 0F90      		pop __tmp_reg__
  87 005c 0F90      		pop __tmp_reg__
  88 005e 0F90      		pop __tmp_reg__
  89               	.LCFI4:
  90               		.cfi_def_cfa_offset 2
  91 0060 0895      		ret
  92               	.LVL7:
  93               	.L2:
  94               	.LBE8:
  95               	.LBE7:
  96               	.LBB9:
  97               	.LBB10:
 238:../../tmk_core/common/action_util.c ****             break;
  98               		.loc 1 238 0
  99 0062 2091 0000 		lds r18,keyboard_report
 100 0066 3091 0000 		lds r19,keyboard_report+1
 101 006a F901      		movw r30,r18
 102 006c 3296      		adiw r30,2
 103 006e 9FEF      		ldi r25,lo8(-1)
 104 0070 40E0      		ldi r20,0
 105               	.L6:
 106               	.LVL8:
 107 0072 5191      		ld r21,Z+
 108 0074 8517      		cp r24,r21
 109 0076 01F0      		breq .L1
 241:../../tmk_core/common/action_util.c ****             empty = i;
 110               		.loc 1 241 0
 111 0078 9F3F      		cpi r25,lo8(-1)
 112 007a 01F4      		brne .L5
 113 007c 5111      		cpse r21,__zero_reg__
 114 007e 00C0      		rjmp .L5
 115 0080 942F      		mov r25,r20
 116               	.LVL9:
 117               	.L5:
 118 0082 4F5F      		subi r20,lo8(-(1))
 119               	.LVL10:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 120               		.loc 1 237 0
 121 0084 4E31      		cpi r20,lo8(30)
 122 0086 01F4      		brne .L6
 246:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 123               		.loc 1 246 0
 124 0088 9F3F      		cpi r25,lo8(-1)
 125 008a 01F4      		brne .L8
 126               	.LVL11:
 127               	.L1:
 128               	/* epilogue start */
 129               	.LBE10:
 130               	.LBE9:
  85:../../tmk_core/common/action_util.c **** 
 131               		.loc 1 85 0
 132 008c 0895      		ret
 133               	.LVL12:
 134               	.L8:
 135               	.LBB12:
 136               	.LBB11:
 247:../../tmk_core/common/action_util.c ****         }
 137               		.loc 1 247 0
 138 008e 290F      		add r18,r25
 139 0090 311D      		adc r19,__zero_reg__
 140 0092 97FD      		sbrc r25,7
 141 0094 3A95      		dec r19
 142 0096 F901      		movw r30,r18
 143 0098 8283      		std Z+2,r24
 144 009a 0895      		ret
 145               	.LBE11:
 146               	.LBE12:
 147               		.cfi_endproc
 148               	.LFE101:
 150               		.section	.text.del_key,"ax",@progbits
 151               	.global	del_key
 153               	del_key:
 154               	.LFB102:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 155               		.loc 1 88 0
 156               		.cfi_startproc
 157               	.LVL13:
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 162               		.loc 1 90 0
 163 0000 9091 0000 		lds r25,keyboard_protocol
 164 0004 9923      		tst r25
 165 0006 01F0      		breq .L21
  90:../../tmk_core/common/action_util.c ****         del_key_bit(key);
 166               		.loc 1 90 0 is_stmt 0 discriminator 1
 167 0008 9091 0000 		lds r25,keyboard_nkro
 168 000c 9923      		tst r25
 169 000e 01F0      		breq .L21
 170               	.LVL14:
 171               	.LBB19:
 172               	.LBB20:
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 173               		.loc 1 301 0 is_stmt 1
 174 0010 E82F      		mov r30,r24
 175 0012 E695      		lsr r30
 176 0014 E695      		lsr r30
 177 0016 E695      		lsr r30
 178 0018 EF31      		cpi r30,lo8(31)
 179 001a 01F0      		breq .L22
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 180               		.loc 1 302 0
 181 001c 2091 0000 		lds r18,keyboard_report
 182 0020 3091 0000 		lds r19,keyboard_report+1
 183 0024 E20F      		add r30,r18
 184 0026 F32F      		mov r31,r19
 185 0028 F11D      		adc r31,__zero_reg__
 186 002a 282F      		mov r18,r24
 187 002c 2770      		andi r18,lo8(7)
 188 002e 81E0      		ldi r24,lo8(1)
 189 0030 90E0      		ldi r25,0
 190               	.LVL15:
 191 0032 00C0      		rjmp 2f
 192               		1:
 193 0034 880F      		lsl r24
 194               		2:
 195 0036 2A95      		dec r18
 196 0038 02F4      		brpl 1b
 197 003a 8095      		com r24
 198 003c 9181      		ldd r25,Z+1
 199 003e 8923      		and r24,r25
 200 0040 8183      		std Z+1,r24
 201 0042 0895      		ret
 202               	.LVL16:
 203               	.L22:
 303:../../tmk_core/common/action_util.c ****     } else {
 304:../../tmk_core/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 204               		.loc 1 304 0
 205 0044 9091 0000 		lds r25,debug_config
 206 0048 90FF      		sbrs r25,0
 207 004a 00C0      		rjmp .L20
 208 004c 1F92      		push __zero_reg__
 209               	.LCFI5:
 210               		.cfi_def_cfa_offset 3
 211 004e 8F93      		push r24
 212               	.LCFI6:
 213               		.cfi_def_cfa_offset 4
 214 0050 80E0      		ldi r24,lo8(__c.4673)
 215 0052 90E0      		ldi r25,hi8(__c.4673)
 216               	.LVL17:
 217 0054 9F93      		push r25
 218               	.LCFI7:
 219               		.cfi_def_cfa_offset 5
 220               	.LVL18:
 221 0056 8F93      		push r24
 222               	.LCFI8:
 223               		.cfi_def_cfa_offset 6
 224 0058 0E94 0000 		call __xprintf
 225               	.LVL19:
 226 005c 0F90      		pop __tmp_reg__
 227 005e 0F90      		pop __tmp_reg__
 228 0060 0F90      		pop __tmp_reg__
 229 0062 0F90      		pop __tmp_reg__
 230               	.LCFI9:
 231               		.cfi_def_cfa_offset 2
 232 0064 0895      		ret
 233               	.LVL20:
 234               	.L21:
 235               	.LBE20:
 236               	.LBE19:
 237               	.LBB21:
 238               	.LBB22:
 282:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 239               		.loc 1 282 0
 240 0066 2091 0000 		lds r18,keyboard_report
 241 006a 3091 0000 		lds r19,keyboard_report+1
 242 006e F901      		movw r30,r18
 243 0070 3296      		adiw r30,2
 244 0072 205E      		subi r18,-32
 245 0074 3F4F      		sbci r19,-1
 246               	.L26:
 247               	.LVL21:
 248 0076 9191      		ld r25,Z+
 249               	.LVL22:
 250 0078 8913      		cpse r24,r25
 251 007a 00C0      		rjmp .L25
 283:../../tmk_core/common/action_util.c ****         }
 252               		.loc 1 283 0
 253 007c DF01      		movw r26,r30
 254 007e 1197      		sbiw r26,1
 255 0080 1C92      		st X,__zero_reg__
 256               	.L25:
 257               	.LVL23:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 258               		.loc 1 281 0
 259 0082 E217      		cp r30,r18
 260 0084 F307      		cpc r31,r19
 261 0086 01F4      		brne .L26
 262               	.LVL24:
 263               	.L20:
 264               	/* epilogue start */
 265               	.LBE22:
 266               	.LBE21:
  96:../../tmk_core/common/action_util.c **** 
 267               		.loc 1 96 0
 268 0088 0895      		ret
 269               		.cfi_endproc
 270               	.LFE102:
 272               		.section	.text.clear_keys,"ax",@progbits
 273               	.global	clear_keys
 275               	clear_keys:
 276               	.LFB103:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 277               		.loc 1 99 0
 278               		.cfi_startproc
 279               	/* prologue: function */
 280               	/* frame size = 0 */
 281               	/* stack size = 0 */
 282               	.L__stack_usage = 0
 283               	.LVL25:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 284               		.loc 1 99 0
 285 0000 81E0      		ldi r24,lo8(1)
 286 0002 90E0      		ldi r25,0
 287               	.LVL26:
 288               	.L38:
 289               	.LBB23:
 102:../../tmk_core/common/action_util.c ****     }
 290               		.loc 1 102 0 discriminator 3
 291 0004 E091 0000 		lds r30,keyboard_report
 292 0008 F091 0000 		lds r31,keyboard_report+1
 293 000c E80F      		add r30,r24
 294 000e F91F      		adc r31,r25
 295 0010 1082      		st Z,__zero_reg__
 296               	.LVL27:
 297 0012 0196      		adiw r24,1
 298               	.LVL28:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 299               		.loc 1 101 0 discriminator 3
 300 0014 8032      		cpi r24,32
 301 0016 9105      		cpc r25,__zero_reg__
 302 0018 01F4      		brne .L38
 303               	/* epilogue start */
 304               	.LBE23:
 104:../../tmk_core/common/action_util.c **** 
 305               		.loc 1 104 0
 306 001a 0895      		ret
 307               		.cfi_endproc
 308               	.LFE103:
 310               		.section	.text.get_mods,"ax",@progbits
 311               	.global	get_mods
 313               	get_mods:
 314               	.LFB104:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 315               		.loc 1 108 0
 316               		.cfi_startproc
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 321               		.loc 1 108 0
 322 0000 8091 0000 		lds r24,real_mods
 323               	/* epilogue start */
 324 0004 0895      		ret
 325               		.cfi_endproc
 326               	.LFE104:
 328               		.section	.text.add_mods,"ax",@progbits
 329               	.global	add_mods
 331               	add_mods:
 332               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 333               		.loc 1 109 0
 334               		.cfi_startproc
 335               	.LVL29:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 340               		.loc 1 109 0
 341 0000 9091 0000 		lds r25,real_mods
 342 0004 892B      		or r24,r25
 343               	.LVL30:
 344 0006 8093 0000 		sts real_mods,r24
 345               	/* epilogue start */
 346 000a 0895      		ret
 347               		.cfi_endproc
 348               	.LFE105:
 350               		.section	.text.del_mods,"ax",@progbits
 351               	.global	del_mods
 353               	del_mods:
 354               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 355               		.loc 1 110 0
 356               		.cfi_startproc
 357               	.LVL31:
 358               	/* prologue: function */
 359               	/* frame size = 0 */
 360               	/* stack size = 0 */
 361               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 362               		.loc 1 110 0
 363 0000 982F      		mov r25,r24
 364 0002 9095      		com r25
 365 0004 8091 0000 		lds r24,real_mods
 366               	.LVL32:
 367 0008 8923      		and r24,r25
 368 000a 8093 0000 		sts real_mods,r24
 369               	/* epilogue start */
 370 000e 0895      		ret
 371               		.cfi_endproc
 372               	.LFE106:
 374               		.section	.text.set_mods,"ax",@progbits
 375               	.global	set_mods
 377               	set_mods:
 378               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 379               		.loc 1 111 0
 380               		.cfi_startproc
 381               	.LVL33:
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 0 */
 385               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 386               		.loc 1 111 0
 387 0000 8093 0000 		sts real_mods,r24
 388               	/* epilogue start */
 389 0004 0895      		ret
 390               		.cfi_endproc
 391               	.LFE107:
 393               		.section	.text.clear_mods,"ax",@progbits
 394               	.global	clear_mods
 396               	clear_mods:
 397               	.LFB108:
 112:../../tmk_core/common/action_util.c **** 
 398               		.loc 1 112 0
 399               		.cfi_startproc
 400               	/* prologue: function */
 401               	/* frame size = 0 */
 402               	/* stack size = 0 */
 403               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 404               		.loc 1 112 0
 405 0000 1092 0000 		sts real_mods,__zero_reg__
 406               	/* epilogue start */
 407 0004 0895      		ret
 408               		.cfi_endproc
 409               	.LFE108:
 411               		.section	.text.get_weak_mods,"ax",@progbits
 412               	.global	get_weak_mods
 414               	get_weak_mods:
 415               	.LFB109:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 416               		.loc 1 115 0
 417               		.cfi_startproc
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 422               		.loc 1 115 0
 423 0000 8091 0000 		lds r24,weak_mods
 424               	/* epilogue start */
 425 0004 0895      		ret
 426               		.cfi_endproc
 427               	.LFE109:
 429               		.section	.text.add_weak_mods,"ax",@progbits
 430               	.global	add_weak_mods
 432               	add_weak_mods:
 433               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 434               		.loc 1 116 0
 435               		.cfi_startproc
 436               	.LVL34:
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439               	/* stack size = 0 */
 440               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 441               		.loc 1 116 0
 442 0000 9091 0000 		lds r25,weak_mods
 443 0004 892B      		or r24,r25
 444               	.LVL35:
 445 0006 8093 0000 		sts weak_mods,r24
 446               	/* epilogue start */
 447 000a 0895      		ret
 448               		.cfi_endproc
 449               	.LFE110:
 451               		.section	.text.del_weak_mods,"ax",@progbits
 452               	.global	del_weak_mods
 454               	del_weak_mods:
 455               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 456               		.loc 1 117 0
 457               		.cfi_startproc
 458               	.LVL36:
 459               	/* prologue: function */
 460               	/* frame size = 0 */
 461               	/* stack size = 0 */
 462               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 463               		.loc 1 117 0
 464 0000 982F      		mov r25,r24
 465 0002 9095      		com r25
 466 0004 8091 0000 		lds r24,weak_mods
 467               	.LVL37:
 468 0008 8923      		and r24,r25
 469 000a 8093 0000 		sts weak_mods,r24
 470               	/* epilogue start */
 471 000e 0895      		ret
 472               		.cfi_endproc
 473               	.LFE111:
 475               		.section	.text.set_weak_mods,"ax",@progbits
 476               	.global	set_weak_mods
 478               	set_weak_mods:
 479               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 480               		.loc 1 118 0
 481               		.cfi_startproc
 482               	.LVL38:
 483               	/* prologue: function */
 484               	/* frame size = 0 */
 485               	/* stack size = 0 */
 486               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 487               		.loc 1 118 0
 488 0000 8093 0000 		sts weak_mods,r24
 489               	/* epilogue start */
 490 0004 0895      		ret
 491               		.cfi_endproc
 492               	.LFE112:
 494               		.section	.text.clear_weak_mods,"ax",@progbits
 495               	.global	clear_weak_mods
 497               	clear_weak_mods:
 498               	.LFB113:
 119:../../tmk_core/common/action_util.c **** 
 499               		.loc 1 119 0
 500               		.cfi_startproc
 501               	/* prologue: function */
 502               	/* frame size = 0 */
 503               	/* stack size = 0 */
 504               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 505               		.loc 1 119 0
 506 0000 1092 0000 		sts weak_mods,__zero_reg__
 507               	/* epilogue start */
 508 0004 0895      		ret
 509               		.cfi_endproc
 510               	.LFE113:
 512               		.section	.text.set_oneshot_mods,"ax",@progbits
 513               	.global	set_oneshot_mods
 515               	set_oneshot_mods:
 516               	.LFB114:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 517               		.loc 1 124 0
 518               		.cfi_startproc
 519               	.LVL39:
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 524               		.loc 1 125 0
 525 0000 8093 0000 		sts oneshot_mods,r24
 526               	/* epilogue start */
 129:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 527               		.loc 1 129 0
 528 0004 0895      		ret
 529               		.cfi_endproc
 530               	.LFE114:
 532               		.section	.text.clear_oneshot_mods,"ax",@progbits
 533               	.global	clear_oneshot_mods
 535               	clear_oneshot_mods:
 536               	.LFB115:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 537               		.loc 1 131 0
 538               		.cfi_startproc
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 0 */
 542               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 543               		.loc 1 132 0
 544 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 545               	/* epilogue start */
 136:../../tmk_core/common/action_util.c **** #endif
 546               		.loc 1 136 0
 547 0004 0895      		ret
 548               		.cfi_endproc
 549               	.LFE115:
 551               		.section	.text.has_anykey,"ax",@progbits
 552               	.global	has_anykey
 554               	has_anykey:
 555               	.LFB116:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 556               		.loc 1 146 0
 557               		.cfi_startproc
 558               	/* prologue: function */
 559               	/* frame size = 0 */
 560               	/* stack size = 0 */
 561               	.L__stack_usage = 0
 562               	.LVL40:
 563               	.LBB24:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 564               		.loc 1 149 0
 565 0000 2091 0000 		lds r18,keyboard_report
 566 0004 3091 0000 		lds r19,keyboard_report+1
 567 0008 F901      		movw r30,r18
 568 000a 3196      		adiw r30,1
 569 000c 205E      		subi r18,-32
 570 000e 3F4F      		sbci r19,-1
 571               	.LBE24:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 572               		.loc 1 147 0
 573 0010 80E0      		ldi r24,0
 574               	.LVL41:
 575               	.L54:
 576               	.LBB25:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 577               		.loc 1 149 0
 578 0012 9191      		ld r25,Z+
 579               	.LVL42:
 580 0014 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 581               		.loc 1 150 0
 582 0016 8F5F      		subi r24,lo8(-(1))
 583               	.LVL43:
 584               	.L53:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 585               		.loc 1 148 0 discriminator 2
 586 0018 E217      		cp r30,r18
 587 001a F307      		cpc r31,r19
 588 001c 01F4      		brne .L54
 589               	/* epilogue start */
 590               	.LBE25:
 153:../../tmk_core/common/action_util.c **** 
 591               		.loc 1 153 0
 592 001e 0895      		ret
 593               		.cfi_endproc
 594               	.LFE116:
 596               		.section	.text.send_keyboard_report,"ax",@progbits
 597               	.global	send_keyboard_report
 599               	send_keyboard_report:
 600               	.LFB100:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 601               		.loc 1 55 0
 602               		.cfi_startproc
 603               	/* prologue: function */
 604               	/* frame size = 0 */
 605               	/* stack size = 0 */
 606               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 607               		.loc 1 56 0
 608 0000 E091 0000 		lds r30,keyboard_report
 609 0004 F091 0000 		lds r31,keyboard_report+1
 610 0008 8091 0000 		lds r24,real_mods
 611 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 612               		.loc 1 57 0
 613 000e E091 0000 		lds r30,keyboard_report
 614 0012 F091 0000 		lds r31,keyboard_report+1
 615 0016 8081      		ld r24,Z
 616 0018 9091 0000 		lds r25,weak_mods
 617 001c 892B      		or r24,r25
 618 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 619               		.loc 1 59 0
 620 0020 9091 0000 		lds r25,oneshot_mods
 621 0024 9923      		tst r25
 622 0026 01F0      		breq .L61
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 623               		.loc 1 66 0
 624 0028 E091 0000 		lds r30,keyboard_report
 625 002c F091 0000 		lds r31,keyboard_report+1
 626 0030 8081      		ld r24,Z
 627 0032 892B      		or r24,r25
 628 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 629               		.loc 1 67 0
 630 0036 0E94 0000 		call has_anykey
 631               	.LVL44:
 632 003a 8111      		cpse r24,__zero_reg__
 633               	.LBB28:
 634               	.LBB29:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 635               		.loc 1 132 0
 636 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 637               	.L61:
 638               	.LBE29:
 639               	.LBE28:
  72:../../tmk_core/common/action_util.c **** }
 640               		.loc 1 72 0
 641 0040 8091 0000 		lds r24,keyboard_report
 642 0044 9091 0000 		lds r25,keyboard_report+1
 643 0048 0C94 0000 		jmp host_keyboard_send
 644               	.LVL45:
 645               		.cfi_endproc
 646               	.LFE100:
 648               		.section	.text.has_anymod,"ax",@progbits
 649               	.global	has_anymod
 651               	has_anymod:
 652               	.LFB117:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 653               		.loc 1 156 0
 654               		.cfi_startproc
 655               	/* prologue: function */
 656               	/* frame size = 0 */
 657               	/* stack size = 0 */
 658               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 659               		.loc 1 157 0
 660 0000 8091 0000 		lds r24,real_mods
 661 0004 0C94 0000 		jmp bitpop
 662               	.LVL46:
 663               		.cfi_endproc
 664               	.LFE117:
 666               		.section	.text.get_first_key,"ax",@progbits
 667               	.global	get_first_key
 669               	get_first_key:
 670               	.LFB118:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 671               		.loc 1 161 0
 672               		.cfi_startproc
 673 0000 CF93      		push r28
 674               	.LCFI10:
 675               		.cfi_def_cfa_offset 3
 676               		.cfi_offset 28, -2
 677 0002 DF93      		push r29
 678               	.LCFI11:
 679               		.cfi_def_cfa_offset 4
 680               		.cfi_offset 29, -3
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 2 */
 684               	.L__stack_usage = 2
 685 0004 E091 0000 		lds r30,keyboard_report
 686 0008 F091 0000 		lds r31,keyboard_report+1
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 687               		.loc 1 163 0
 688 000c 8091 0000 		lds r24,keyboard_protocol
 689 0010 8823      		tst r24
 690 0012 01F0      		breq .L68
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 691               		.loc 1 163 0 is_stmt 0 discriminator 1
 692 0014 8091 0000 		lds r24,keyboard_nkro
 693 0018 DF01      		movw r26,r30
 694 001a 1196      		adiw r26,1
 695               	.LBB30:
 164:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 696               		.loc 1 164 0 is_stmt 1 discriminator 1
 697 001c C0E0      		ldi r28,0
 698               	.LBE30:
 163:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 699               		.loc 1 163 0 discriminator 1
 700 001e 8111      		cpse r24,__zero_reg__
 701 0020 00C0      		rjmp .L69
 702               	.L68:
 180:../../tmk_core/common/action_util.c **** #endif
 703               		.loc 1 180 0
 704 0022 8281      		ldd r24,Z+2
 705 0024 00C0      		rjmp .L67
 706               	.LVL47:
 707               	.L71:
 708               	.LBB31:
 165:../../tmk_core/common/action_util.c ****             ;
 709               		.loc 1 165 0 discriminator 3
 710 0026 CF5F      		subi r28,lo8(-(1))
 711               	.LVL48:
 712 0028 CF31      		cpi r28,lo8(31)
 713 002a 01F0      		breq .L70
 714               	.LVL49:
 715               	.L69:
 165:../../tmk_core/common/action_util.c ****             ;
 716               		.loc 1 165 0 is_stmt 0 discriminator 2
 717 002c 8D91      		ld r24,X+
 718 002e 8823      		tst r24
 719 0030 01F0      		breq .L71
 720               	.L70:
 167:../../tmk_core/common/action_util.c ****     }
 721               		.loc 1 167 0 is_stmt 1
 722 0032 D0E0      		ldi r29,0
 723 0034 EC0F      		add r30,r28
 724 0036 FD1F      		adc r31,r29
 725 0038 8181      		ldd r24,Z+1
 726 003a 0E94 0000 		call biton
 727               	.LVL50:
 728 003e 93E0      		ldi r25,3
 729               		1:
 730 0040 CC0F      		lsl r28
 731 0042 DD1F      		rol r29
 732 0044 9A95      		dec r25
 733 0046 01F4      		brne 1b
 734               	.LVL51:
 735 0048 8C2B      		or r24,r28
 736               	.L67:
 737               	/* epilogue start */
 738               	.LBE31:
 182:../../tmk_core/common/action_util.c **** 
 739               		.loc 1 182 0
 740 004a DF91      		pop r29
 741 004c CF91      		pop r28
 742 004e 0895      		ret
 743               		.cfi_endproc
 744               	.LFE118:
 746               		.section	.progmem.data.__c.4673,"a",@progbits
 749               	__c.4673:
 750 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 750      6B65 795F 
 750      6269 743A 
 750      2063 616E 
 750      2774 2064 
 751               		.section	.progmem.data.__c.4668,"a",@progbits
 754               	__c.4668:
 755 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 755      6B65 795F 
 755      6269 743A 
 755      2063 616E 
 755      2774 2061 
 756               		.section	.bss.oneshot_mods,"aw",@nobits
 759               	oneshot_mods:
 760 0000 00        		.zero	1
 761               	.global	keyboard_report
 762               		.section	.data.keyboard_report,"aw",@progbits
 765               	keyboard_report:
 766 0000 0000      		.word	__compound_literal.0
 767               		.section	.bss.__compound_literal.0,"aw",@nobits
 770               	__compound_literal.0:
 771 0000 0000 0000 		.zero	32
 771      0000 0000 
 771      0000 0000 
 771      0000 0000 
 771      0000 0000 
 772               		.section	.bss.weak_mods,"aw",@nobits
 775               	weak_mods:
 776 0000 00        		.zero	1
 777               		.section	.bss.real_mods,"aw",@nobits
 780               	real_mods:
 781 0000 00        		.zero	1
 782               		.text
 783               	.Letext0:
 784               		.file 2 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdint.h"
 785               		.file 3 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 786               		.file 4 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 787               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 788               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 789               		.file 7 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdio.h"
 790               		.file 8 "../../tmk_core/common/report.h"
 791               		.file 9 "../../tmk_core/common/host.h"
 792               		.file 10 "../../tmk_core/common/avr/xprintf.h"
 793               		.file 11 "../../tmk_core/common/debug.h"
 794               		.file 12 "../../tmk_core/common/action_util.h"
 795               		.file 13 "../../tmk_core/common/timer.h"
 796               		.file 14 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:13     .text.add_key:0000000000000000 add_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:765    .data.keyboard_report:0000000000000000 keyboard_report
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:754    .progmem.data.__c.4668:0000000000000000 __c.4668
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:153    .text.del_key:0000000000000000 del_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:749    .progmem.data.__c.4673:0000000000000000 __c.4673
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:275    .text.clear_keys:0000000000000000 clear_keys
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:313    .text.get_mods:0000000000000000 get_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:780    .bss.real_mods:0000000000000000 real_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:331    .text.add_mods:0000000000000000 add_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:353    .text.del_mods:0000000000000000 del_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:377    .text.set_mods:0000000000000000 set_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:396    .text.clear_mods:0000000000000000 clear_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:414    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:775    .bss.weak_mods:0000000000000000 weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:432    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:454    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:478    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:497    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:515    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:759    .bss.oneshot_mods:0000000000000000 oneshot_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:535    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:554    .text.has_anykey:0000000000000000 has_anykey
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:599    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:651    .text.has_anymod:0000000000000000 has_anymod
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:669    .text.get_first_key:0000000000000000 get_first_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccVyVneS.s:770    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_protocol
keyboard_nkro
debug_config
__xprintf
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
