   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** #include "hook.h"
  30:../../tmk_core/common/action.c **** #include "wait.h"
  31:../../tmk_core/common/action.c **** 
  32:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  33:../../tmk_core/common/action.c **** #include "debug.h"
  34:../../tmk_core/common/action.c **** #else
  35:../../tmk_core/common/action.c **** #include "nodebug.h"
  36:../../tmk_core/common/action.c **** #endif
  37:../../tmk_core/common/action.c **** 
  38:../../tmk_core/common/action.c **** 
  39:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  40:../../tmk_core/common/action.c **** {
  16               		.loc 1 40 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 942F      		mov r25,r20
  43 0016 4F83      		std Y+7,r20
  44 0018 252F      		mov r18,r21
  45 001a 5887      		std Y+8,r21
  46 001c 6987      		std Y+9,r22
  47 001e 7A87      		std Y+10,r23
  48 0020 8B87      		std Y+11,r24
  49               	.LVL0:
  50               	.LBB16:
  51               	.LBB17:
  52               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  53               		.loc 2 49 0
  54 0022 4A85      		ldd r20,Y+10
  55 0024 5B85      		ldd r21,Y+11
  56               	.LVL1:
  57 0026 81E0      		ldi r24,lo8(1)
  58 0028 452B      		or r20,r21
  59 002a 01F0      		breq .L2
  60 002c 2F3F      		cpi r18,lo8(-1)
  61 002e 01F4      		brne .L6
  62 0030 81E0      		ldi r24,lo8(1)
  63 0032 9F3F      		cpi r25,lo8(-1)
  64 0034 01F0      		breq .L2
  65               	.L6:
  66 0036 80E0      		ldi r24,0
  67               	.L2:
  68               	.LBE17:
  69               	.LBE16:
  41:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  70               		.loc 1 41 0
  71 0038 80FD      		sbrc r24,0
  72 003a 00C0      		rjmp .L4
  42:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  43:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  44:../../tmk_core/common/action.c ****         hook_matrix_change(event);
  73               		.loc 1 44 0
  74 003c 4F81      		ldd r20,Y+7
  75 003e 5885      		ldd r21,Y+8
  76 0040 6985      		ldd r22,Y+9
  77 0042 7A85      		ldd r23,Y+10
  78 0044 8B85      		ldd r24,Y+11
  79 0046 0E94 0000 		call hook_matrix_change
  80               	.LVL2:
  81               	.L4:
  45:../../tmk_core/common/action.c ****     }
  46:../../tmk_core/common/action.c **** 
  47:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  82               		.loc 1 47 0
  83 004a 1E82      		std Y+6,__zero_reg__
  84 004c 1D82      		std Y+5,__zero_reg__
  85 004e 85E0      		ldi r24,lo8(5)
  86 0050 FE01      		movw r30,r28
  87 0052 3796      		adiw r30,7
  88 0054 DE01      		movw r26,r28
  89 0056 1196      		adiw r26,1
  90               		0:
  91 0058 0190      		ld r0,Z+
  92 005a 0D92      		st X+,r0
  93 005c 8A95      		dec r24
  94 005e 01F4      		brne 0b
  48:../../tmk_core/common/action.c **** 
  49:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  50:../../tmk_core/common/action.c ****     action_tapping_process(record);
  95               		.loc 1 50 0
  96 0060 4981      		ldd r20,Y+1
  97 0062 5A81      		ldd r21,Y+2
  98 0064 6B81      		ldd r22,Y+3
  99 0066 7C81      		ldd r23,Y+4
 100 0068 8D81      		ldd r24,Y+5
 101 006a 9E81      		ldd r25,Y+6
 102               	/* epilogue start */
  51:../../tmk_core/common/action.c **** #else
  52:../../tmk_core/common/action.c ****     process_action(&record);
  53:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  54:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  55:../../tmk_core/common/action.c ****     }
  56:../../tmk_core/common/action.c **** #endif
  57:../../tmk_core/common/action.c **** }
 103               		.loc 1 57 0
 104 006c 2B96      		adiw r28,11
 105 006e 0FB6      		in __tmp_reg__,__SREG__
 106 0070 F894      		cli
 107 0072 DEBF      		out __SP_H__,r29
 108 0074 0FBE      		out __SREG__,__tmp_reg__
 109 0076 CDBF      		out __SP_L__,r28
 110 0078 DF91      		pop r29
 111 007a CF91      		pop r28
  50:../../tmk_core/common/action.c **** #else
 112               		.loc 1 50 0
 113 007c 0C94 0000 		jmp action_tapping_process
 114               	.LVL3:
 115               		.cfi_endproc
 116               	.LFE103:
 118               		.section	.text.register_code,"ax",@progbits
 119               	.global	register_code
 121               	register_code:
 122               	.LFB105:
  58:../../tmk_core/common/action.c **** 
  59:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  60:../../tmk_core/common/action.c **** {
  61:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  62:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  63:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  64:../../tmk_core/common/action.c **** #endif
  65:../../tmk_core/common/action.c **** 
  66:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  67:../../tmk_core/common/action.c **** 
  68:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event);
  69:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  70:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  71:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  72:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  73:../../tmk_core/common/action.c **** #endif
  74:../../tmk_core/common/action.c ****     dprintln();
  75:../../tmk_core/common/action.c **** 
  76:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  77:../../tmk_core/common/action.c ****         /* Key and Mods */
  78:../../tmk_core/common/action.c ****         case ACT_LMODS:
  79:../../tmk_core/common/action.c ****         case ACT_RMODS:
  80:../../tmk_core/common/action.c ****             {
  81:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  82:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  83:../../tmk_core/common/action.c ****                 if (event.pressed) {
  84:../../tmk_core/common/action.c ****                     if (mods) {
  85:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  86:../../tmk_core/common/action.c ****                         send_keyboard_report();
  87:../../tmk_core/common/action.c ****                     }
  88:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  89:../../tmk_core/common/action.c ****                 } else {
  90:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  91:../../tmk_core/common/action.c ****                     if (mods) {
  92:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  93:../../tmk_core/common/action.c ****                         send_keyboard_report();
  94:../../tmk_core/common/action.c ****                     }
  95:../../tmk_core/common/action.c ****                 }
  96:../../tmk_core/common/action.c ****             }
  97:../../tmk_core/common/action.c ****             break;
  98:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  99:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 100:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 101:../../tmk_core/common/action.c ****             {
 102:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 103:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 104:../../tmk_core/common/action.c ****                 switch (action.key.code) {
 105:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 106:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 107:../../tmk_core/common/action.c ****                         // Oneshot modifier
 108:../../tmk_core/common/action.c ****                         if (event.pressed) {
 109:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 110:../../tmk_core/common/action.c ****                                 register_mods(mods);
 111:../../tmk_core/common/action.c ****                             }
 112:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 113:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 114:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 115:../../tmk_core/common/action.c ****                             }
 116:../../tmk_core/common/action.c ****                             else {
 117:../../tmk_core/common/action.c ****                                 register_mods(mods);
 118:../../tmk_core/common/action.c ****                             }
 119:../../tmk_core/common/action.c ****                         } else {
 120:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 121:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 122:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 123:../../tmk_core/common/action.c ****                             }
 124:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 125:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 126:../../tmk_core/common/action.c ****                             }
 127:../../tmk_core/common/action.c ****                             else {
 128:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 129:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 130:../../tmk_core/common/action.c ****                             }
 131:../../tmk_core/common/action.c ****                         }
 132:../../tmk_core/common/action.c ****                         break;
 133:../../tmk_core/common/action.c ****     #endif
 134:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 135:../../tmk_core/common/action.c ****                         if (event.pressed) {
 136:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 137:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 138:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 139:../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 140:../../tmk_core/common/action.c ****                                 } else {
 141:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 142:../../tmk_core/common/action.c ****                                     register_mods(mods);
 143:../../tmk_core/common/action.c ****                                 }
 144:../../tmk_core/common/action.c ****                             }
 145:../../tmk_core/common/action.c ****                         } else {
 146:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 147:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 148:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 149:../../tmk_core/common/action.c ****                             }
 150:../../tmk_core/common/action.c ****                         }
 151:../../tmk_core/common/action.c ****                         break;
 152:../../tmk_core/common/action.c ****                     default:
 153:../../tmk_core/common/action.c ****                         if (event.pressed) {
 154:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 155:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 156:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 157:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 158:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 159:../../tmk_core/common/action.c ****                                     register_mods(mods);
 160:../../tmk_core/common/action.c ****                                 } else {
 161:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 162:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 163:../../tmk_core/common/action.c ****                                 }
 164:../../tmk_core/common/action.c ****                             } else {
 165:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 166:../../tmk_core/common/action.c ****                                 register_mods(mods);
 167:../../tmk_core/common/action.c ****                             }
 168:../../tmk_core/common/action.c ****                         } else {
 169:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 170:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 171:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 172:../../tmk_core/common/action.c ****                             } else {
 173:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 174:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 175:../../tmk_core/common/action.c ****                             }
 176:../../tmk_core/common/action.c ****                         }
 177:../../tmk_core/common/action.c ****                         break;
 178:../../tmk_core/common/action.c ****                 }
 179:../../tmk_core/common/action.c ****             }
 180:../../tmk_core/common/action.c ****             break;
 181:../../tmk_core/common/action.c **** #endif
 182:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 183:../../tmk_core/common/action.c ****         /* other HID usage */
 184:../../tmk_core/common/action.c ****         case ACT_USAGE:
 185:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 186:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 187:../../tmk_core/common/action.c ****                     if (event.pressed) {
 188:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 189:../../tmk_core/common/action.c ****                     } else {
 190:../../tmk_core/common/action.c ****                         host_system_send(0);
 191:../../tmk_core/common/action.c ****                     }
 192:../../tmk_core/common/action.c ****                     break;
 193:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 194:../../tmk_core/common/action.c ****                     if (event.pressed) {
 195:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 196:../../tmk_core/common/action.c ****                     } else {
 197:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 198:../../tmk_core/common/action.c ****                     }
 199:../../tmk_core/common/action.c ****                     break;
 200:../../tmk_core/common/action.c ****             }
 201:../../tmk_core/common/action.c ****             break;
 202:../../tmk_core/common/action.c **** #endif
 203:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 204:../../tmk_core/common/action.c ****         /* Mouse key */
 205:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 206:../../tmk_core/common/action.c ****             if (event.pressed) {
 207:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 208:../../tmk_core/common/action.c ****                 mousekey_send();
 209:../../tmk_core/common/action.c ****             } else {
 210:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 211:../../tmk_core/common/action.c ****                 mousekey_send();
 212:../../tmk_core/common/action.c ****             }
 213:../../tmk_core/common/action.c ****             break;
 214:../../tmk_core/common/action.c **** #endif
 215:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 216:../../tmk_core/common/action.c ****         case ACT_LAYER:
 217:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 218:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 219:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 220:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 221:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 222:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 223:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 224:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 225:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 226:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 227:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 228:../../tmk_core/common/action.c ****                     }
 229:../../tmk_core/common/action.c ****                 }
 230:../../tmk_core/common/action.c ****             } else {
 231:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 232:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 233:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 234:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 235:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 236:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 237:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 238:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 239:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 240:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 241:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 242:../../tmk_core/common/action.c ****                     }
 243:../../tmk_core/common/action.c ****                 }
 244:../../tmk_core/common/action.c ****             }
 245:../../tmk_core/common/action.c ****             break;
 246:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 247:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 248:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 249:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 250:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 251:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers */
 252:../../tmk_core/common/action.c ****                     if (event.pressed) {
 253:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 254:../../tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 255:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 256:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 257:../../tmk_core/common/action.c ****                     } else {
 258:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 259:../../tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 260:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 261:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f));
 262:../../tmk_core/common/action.c ****                     }
 263:../../tmk_core/common/action.c ****                     break;
 264:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 265:../../tmk_core/common/action.c ****                     /* tap toggle */
 266:../../tmk_core/common/action.c ****                     if (event.pressed) {
 267:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 268:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 269:../../tmk_core/common/action.c ****                         }
 270:../../tmk_core/common/action.c ****                     } else {
 271:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 272:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 273:../../tmk_core/common/action.c ****                         }
 274:../../tmk_core/common/action.c ****                     }
 275:../../tmk_core/common/action.c ****                     break;
 276:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 277:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 278:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 279:../../tmk_core/common/action.c ****                     break;
 280:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 281:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 282:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 283:../../tmk_core/common/action.c ****                     break;
 284:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 285:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 286:../../tmk_core/common/action.c ****                                     layer_clear();
 287:../../tmk_core/common/action.c ****                     break;
 288:../../tmk_core/common/action.c ****                 default:
 289:../../tmk_core/common/action.c ****                     /* tap key */
 290:../../tmk_core/common/action.c ****                     if (event.pressed) {
 291:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 292:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 293:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 294:../../tmk_core/common/action.c ****                         } else {
 295:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 296:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 297:../../tmk_core/common/action.c ****                         }
 298:../../tmk_core/common/action.c ****                     } else {
 299:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 300:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 301:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 302:../../tmk_core/common/action.c ****                         } else {
 303:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 304:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 305:../../tmk_core/common/action.c ****                         }
 306:../../tmk_core/common/action.c ****                     }
 307:../../tmk_core/common/action.c ****                     break;
 308:../../tmk_core/common/action.c ****             }
 309:../../tmk_core/common/action.c ****             break;
 310:../../tmk_core/common/action.c ****     #endif
 311:../../tmk_core/common/action.c **** #endif
 312:../../tmk_core/common/action.c ****         /* Extentions */
 313:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 314:../../tmk_core/common/action.c ****         case ACT_MACRO:
 315:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 316:../../tmk_core/common/action.c ****             break;
 317:../../tmk_core/common/action.c **** #endif
 318:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 319:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 320:../../tmk_core/common/action.c ****             if (!event.pressed) {
 321:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 322:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 323:../../tmk_core/common/action.c ****                         backlight_increase();
 324:../../tmk_core/common/action.c ****                         break;
 325:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 326:../../tmk_core/common/action.c ****                         backlight_decrease();
 327:../../tmk_core/common/action.c ****                         break;
 328:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 329:../../tmk_core/common/action.c ****                         backlight_toggle();
 330:../../tmk_core/common/action.c ****                         break;
 331:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 332:../../tmk_core/common/action.c ****                         backlight_step();
 333:../../tmk_core/common/action.c ****                         break;
 334:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 335:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 336:../../tmk_core/common/action.c ****                         break;
 337:../../tmk_core/common/action.c ****                 }
 338:../../tmk_core/common/action.c ****             }
 339:../../tmk_core/common/action.c ****             break;
 340:../../tmk_core/common/action.c **** #endif
 341:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 342:../../tmk_core/common/action.c ****             break;
 343:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 344:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 345:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 346:../../tmk_core/common/action.c ****             break;
 347:../../tmk_core/common/action.c **** #endif
 348:../../tmk_core/common/action.c ****         default:
 349:../../tmk_core/common/action.c ****             break;
 350:../../tmk_core/common/action.c ****     }
 351:../../tmk_core/common/action.c **** }
 352:../../tmk_core/common/action.c **** 
 353:../../tmk_core/common/action.c **** 
 354:../../tmk_core/common/action.c **** 
 355:../../tmk_core/common/action.c **** 
 356:../../tmk_core/common/action.c **** /*
 357:../../tmk_core/common/action.c ****  * Utilities for actions.
 358:../../tmk_core/common/action.c ****  */
 359:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 360:../../tmk_core/common/action.c **** {
 123               		.loc 1 360 0
 124               		.cfi_startproc
 125               	.LVL4:
 126 0000 CF93      		push r28
 127               	.LCFI4:
 128               		.cfi_def_cfa_offset 3
 129               		.cfi_offset 28, -2
 130               	/* prologue: function */
 131               	/* frame size = 0 */
 132               	/* stack size = 1 */
 133               	.L__stack_usage = 1
 134 0002 C82F      		mov r28,r24
 361:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 135               		.loc 1 361 0
 136 0004 8823      		tst r24
 137 0006 01F4      		brne .+2
 138 0008 00C0      		rjmp .L10
 362:../../tmk_core/common/action.c ****         return;
 363:../../tmk_core/common/action.c ****     }
 364:../../tmk_core/common/action.c **** 
 365:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 366:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 139               		.loc 1 366 0
 140 000a 8238      		cpi r24,lo8(-126)
 141 000c 01F4      		brne .L13
 367:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 368:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 369:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 142               		.loc 1 369 0
 143 000e 0E94 0000 		call host_keyboard_leds
 144               	.LVL5:
 145 0012 81FD      		sbrc r24,1
 146 0014 00C0      		rjmp .L10
 370:../../tmk_core/common/action.c **** #endif
 371:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 147               		.loc 1 371 0
 148 0016 89E3      		ldi r24,lo8(57)
 149 0018 0E94 0000 		call add_key
 150               	.LVL6:
 372:../../tmk_core/common/action.c ****         send_keyboard_report();
 151               		.loc 1 372 0
 152 001c 0E94 0000 		call send_keyboard_report
 153               	.LVL7:
 154               	.LBB18:
 155               	.LBB19:
 156               		.file 3 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/7.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 157               		.loc 3 187 0
 158 0020 2FEF      		ldi r18,lo8(319999)
 159 0022 81EE      		ldi r24,hi8(319999)
 160 0024 94E0      		ldi r25,hlo8(319999)
 161 0026 2150      	1:	subi r18,1
 162 0028 8040      		sbci r24,0
 163 002a 9040      		sbci r25,0
 164 002c 01F4      		brne 1b
 165 002e 00C0      		rjmp .
 166 0030 0000      		nop
 167               	.LVL8:
 168               	.LBE19:
 169               	.LBE18:
 373:../../tmk_core/common/action.c ****         wait_ms(100);
 374:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 170               		.loc 1 374 0
 171 0032 89E3      		ldi r24,lo8(57)
 172               	.L45:
 375:../../tmk_core/common/action.c ****         send_keyboard_report();
 376:../../tmk_core/common/action.c ****     }
 377:../../tmk_core/common/action.c **** 
 378:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 379:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 380:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 381:../../tmk_core/common/action.c **** #endif
 382:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 383:../../tmk_core/common/action.c ****         send_keyboard_report();
 384:../../tmk_core/common/action.c ****         wait_ms(100);
 385:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 173               		.loc 1 385 0
 174 0034 0E94 0000 		call del_key
 175               	.LVL9:
 176               	.L46:
 177               	/* epilogue start */
 386:../../tmk_core/common/action.c ****         send_keyboard_report();
 387:../../tmk_core/common/action.c ****     }
 388:../../tmk_core/common/action.c **** 
 389:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 390:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 391:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 392:../../tmk_core/common/action.c **** #endif
 393:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 394:../../tmk_core/common/action.c ****         send_keyboard_report();
 395:../../tmk_core/common/action.c ****         wait_ms(100);
 396:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 397:../../tmk_core/common/action.c ****         send_keyboard_report();
 398:../../tmk_core/common/action.c ****     }
 399:../../tmk_core/common/action.c **** #endif
 400:../../tmk_core/common/action.c **** 
 401:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 402:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 403:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 404:../../tmk_core/common/action.c **** 
 405:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 406:../../tmk_core/common/action.c **** /* TODO: remove
 407:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 408:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 409:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 410:../../tmk_core/common/action.c **** 
 411:../../tmk_core/common/action.c ****             add_key(code);
 412:../../tmk_core/common/action.c ****             send_keyboard_report();
 413:../../tmk_core/common/action.c **** 
 414:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 415:../../tmk_core/common/action.c ****             send_keyboard_report();
 416:../../tmk_core/common/action.c ****             oneshot_cancel();
 417:../../tmk_core/common/action.c ****         } else 
 418:../../tmk_core/common/action.c **** */
 419:../../tmk_core/common/action.c **** #endif
 420:../../tmk_core/common/action.c ****         {
 421:../../tmk_core/common/action.c ****             add_key(code);
 422:../../tmk_core/common/action.c ****             send_keyboard_report();
 423:../../tmk_core/common/action.c ****         }
 424:../../tmk_core/common/action.c ****     }
 425:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 426:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 427:../../tmk_core/common/action.c ****         send_keyboard_report();
 428:../../tmk_core/common/action.c ****     }
 429:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 430:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 431:../../tmk_core/common/action.c ****     }
 432:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 433:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 434:../../tmk_core/common/action.c ****     }
 435:../../tmk_core/common/action.c **** }
 178               		.loc 1 435 0
 179 0038 CF91      		pop r28
 386:../../tmk_core/common/action.c ****         send_keyboard_report();
 180               		.loc 1 386 0
 181 003a 0C94 0000 		jmp send_keyboard_report
 182               	.LVL10:
 183               	.L13:
 378:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 184               		.loc 1 378 0
 185 003e 8338      		cpi r24,lo8(-125)
 186 0040 01F4      		brne .L15
 380:../../tmk_core/common/action.c **** #endif
 187               		.loc 1 380 0
 188 0042 0E94 0000 		call host_keyboard_leds
 189               	.LVL11:
 190 0046 80FD      		sbrc r24,0
 191 0048 00C0      		rjmp .L10
 382:../../tmk_core/common/action.c ****         send_keyboard_report();
 192               		.loc 1 382 0
 193 004a 83E5      		ldi r24,lo8(83)
 194 004c 0E94 0000 		call add_key
 195               	.LVL12:
 383:../../tmk_core/common/action.c ****         wait_ms(100);
 196               		.loc 1 383 0
 197 0050 0E94 0000 		call send_keyboard_report
 198               	.LVL13:
 199               	.LBB20:
 200               	.LBB21:
 201               		.loc 3 187 0
 202 0054 2FEF      		ldi r18,lo8(319999)
 203 0056 81EE      		ldi r24,hi8(319999)
 204 0058 94E0      		ldi r25,hlo8(319999)
 205 005a 2150      	1:	subi r18,1
 206 005c 8040      		sbci r24,0
 207 005e 9040      		sbci r25,0
 208 0060 01F4      		brne 1b
 209 0062 00C0      		rjmp .
 210 0064 0000      		nop
 211               	.LVL14:
 212               	.LBE21:
 213               	.LBE20:
 385:../../tmk_core/common/action.c ****         send_keyboard_report();
 214               		.loc 1 385 0
 215 0066 83E5      		ldi r24,lo8(83)
 216 0068 00C0      		rjmp .L45
 217               	.LVL15:
 218               	.L15:
 389:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 219               		.loc 1 389 0
 220 006a 8438      		cpi r24,lo8(-124)
 221 006c 01F4      		brne .L16
 391:../../tmk_core/common/action.c **** #endif
 222               		.loc 1 391 0
 223 006e 0E94 0000 		call host_keyboard_leds
 224               	.LVL16:
 225 0072 82FD      		sbrc r24,2
 226 0074 00C0      		rjmp .L10
 393:../../tmk_core/common/action.c ****         send_keyboard_report();
 227               		.loc 1 393 0
 228 0076 87E4      		ldi r24,lo8(71)
 229 0078 0E94 0000 		call add_key
 230               	.LVL17:
 394:../../tmk_core/common/action.c ****         wait_ms(100);
 231               		.loc 1 394 0
 232 007c 0E94 0000 		call send_keyboard_report
 233               	.LVL18:
 234               	.LBB22:
 235               	.LBB23:
 236               		.loc 3 187 0
 237 0080 2FEF      		ldi r18,lo8(319999)
 238 0082 81EE      		ldi r24,hi8(319999)
 239 0084 94E0      		ldi r25,hlo8(319999)
 240 0086 2150      	1:	subi r18,1
 241 0088 8040      		sbci r24,0
 242 008a 9040      		sbci r25,0
 243 008c 01F4      		brne 1b
 244 008e 00C0      		rjmp .
 245 0090 0000      		nop
 246               	.LVL19:
 247               	.LBE23:
 248               	.LBE22:
 396:../../tmk_core/common/action.c ****         send_keyboard_report();
 249               		.loc 1 396 0
 250 0092 87E4      		ldi r24,lo8(71)
 251 0094 00C0      		rjmp .L45
 252               	.LVL20:
 253               	.L16:
 401:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 254               		.loc 1 401 0
 255 0096 8CEF      		ldi r24,lo8(-4)
 256               	.LVL21:
 257 0098 8C0F      		add r24,r28
 258 009a 813A      		cpi r24,lo8(-95)
 259 009c 00F4      		brsh .L17
 403:../../tmk_core/common/action.c **** 
 260               		.loc 1 403 0
 261 009e 8C2F      		mov r24,r28
 262 00a0 0E94 0000 		call command_proc
 263               	.LVL22:
 264 00a4 8111      		cpse r24,__zero_reg__
 265 00a6 00C0      		rjmp .L10
 421:../../tmk_core/common/action.c ****             send_keyboard_report();
 266               		.loc 1 421 0
 267 00a8 8C2F      		mov r24,r28
 268 00aa 0E94 0000 		call add_key
 269               	.LVL23:
 270 00ae 00C0      		rjmp .L46
 271               	.L17:
 425:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 272               		.loc 1 425 0
 273 00b0 80E2      		ldi r24,lo8(32)
 274 00b2 8C0F      		add r24,r28
 275 00b4 8830      		cpi r24,lo8(8)
 276 00b6 00F4      		brsh .L18
 426:../../tmk_core/common/action.c ****         send_keyboard_report();
 277               		.loc 1 426 0
 278 00b8 C770      		andi r28,lo8(7)
 279               	.LVL24:
 280 00ba 81E0      		ldi r24,lo8(1)
 281 00bc 00C0      		rjmp 2f
 282               		1:
 283 00be 880F      		lsl r24
 284               		2:
 285 00c0 CA95      		dec r28
 286 00c2 02F4      		brpl 1b
 287 00c4 0E94 0000 		call add_mods
 288               	.LVL25:
 289 00c8 00C0      		rjmp .L46
 290               	.LVL26:
 291               	.L18:
 429:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 292               		.loc 1 429 0
 293 00ca 8BE5      		ldi r24,lo8(91)
 294 00cc 8C0F      		add r24,r28
 295 00ce 8330      		cpi r24,lo8(3)
 296 00d0 00F4      		brsh .L19
 430:../../tmk_core/common/action.c ****     }
 297               		.loc 1 430 0
 298 00d2 81E8      		ldi r24,lo8(-127)
 299 00d4 90E0      		ldi r25,0
 300 00d6 C53A      		cpi r28,lo8(-91)
 301 00d8 01F0      		breq .L20
 430:../../tmk_core/common/action.c ****     }
 302               		.loc 1 430 0 is_stmt 0 discriminator 1
 303 00da 83E8      		ldi r24,lo8(-125)
 304 00dc 90E0      		ldi r25,0
 305 00de C63A      		cpi r28,lo8(-90)
 306 00e0 01F4      		brne .L20
 430:../../tmk_core/common/action.c ****     }
 307               		.loc 1 430 0
 308 00e2 82E8      		ldi r24,lo8(-126)
 309 00e4 90E0      		ldi r25,0
 310               	.L20:
 311               	/* epilogue start */
 312               		.loc 1 435 0 is_stmt 1 discriminator 12
 313 00e6 CF91      		pop r28
 314               	.LVL27:
 430:../../tmk_core/common/action.c ****     }
 315               		.loc 1 430 0 discriminator 12
 316 00e8 0C94 0000 		jmp host_system_send
 317               	.LVL28:
 318               	.L19:
 432:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 319               		.loc 1 432 0
 320 00ec 88E5      		ldi r24,lo8(88)
 321 00ee 8C0F      		add r24,r28
 322 00f0 8531      		cpi r24,lo8(21)
 323 00f2 00F0      		brlo .+2
 324 00f4 00C0      		rjmp .L10
 433:../../tmk_core/common/action.c ****     }
 325               		.loc 1 433 0
 326 00f6 82EE      		ldi r24,lo8(-30)
 327 00f8 90E0      		ldi r25,0
 328 00fa C83A      		cpi r28,lo8(-88)
 329 00fc 01F4      		brne .+2
 330 00fe 00C0      		rjmp .L21
 433:../../tmk_core/common/action.c ****     }
 331               		.loc 1 433 0 is_stmt 0 discriminator 1
 332 0100 89EE      		ldi r24,lo8(-23)
 333 0102 90E0      		ldi r25,0
 334 0104 C93A      		cpi r28,lo8(-87)
 335 0106 01F4      		brne .+2
 336 0108 00C0      		rjmp .L21
 433:../../tmk_core/common/action.c ****     }
 337               		.loc 1 433 0 discriminator 3
 338 010a 8AEE      		ldi r24,lo8(-22)
 339 010c 90E0      		ldi r25,0
 340 010e CA3A      		cpi r28,lo8(-86)
 341 0110 01F4      		brne .+2
 342 0112 00C0      		rjmp .L21
 433:../../tmk_core/common/action.c ****     }
 343               		.loc 1 433 0 discriminator 5
 344 0114 85EB      		ldi r24,lo8(-75)
 345 0116 90E0      		ldi r25,0
 346 0118 CB3A      		cpi r28,lo8(-85)
 347 011a 01F4      		brne .+2
 348 011c 00C0      		rjmp .L21
 433:../../tmk_core/common/action.c ****     }
 349               		.loc 1 433 0 discriminator 7
 350 011e 86EB      		ldi r24,lo8(-74)
 351 0120 90E0      		ldi r25,0
 352 0122 CC3A      		cpi r28,lo8(-84)
 353 0124 01F4      		brne .+2
 354 0126 00C0      		rjmp .L21
 433:../../tmk_core/common/action.c ****     }
 355               		.loc 1 433 0 discriminator 9
 356 0128 83EB      		ldi r24,lo8(-77)
 357 012a 90E0      		ldi r25,0
 358 012c CD3A      		cpi r28,lo8(-83)
 359 012e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 360               		.loc 1 433 0 discriminator 11
 361 0130 84EB      		ldi r24,lo8(-76)
 362 0132 90E0      		ldi r25,0
 363 0134 CE3A      		cpi r28,lo8(-82)
 364 0136 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 365               		.loc 1 433 0 discriminator 13
 366 0138 87EB      		ldi r24,lo8(-73)
 367 013a 90E0      		ldi r25,0
 368 013c CF3A      		cpi r28,lo8(-81)
 369 013e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 370               		.loc 1 433 0 discriminator 15
 371 0140 8CEC      		ldi r24,lo8(-52)
 372 0142 90E0      		ldi r25,0
 373 0144 C13B      		cpi r28,lo8(-79)
 374 0146 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 375               		.loc 1 433 0 discriminator 17
 376 0148 8DEC      		ldi r24,lo8(-51)
 377 014a 90E0      		ldi r25,0
 378 014c C03B      		cpi r28,lo8(-80)
 379 014e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 380               		.loc 1 433 0 discriminator 19
 381 0150 83E8      		ldi r24,lo8(-125)
 382 0152 91E0      		ldi r25,lo8(1)
 383 0154 C23B      		cpi r28,lo8(-78)
 384 0156 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 385               		.loc 1 433 0 discriminator 21
 386 0158 8AE8      		ldi r24,lo8(-118)
 387 015a 91E0      		ldi r25,lo8(1)
 388 015c C33B      		cpi r28,lo8(-77)
 389 015e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 390               		.loc 1 433 0 discriminator 23
 391 0160 82E9      		ldi r24,lo8(-110)
 392 0162 91E0      		ldi r25,lo8(1)
 393 0164 C43B      		cpi r28,lo8(-76)
 394 0166 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 395               		.loc 1 433 0 discriminator 25
 396 0168 84E9      		ldi r24,lo8(-108)
 397 016a 91E0      		ldi r25,lo8(1)
 398 016c C53B      		cpi r28,lo8(-75)
 399 016e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 400               		.loc 1 433 0 discriminator 27
 401 0170 81E2      		ldi r24,lo8(33)
 402 0172 92E0      		ldi r25,lo8(2)
 403 0174 C63B      		cpi r28,lo8(-74)
 404 0176 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 405               		.loc 1 433 0 discriminator 29
 406 0178 83E2      		ldi r24,lo8(35)
 407 017a 92E0      		ldi r25,lo8(2)
 408 017c C73B      		cpi r28,lo8(-73)
 409 017e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 410               		.loc 1 433 0 discriminator 31
 411 0180 84E2      		ldi r24,lo8(36)
 412 0182 92E0      		ldi r25,lo8(2)
 413 0184 C83B      		cpi r28,lo8(-72)
 414 0186 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 415               		.loc 1 433 0 discriminator 33
 416 0188 85E2      		ldi r24,lo8(37)
 417 018a 92E0      		ldi r25,lo8(2)
 418 018c C93B      		cpi r28,lo8(-71)
 419 018e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 420               		.loc 1 433 0 discriminator 35
 421 0190 86E2      		ldi r24,lo8(38)
 422 0192 92E0      		ldi r25,lo8(2)
 423 0194 CA3B      		cpi r28,lo8(-70)
 424 0196 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 425               		.loc 1 433 0 discriminator 37
 426 0198 87E2      		ldi r24,lo8(39)
 427 019a 92E0      		ldi r25,lo8(2)
 428 019c CB3B      		cpi r28,lo8(-69)
 429 019e 01F0      		breq .L21
 433:../../tmk_core/common/action.c ****     }
 430               		.loc 1 433 0 discriminator 39
 431 01a0 90E0      		ldi r25,0
 432 01a2 80E0      		ldi r24,0
 433 01a4 CC3B      		cpi r28,lo8(-68)
 434 01a6 01F4      		brne .L21
 433:../../tmk_core/common/action.c ****     }
 435               		.loc 1 433 0
 436 01a8 8AE2      		ldi r24,lo8(42)
 437 01aa 92E0      		ldi r25,lo8(2)
 438               	.L21:
 439               	/* epilogue start */
 440               		.loc 1 435 0 is_stmt 1 discriminator 84
 441 01ac CF91      		pop r28
 442               	.LVL29:
 433:../../tmk_core/common/action.c ****     }
 443               		.loc 1 433 0 discriminator 84
 444 01ae 0C94 0000 		jmp host_consumer_send
 445               	.LVL30:
 446               	.L10:
 447               	/* epilogue start */
 448               		.loc 1 435 0
 449 01b2 CF91      		pop r28
 450               	.LVL31:
 451 01b4 0895      		ret
 452               		.cfi_endproc
 453               	.LFE105:
 455               		.section	.text.unregister_code,"ax",@progbits
 456               	.global	unregister_code
 458               	unregister_code:
 459               	.LFB106:
 436:../../tmk_core/common/action.c **** 
 437:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 438:../../tmk_core/common/action.c **** {
 460               		.loc 1 438 0
 461               		.cfi_startproc
 462               	.LVL32:
 463               	/* prologue: function */
 464               	/* frame size = 0 */
 465               	/* stack size = 0 */
 466               	.L__stack_usage = 0
 439:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 467               		.loc 1 439 0
 468 0000 8823      		tst r24
 469 0002 01F4      		brne .+2
 470 0004 00C0      		rjmp .L47
 440:../../tmk_core/common/action.c ****         return;
 441:../../tmk_core/common/action.c ****     }
 442:../../tmk_core/common/action.c **** 
 443:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 444:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 471               		.loc 1 444 0
 472 0006 8238      		cpi r24,lo8(-126)
 473 0008 01F4      		brne .L50
 445:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 446:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 447:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 474               		.loc 1 447 0
 475 000a 0E94 0000 		call host_keyboard_leds
 476               	.LVL33:
 477 000e 81FF      		sbrs r24,1
 478 0010 00C0      		rjmp .L47
 448:../../tmk_core/common/action.c **** #endif
 449:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 479               		.loc 1 449 0
 480 0012 89E3      		ldi r24,lo8(57)
 481 0014 0E94 0000 		call add_key
 482               	.LVL34:
 450:../../tmk_core/common/action.c ****         send_keyboard_report();
 483               		.loc 1 450 0
 484 0018 0E94 0000 		call send_keyboard_report
 485               	.LVL35:
 486               	.LBB24:
 487               	.LBB25:
 488               		.loc 3 187 0
 489 001c 2FEF      		ldi r18,lo8(319999)
 490 001e 81EE      		ldi r24,hi8(319999)
 491 0020 94E0      		ldi r25,hlo8(319999)
 492 0022 2150      	1:	subi r18,1
 493 0024 8040      		sbci r24,0
 494 0026 9040      		sbci r25,0
 495 0028 01F4      		brne 1b
 496 002a 00C0      		rjmp .
 497 002c 0000      		nop
 498               	.LVL36:
 499               	.LBE25:
 500               	.LBE24:
 451:../../tmk_core/common/action.c ****         wait_ms(100);
 452:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 501               		.loc 1 452 0
 502 002e 89E3      		ldi r24,lo8(57)
 503               	.L66:
 453:../../tmk_core/common/action.c ****         send_keyboard_report();
 454:../../tmk_core/common/action.c ****     }
 455:../../tmk_core/common/action.c **** 
 456:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 457:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 458:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 459:../../tmk_core/common/action.c **** #endif
 460:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 461:../../tmk_core/common/action.c ****         send_keyboard_report();
 462:../../tmk_core/common/action.c ****         wait_ms(100);
 463:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 504               		.loc 1 463 0
 505 0030 0E94 0000 		call del_key
 506               	.LVL37:
 507               	.L67:
 464:../../tmk_core/common/action.c ****         send_keyboard_report();
 508               		.loc 1 464 0
 509 0034 0C94 0000 		jmp send_keyboard_report
 510               	.LVL38:
 511               	.L50:
 456:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 512               		.loc 1 456 0
 513 0038 8338      		cpi r24,lo8(-125)
 514 003a 01F4      		brne .L52
 458:../../tmk_core/common/action.c **** #endif
 515               		.loc 1 458 0
 516 003c 0E94 0000 		call host_keyboard_leds
 517               	.LVL39:
 518 0040 80FF      		sbrs r24,0
 519 0042 00C0      		rjmp .L47
 460:../../tmk_core/common/action.c ****         send_keyboard_report();
 520               		.loc 1 460 0
 521 0044 83E5      		ldi r24,lo8(83)
 522 0046 0E94 0000 		call add_key
 523               	.LVL40:
 461:../../tmk_core/common/action.c ****         wait_ms(100);
 524               		.loc 1 461 0
 525 004a 0E94 0000 		call send_keyboard_report
 526               	.LVL41:
 527               	.LBB26:
 528               	.LBB27:
 529               		.loc 3 187 0
 530 004e 2FEF      		ldi r18,lo8(319999)
 531 0050 81EE      		ldi r24,hi8(319999)
 532 0052 94E0      		ldi r25,hlo8(319999)
 533 0054 2150      	1:	subi r18,1
 534 0056 8040      		sbci r24,0
 535 0058 9040      		sbci r25,0
 536 005a 01F4      		brne 1b
 537 005c 00C0      		rjmp .
 538 005e 0000      		nop
 539               	.LVL42:
 540               	.LBE27:
 541               	.LBE26:
 463:../../tmk_core/common/action.c ****         send_keyboard_report();
 542               		.loc 1 463 0
 543 0060 83E5      		ldi r24,lo8(83)
 544 0062 00C0      		rjmp .L66
 545               	.LVL43:
 546               	.L52:
 465:../../tmk_core/common/action.c ****     }
 466:../../tmk_core/common/action.c **** 
 467:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 547               		.loc 1 467 0
 548 0064 8438      		cpi r24,lo8(-124)
 549 0066 01F4      		brne .L53
 468:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 469:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 550               		.loc 1 469 0
 551 0068 0E94 0000 		call host_keyboard_leds
 552               	.LVL44:
 553 006c 82FF      		sbrs r24,2
 554 006e 00C0      		rjmp .L47
 470:../../tmk_core/common/action.c **** #endif
 471:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 555               		.loc 1 471 0
 556 0070 87E4      		ldi r24,lo8(71)
 557 0072 0E94 0000 		call add_key
 558               	.LVL45:
 472:../../tmk_core/common/action.c ****         send_keyboard_report();
 559               		.loc 1 472 0
 560 0076 0E94 0000 		call send_keyboard_report
 561               	.LVL46:
 562               	.LBB28:
 563               	.LBB29:
 564               		.loc 3 187 0
 565 007a 2FEF      		ldi r18,lo8(319999)
 566 007c 81EE      		ldi r24,hi8(319999)
 567 007e 94E0      		ldi r25,hlo8(319999)
 568 0080 2150      	1:	subi r18,1
 569 0082 8040      		sbci r24,0
 570 0084 9040      		sbci r25,0
 571 0086 01F4      		brne 1b
 572 0088 00C0      		rjmp .
 573 008a 0000      		nop
 574               	.LVL47:
 575               	.LBE29:
 576               	.LBE28:
 473:../../tmk_core/common/action.c ****         wait_ms(100);
 474:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 577               		.loc 1 474 0
 578 008c 87E4      		ldi r24,lo8(71)
 579 008e 00C0      		rjmp .L66
 580               	.LVL48:
 581               	.L53:
 475:../../tmk_core/common/action.c ****         send_keyboard_report();
 476:../../tmk_core/common/action.c ****     }
 477:../../tmk_core/common/action.c **** #endif
 478:../../tmk_core/common/action.c **** 
 479:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 582               		.loc 1 479 0
 583 0090 9CEF      		ldi r25,lo8(-4)
 584 0092 980F      		add r25,r24
 585 0094 913A      		cpi r25,lo8(-95)
 586 0096 00F0      		brlo .L66
 480:../../tmk_core/common/action.c ****         del_key(code);
 481:../../tmk_core/common/action.c ****         send_keyboard_report();
 482:../../tmk_core/common/action.c ****     }
 483:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 587               		.loc 1 483 0
 588 0098 90E2      		ldi r25,lo8(32)
 589 009a 980F      		add r25,r24
 590 009c 9830      		cpi r25,lo8(8)
 591 009e 00F4      		brsh .L55
 484:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 592               		.loc 1 484 0
 593 00a0 8770      		andi r24,lo8(7)
 594               	.LVL49:
 595 00a2 91E0      		ldi r25,lo8(1)
 596 00a4 00C0      		rjmp 2f
 597               		1:
 598 00a6 990F      		lsl r25
 599               		2:
 600 00a8 8A95      		dec r24
 601 00aa 02F4      		brpl 1b
 602 00ac 892F      		mov r24,r25
 603 00ae 0E94 0000 		call del_mods
 604               	.LVL50:
 605 00b2 00C0      		rjmp .L67
 606               	.LVL51:
 607               	.L55:
 485:../../tmk_core/common/action.c ****         send_keyboard_report();
 486:../../tmk_core/common/action.c ****     }
 487:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 608               		.loc 1 487 0
 609 00b4 9BE5      		ldi r25,lo8(91)
 610 00b6 980F      		add r25,r24
 611 00b8 9330      		cpi r25,lo8(3)
 612 00ba 00F4      		brsh .L56
 488:../../tmk_core/common/action.c ****         host_system_send(0);
 613               		.loc 1 488 0
 614 00bc 90E0      		ldi r25,0
 615 00be 80E0      		ldi r24,0
 616               	.LVL52:
 617 00c0 0C94 0000 		jmp host_system_send
 618               	.LVL53:
 619               	.L56:
 489:../../tmk_core/common/action.c ****     }
 490:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 620               		.loc 1 490 0
 621 00c4 885A      		subi r24,lo8(-(88))
 622               	.LVL54:
 623 00c6 8531      		cpi r24,lo8(21)
 624 00c8 00F4      		brsh .L47
 491:../../tmk_core/common/action.c ****         host_consumer_send(0);
 625               		.loc 1 491 0
 626 00ca 90E0      		ldi r25,0
 627 00cc 80E0      		ldi r24,0
 628               	.LVL55:
 629 00ce 0C94 0000 		jmp host_consumer_send
 630               	.LVL56:
 631               	.L47:
 632               	/* epilogue start */
 492:../../tmk_core/common/action.c ****     }
 493:../../tmk_core/common/action.c **** }
 633               		.loc 1 493 0
 634 00d2 0895      		ret
 635               		.cfi_endproc
 636               	.LFE106:
 638               		.section	.text.register_mods,"ax",@progbits
 639               	.global	register_mods
 641               	register_mods:
 642               	.LFB107:
 494:../../tmk_core/common/action.c **** 
 495:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 496:../../tmk_core/common/action.c **** {
 643               		.loc 1 496 0
 644               		.cfi_startproc
 645               	.LVL57:
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 497:../../tmk_core/common/action.c ****     if (mods) {
 650               		.loc 1 497 0
 651 0000 8823      		tst r24
 652 0002 01F0      		breq .L68
 498:../../tmk_core/common/action.c ****         add_mods(mods);
 653               		.loc 1 498 0
 654 0004 0E94 0000 		call add_mods
 655               	.LVL58:
 499:../../tmk_core/common/action.c ****         send_keyboard_report();
 656               		.loc 1 499 0
 657 0008 0C94 0000 		jmp send_keyboard_report
 658               	.LVL59:
 659               	.L68:
 660               	/* epilogue start */
 500:../../tmk_core/common/action.c ****     }
 501:../../tmk_core/common/action.c **** }
 661               		.loc 1 501 0
 662 000c 0895      		ret
 663               		.cfi_endproc
 664               	.LFE107:
 666               		.section	.text.unregister_mods,"ax",@progbits
 667               	.global	unregister_mods
 669               	unregister_mods:
 670               	.LFB108:
 502:../../tmk_core/common/action.c **** 
 503:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 504:../../tmk_core/common/action.c **** {
 671               		.loc 1 504 0
 672               		.cfi_startproc
 673               	.LVL60:
 674               	/* prologue: function */
 675               	/* frame size = 0 */
 676               	/* stack size = 0 */
 677               	.L__stack_usage = 0
 505:../../tmk_core/common/action.c ****     if (mods) {
 678               		.loc 1 505 0
 679 0000 8823      		tst r24
 680 0002 01F0      		breq .L70
 506:../../tmk_core/common/action.c ****         del_mods(mods);
 681               		.loc 1 506 0
 682 0004 0E94 0000 		call del_mods
 683               	.LVL61:
 507:../../tmk_core/common/action.c ****         send_keyboard_report();
 684               		.loc 1 507 0
 685 0008 0C94 0000 		jmp send_keyboard_report
 686               	.LVL62:
 687               	.L70:
 688               	/* epilogue start */
 508:../../tmk_core/common/action.c ****     }
 509:../../tmk_core/common/action.c **** }
 689               		.loc 1 509 0
 690 000c 0895      		ret
 691               		.cfi_endproc
 692               	.LFE108:
 694               		.section	.text.process_action,"ax",@progbits
 695               	.global	process_action
 697               	process_action:
 698               	.LFB104:
  60:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 699               		.loc 1 60 0
 700               		.cfi_startproc
 701               	.LVL63:
 702 0000 AF92      		push r10
 703               	.LCFI5:
 704               		.cfi_def_cfa_offset 3
 705               		.cfi_offset 10, -2
 706 0002 BF92      		push r11
 707               	.LCFI6:
 708               		.cfi_def_cfa_offset 4
 709               		.cfi_offset 11, -3
 710 0004 CF92      		push r12
 711               	.LCFI7:
 712               		.cfi_def_cfa_offset 5
 713               		.cfi_offset 12, -4
 714 0006 DF92      		push r13
 715               	.LCFI8:
 716               		.cfi_def_cfa_offset 6
 717               		.cfi_offset 13, -5
 718 0008 EF92      		push r14
 719               	.LCFI9:
 720               		.cfi_def_cfa_offset 7
 721               		.cfi_offset 14, -6
 722 000a FF92      		push r15
 723               	.LCFI10:
 724               		.cfi_def_cfa_offset 8
 725               		.cfi_offset 15, -7
 726 000c 0F93      		push r16
 727               	.LCFI11:
 728               		.cfi_def_cfa_offset 9
 729               		.cfi_offset 16, -8
 730 000e 1F93      		push r17
 731               	.LCFI12:
 732               		.cfi_def_cfa_offset 10
 733               		.cfi_offset 17, -9
 734 0010 CF93      		push r28
 735               	.LCFI13:
 736               		.cfi_def_cfa_offset 11
 737               		.cfi_offset 28, -10
 738 0012 DF93      		push r29
 739               	.LCFI14:
 740               		.cfi_def_cfa_offset 12
 741               		.cfi_offset 29, -11
 742 0014 00D0      		rcall .
 743 0016 00D0      		rcall .
 744 0018 1F92      		push __zero_reg__
 745               	.LCFI15:
 746               		.cfi_def_cfa_offset 17
 747 001a CDB7      		in r28,__SP_L__
 748 001c DEB7      		in r29,__SP_H__
 749               	.LCFI16:
 750               		.cfi_def_cfa_register 28
 751               	/* prologue: function */
 752               	/* frame size = 5 */
 753               	/* stack size = 15 */
 754               	.L__stack_usage = 15
 755 001e 5C01      		movw r10,r24
  61:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 756               		.loc 1 61 0
 757 0020 85E0      		ldi r24,lo8(5)
 758               	.LVL64:
 759 0022 F501      		movw r30,r10
 760 0024 DE01      		movw r26,r28
 761 0026 1196      		adiw r26,1
 762               		0:
 763 0028 0190      		ld r0,Z+
 764 002a 0D92      		st X+,r0
 765 002c 8A95      		dec r24
 766 002e 01F4      		brne 0b
 767 0030 F501      		movw r30,r10
 768 0032 4081      		ld r20,Z
 769               	.LVL65:
 770 0034 5181      		ldd r21,Z+1
 771               	.LVL66:
 772 0036 2381      		ldd r18,Z+3
 773 0038 3481      		ldd r19,Z+4
 774               	.LVL67:
 775               	.LBB36:
 776               	.LBB37:
 777               		.loc 2 49 0
 778 003a 81E0      		ldi r24,lo8(1)
 779 003c 2115      		cp r18,__zero_reg__
 780 003e 3105      		cpc r19,__zero_reg__
 781 0040 01F0      		breq .L73
 782 0042 5F3F      		cpi r21,lo8(-1)
 783 0044 01F4      		brne .L145
 784 0046 81E0      		ldi r24,lo8(1)
 785 0048 4F3F      		cpi r20,lo8(-1)
 786 004a 01F0      		breq .L73
 787               	.L145:
 788 004c 80E0      		ldi r24,0
 789               	.L73:
 790               	.LBE37:
 791               	.LBE36:
  66:../../tmk_core/common/action.c **** 
 792               		.loc 1 66 0
 793 004e 80FD      		sbrc r24,0
 794 0050 00C0      		rjmp .L72
  61:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 795               		.loc 1 61 0
 796 0052 F501      		movw r30,r10
 797 0054 F280      		ldd r15,Z+2
  63:../../tmk_core/common/action.c **** #endif
 798               		.loc 1 63 0
 799 0056 E580      		ldd r14,Z+5
 800 0058 E294      		swap r14
 801 005a 6FE0      		ldi r22,lo8(15)
 802 005c E622      		and r14,r22
  68:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 803               		.loc 1 68 0
 804 005e 722F      		mov r23,r18
 805 0060 3D83      		std Y+5,r19
 806 0062 2C83      		std Y+4,r18
 807 0064 6F2D      		mov r22,r15
 808 0066 8D81      		ldd r24,Y+5
 809 0068 0E94 0000 		call layer_switch_get_action
 810               	.LVL68:
 811 006c 8C01      		movw r16,r24
  71:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 812               		.loc 1 71 0
 813 006e 0E94 0000 		call layer_debug
 814               	.LVL69:
  72:../../tmk_core/common/action.c **** #endif
 815               		.loc 1 72 0
 816 0072 0E94 0000 		call default_layer_debug
 817               	.LVL70:
  76:../../tmk_core/common/action.c ****         /* Key and Mods */
 818               		.loc 1 76 0
 819 0076 E12F      		mov r30,r17
 820 0078 E295      		swap r30
 821 007a EF70      		andi r30,lo8(15)
 822 007c F0E0      		ldi r31,0
 823 007e E050      		subi r30,lo8(-(gs(.L78)))
 824 0080 F040      		sbci r31,hi8(-(gs(.L78)))
 825 0082 0C94 0000 		jmp __tablejump2__
 826               		.p2align	1
 827               	.L78:
 828 0086 0000      		.word gs(.L77)
 829 0088 0000      		.word gs(.L77)
 830 008a 0000      		.word gs(.L79)
 831 008c 0000      		.word gs(.L79)
 832 008e 0000      		.word gs(.L80)
 833 0090 0000      		.word gs(.L81)
 834 0092 0000      		.word gs(.L72)
 835 0094 0000      		.word gs(.L72)
 836 0096 0000      		.word gs(.L82)
 837 0098 0000      		.word gs(.L72)
 838 009a 0000      		.word gs(.L83)
 839 009c 0000      		.word gs(.L83)
 840 009e 0000      		.word gs(.L84)
 841 00a0 0000      		.word gs(.L72)
 842 00a2 0000      		.word gs(.L72)
 843 00a4 0000      		.word gs(.L85)
 844               	.L77:
 845 00a6 F12F      		mov r31,r17
 846 00a8 FF70      		andi r31,lo8(15)
 847 00aa EF2E      		mov r14,r31
 848               	.LBB38:
  81:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 849               		.loc 1 81 0
 850 00ac 107F      		andi r17,lo8(-16)
 851 00ae 01F0      		breq .L86
  81:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 852               		.loc 1 81 0 is_stmt 0 discriminator 2
 853 00b0 E294      		swap r14
 854 00b2 90EF      		ldi r25,lo8(-16)
 855 00b4 E922      		and r14,r25
 856               	.L86:
 857               	.LVL71:
  83:../../tmk_core/common/action.c ****                     if (mods) {
 858               		.loc 1 83 0 is_stmt 1 discriminator 4
 859 00b6 FF20      		tst r15
 860 00b8 01F0      		breq .L87
  84:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 861               		.loc 1 84 0
 862 00ba EE20      		tst r14
 863 00bc 01F0      		breq .L172
  85:../../tmk_core/common/action.c ****                         send_keyboard_report();
 864               		.loc 1 85 0
 865 00be 8E2D      		mov r24,r14
 866 00c0 0E94 0000 		call add_weak_mods
 867               	.LVL72:
  86:../../tmk_core/common/action.c ****                     }
 868               		.loc 1 86 0
 869 00c4 0E94 0000 		call send_keyboard_report
 870               	.LVL73:
 871               	.L172:
 872               	.LBE38:
 293:../../tmk_core/common/action.c ****                         } else {
 873               		.loc 1 293 0
 874 00c8 802F      		mov r24,r16
 875               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 876               		.loc 1 351 0
 877 00ca 0F90      		pop __tmp_reg__
 878 00cc 0F90      		pop __tmp_reg__
 879 00ce 0F90      		pop __tmp_reg__
 880 00d0 0F90      		pop __tmp_reg__
 881 00d2 0F90      		pop __tmp_reg__
 882 00d4 DF91      		pop r29
 883 00d6 CF91      		pop r28
 884               	.LVL74:
 885 00d8 1F91      		pop r17
 886               	.LVL75:
 887 00da 0F91      		pop r16
 888               	.LVL76:
 889 00dc FF90      		pop r15
 890               	.LVL77:
 891 00de EF90      		pop r14
 892               	.LVL78:
 893 00e0 DF90      		pop r13
 894               	.LVL79:
 895 00e2 CF90      		pop r12
 896               	.LVL80:
 897 00e4 BF90      		pop r11
 898               	.LVL81:
 899 00e6 AF90      		pop r10
 900               	.LVL82:
 293:../../tmk_core/common/action.c ****                         } else {
 901               		.loc 1 293 0
 902 00e8 0C94 0000 		jmp register_code
 903               	.LVL83:
 904               	.L87:
 905               	.LBB39:
  90:../../tmk_core/common/action.c ****                     if (mods) {
 906               		.loc 1 90 0
 907 00ec 802F      		mov r24,r16
 908 00ee 0E94 0000 		call unregister_code
 909               	.LVL84:
  91:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 910               		.loc 1 91 0
 911 00f2 EE20      		tst r14
 912 00f4 01F4      		brne .+2
 913 00f6 00C0      		rjmp .L72
  92:../../tmk_core/common/action.c ****                         send_keyboard_report();
 914               		.loc 1 92 0
 915 00f8 8E2D      		mov r24,r14
 916 00fa 0E94 0000 		call del_weak_mods
 917               	.LVL85:
 918               	/* epilogue start */
 919               	.LBE39:
 351:../../tmk_core/common/action.c **** 
 920               		.loc 1 351 0
 921 00fe 0F90      		pop __tmp_reg__
 922 0100 0F90      		pop __tmp_reg__
 923 0102 0F90      		pop __tmp_reg__
 924 0104 0F90      		pop __tmp_reg__
 925 0106 0F90      		pop __tmp_reg__
 926 0108 DF91      		pop r29
 927 010a CF91      		pop r28
 928               	.LVL86:
 929 010c 1F91      		pop r17
 930               	.LVL87:
 931 010e 0F91      		pop r16
 932               	.LVL88:
 933 0110 FF90      		pop r15
 934               	.LVL89:
 935 0112 EF90      		pop r14
 936               	.LVL90:
 937 0114 DF90      		pop r13
 938               	.LVL91:
 939 0116 CF90      		pop r12
 940               	.LVL92:
 941 0118 BF90      		pop r11
 942               	.LVL93:
 943 011a AF90      		pop r10
 944               	.LVL94:
 945               	.LBB40:
  93:../../tmk_core/common/action.c ****                     }
 946               		.loc 1 93 0
 947 011c 0C94 0000 		jmp send_keyboard_report
 948               	.LVL95:
 949               	.L79:
 950 0120 812F      		mov r24,r17
 951 0122 8F70      		andi r24,lo8(15)
 952 0124 D82E      		mov r13,r24
 953               	.LBE40:
 954               	.LBB41:
 102:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 955               		.loc 1 102 0
 956 0126 107F      		andi r17,lo8(-16)
 957 0128 1032      		cpi r17,lo8(32)
 958 012a 01F0      		breq .L90
 102:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 959               		.loc 1 102 0 is_stmt 0 discriminator 2
 960 012c D294      		swap r13
 961 012e 80EF      		ldi r24,lo8(-16)
 962 0130 D822      		and r13,r24
 963               	.L90:
 964               	.LVL96:
 104:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 965               		.loc 1 104 0 is_stmt 1 discriminator 4
 966 0132 0023      		tst r16
 967 0134 01F0      		breq .L92
 968 0136 0130      		cpi r16,lo8(1)
 969 0138 01F4      		brne .+2
 970 013a 00C0      		rjmp .L93
 153:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 971               		.loc 1 153 0
 972 013c FF20      		tst r15
 973 013e 01F4      		brne .+2
 974 0140 00C0      		rjmp .L101
 154:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 975               		.loc 1 154 0
 976 0142 EE20      		tst r14
 977 0144 01F0      		breq .L100
 155:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 978               		.loc 1 155 0
 979 0146 F501      		movw r30,r10
 980 0148 8581      		ldd r24,Z+5
 981 014a 80FF      		sbrs r24,0
 982 014c 00C0      		rjmp .L172
 158:../../tmk_core/common/action.c ****                                     register_mods(mods);
 983               		.loc 1 158 0
 984 014e 8F70      		andi r24,lo8(15)
 985 0150 8583      		std Z+5,r24
 986 0152 00C0      		rjmp .L100
 987               	.L92:
 108:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 988               		.loc 1 108 0
 989 0154 FF20      		tst r15
 990 0156 01F0      		breq .L94
 109:../../tmk_core/common/action.c ****                                 register_mods(mods);
 991               		.loc 1 109 0
 992 0158 E110      		cpse r14,__zero_reg__
 993 015a 00C0      		rjmp .L95
 994               	.L100:
 142:../../tmk_core/common/action.c ****                                 }
 995               		.loc 1 142 0
 996 015c 8D2D      		mov r24,r13
 997               	.LVL97:
 998               	.L168:
 999               	/* epilogue start */
 1000               	.LBE41:
 351:../../tmk_core/common/action.c **** 
 1001               		.loc 1 351 0
 1002 015e 0F90      		pop __tmp_reg__
 1003 0160 0F90      		pop __tmp_reg__
 1004 0162 0F90      		pop __tmp_reg__
 1005 0164 0F90      		pop __tmp_reg__
 1006 0166 0F90      		pop __tmp_reg__
 1007 0168 DF91      		pop r29
 1008 016a CF91      		pop r28
 1009               	.LVL98:
 1010 016c 1F91      		pop r17
 1011               	.LVL99:
 1012 016e 0F91      		pop r16
 1013               	.LVL100:
 1014 0170 FF90      		pop r15
 1015               	.LVL101:
 1016 0172 EF90      		pop r14
 1017               	.LVL102:
 1018 0174 DF90      		pop r13
 1019               	.LVL103:
 1020 0176 CF90      		pop r12
 1021               	.LVL104:
 1022 0178 BF90      		pop r11
 1023               	.LVL105:
 1024 017a AF90      		pop r10
 1025               	.LVL106:
 1026               	.LBB42:
 142:../../tmk_core/common/action.c ****                                 }
 1027               		.loc 1 142 0
 1028 017c 0C94 0000 		jmp register_mods
 1029               	.LVL107:
 1030               	.L95:
 112:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1031               		.loc 1 112 0
 1032 0180 E1E0      		ldi r30,lo8(1)
 114:../../tmk_core/common/action.c ****                             }
 1033               		.loc 1 114 0
 1034 0182 8D2D      		mov r24,r13
 112:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1035               		.loc 1 112 0
 1036 0184 EE12      		cpse r14,r30
 1037 0186 00C0      		rjmp .L168
 1038               	/* epilogue start */
 1039               	.LBE42:
 351:../../tmk_core/common/action.c **** 
 1040               		.loc 1 351 0
 1041 0188 0F90      		pop __tmp_reg__
 1042 018a 0F90      		pop __tmp_reg__
 1043 018c 0F90      		pop __tmp_reg__
 1044 018e 0F90      		pop __tmp_reg__
 1045 0190 0F90      		pop __tmp_reg__
 1046 0192 DF91      		pop r29
 1047 0194 CF91      		pop r28
 1048               	.LVL108:
 1049 0196 1F91      		pop r17
 1050               	.LVL109:
 1051 0198 0F91      		pop r16
 1052               	.LVL110:
 1053 019a FF90      		pop r15
 1054               	.LVL111:
 1055 019c EF90      		pop r14
 1056               	.LVL112:
 1057 019e DF90      		pop r13
 1058               	.LVL113:
 1059 01a0 CF90      		pop r12
 1060               	.LVL114:
 1061 01a2 BF90      		pop r11
 1062               	.LVL115:
 1063 01a4 AF90      		pop r10
 1064               	.LVL116:
 1065               	.LBB43:
 114:../../tmk_core/common/action.c ****                             }
 1066               		.loc 1 114 0
 1067 01a6 0C94 0000 		jmp set_oneshot_mods
 1068               	.LVL117:
 1069               	.L94:
 120:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1070               		.loc 1 120 0
 1071 01aa E110      		cpse r14,__zero_reg__
 1072 01ac 00C0      		rjmp .L97
 1073               	.L169:
 128:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 1074               		.loc 1 128 0
 1075 01ae 0E94 0000 		call clear_oneshot_mods
 1076               	.LVL118:
 1077               	.L104:
 174:../../tmk_core/common/action.c ****                             }
 1078               		.loc 1 174 0
 1079 01b2 8D2D      		mov r24,r13
 1080               	.LVL119:
 1081               	.L134:
 1082               	/* epilogue start */
 1083               	.LBE43:
 351:../../tmk_core/common/action.c **** 
 1084               		.loc 1 351 0 discriminator 4
 1085 01b4 0F90      		pop __tmp_reg__
 1086 01b6 0F90      		pop __tmp_reg__
 1087 01b8 0F90      		pop __tmp_reg__
 1088 01ba 0F90      		pop __tmp_reg__
 1089 01bc 0F90      		pop __tmp_reg__
 1090 01be DF91      		pop r29
 1091 01c0 CF91      		pop r28
 1092               	.LVL120:
 1093 01c2 1F91      		pop r17
 1094               	.LVL121:
 1095 01c4 0F91      		pop r16
 1096               	.LVL122:
 1097 01c6 FF90      		pop r15
 1098               	.LVL123:
 1099 01c8 EF90      		pop r14
 1100               	.LVL124:
 1101 01ca DF90      		pop r13
 1102               	.LVL125:
 1103 01cc CF90      		pop r12
 1104               	.LVL126:
 1105 01ce BF90      		pop r11
 1106               	.LVL127:
 1107 01d0 AF90      		pop r10
 1108               	.LVL128:
 259:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1109               		.loc 1 259 0 discriminator 4
 1110 01d2 0C94 0000 		jmp unregister_mods
 1111               	.LVL129:
 1112               	.L97:
 1113               	.LBB44:
 124:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1114               		.loc 1 124 0
 1115 01d6 F1E0      		ldi r31,lo8(1)
 1116 01d8 EF12      		cpse r14,r31
 1117 01da 00C0      		rjmp .L169
 1118               	.LVL130:
 1119               	.L72:
 1120               	/* epilogue start */
 1121               	.LBE44:
 351:../../tmk_core/common/action.c **** 
 1122               		.loc 1 351 0
 1123 01dc 0F90      		pop __tmp_reg__
 1124 01de 0F90      		pop __tmp_reg__
 1125 01e0 0F90      		pop __tmp_reg__
 1126 01e2 0F90      		pop __tmp_reg__
 1127 01e4 0F90      		pop __tmp_reg__
 1128 01e6 DF91      		pop r29
 1129 01e8 CF91      		pop r28
 1130 01ea 1F91      		pop r17
 1131               	.LVL131:
 1132 01ec 0F91      		pop r16
 1133 01ee FF90      		pop r15
 1134 01f0 EF90      		pop r14
 1135 01f2 DF90      		pop r13
 1136 01f4 CF90      		pop r12
 1137 01f6 BF90      		pop r11
 1138 01f8 AF90      		pop r10
 1139               	.LVL132:
 1140 01fa 0895      		ret
 1141               	.LVL133:
 1142               	.L93:
 1143               	.LBB45:
 135:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1144               		.loc 1 135 0
 1145 01fc FF20      		tst r15
 1146 01fe 01F0      		breq .L99
 136:../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 1147               		.loc 1 136 0
 1148 0200 85E0      		ldi r24,lo8(5)
 1149 0202 8E15      		cp r24,r14
 1150 0204 00F0      		brlo .L72
 137:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 1151               		.loc 1 137 0
 1152 0206 0E94 0000 		call get_mods
 1153               	.LVL134:
 1154 020a 8D21      		and r24,r13
 1155 020c 01F4      		brne .+2
 1156 020e 00C0      		rjmp .L100
 1157 0210 00C0      		rjmp .L104
 1158               	.L99:
 146:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 1159               		.loc 1 146 0
 1160 0212 E4E0      		ldi r30,lo8(4)
 1161 0214 EE15      		cp r30,r14
 1162 0216 00F0      		brlo .L72
 1163 0218 00C0      		rjmp .L104
 1164               	.L101:
 169:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1165               		.loc 1 169 0
 1166 021a EE20      		tst r14
 1167 021c 01F0      		breq .L104
 1168               	.LVL135:
 1169               	.L175:
 1170               	.LBE45:
 301:../../tmk_core/common/action.c ****                         } else {
 1171               		.loc 1 301 0
 1172 021e 802F      		mov r24,r16
 1173               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1174               		.loc 1 351 0
 1175 0220 0F90      		pop __tmp_reg__
 1176 0222 0F90      		pop __tmp_reg__
 1177 0224 0F90      		pop __tmp_reg__
 1178 0226 0F90      		pop __tmp_reg__
 1179 0228 0F90      		pop __tmp_reg__
 1180 022a DF91      		pop r29
 1181 022c CF91      		pop r28
 1182               	.LVL136:
 1183 022e 1F91      		pop r17
 1184               	.LVL137:
 1185 0230 0F91      		pop r16
 1186               	.LVL138:
 1187 0232 FF90      		pop r15
 1188               	.LVL139:
 1189 0234 EF90      		pop r14
 1190               	.LVL140:
 1191 0236 DF90      		pop r13
 1192               	.LVL141:
 1193 0238 CF90      		pop r12
 1194               	.LVL142:
 1195 023a BF90      		pop r11
 1196               	.LVL143:
 1197 023c AF90      		pop r10
 1198               	.LVL144:
 301:../../tmk_core/common/action.c ****                         } else {
 1199               		.loc 1 301 0
 1200 023e 0C94 0000 		jmp unregister_code
 1201               	.LVL145:
 1202               	.L80:
 185:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1203               		.loc 1 185 0
 1204 0242 812F      		mov r24,r17
 1205 0244 8695      		lsr r24
 1206 0246 8695      		lsr r24
 1207 0248 8370      		andi r24,lo8(3)
 1208 024a 01F0      		breq .L105
 1209 024c 8130      		cpi r24,lo8(1)
 1210 024e 01F4      		brne .L72
 195:../../tmk_core/common/action.c ****                     } else {
 1211               		.loc 1 195 0
 1212 0250 C801      		movw r24,r16
 1213 0252 9370      		andi r25,lo8(3)
 194:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1214               		.loc 1 194 0
 1215 0254 F110      		cpse r15,__zero_reg__
 1216 0256 00C0      		rjmp .L178
 197:../../tmk_core/common/action.c ****                     }
 1217               		.loc 1 197 0
 1218 0258 90E0      		ldi r25,0
 1219 025a 80E0      		ldi r24,0
 1220               	.L178:
 1221               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1222               		.loc 1 351 0
 1223 025c 0F90      		pop __tmp_reg__
 1224 025e 0F90      		pop __tmp_reg__
 1225 0260 0F90      		pop __tmp_reg__
 1226 0262 0F90      		pop __tmp_reg__
 1227 0264 0F90      		pop __tmp_reg__
 1228 0266 DF91      		pop r29
 1229 0268 CF91      		pop r28
 1230               	.LVL146:
 1231 026a 1F91      		pop r17
 1232               	.LVL147:
 1233 026c 0F91      		pop r16
 1234               	.LVL148:
 1235 026e FF90      		pop r15
 1236               	.LVL149:
 1237 0270 EF90      		pop r14
 1238               	.LVL150:
 1239 0272 DF90      		pop r13
 1240               	.LVL151:
 1241 0274 CF90      		pop r12
 1242               	.LVL152:
 1243 0276 BF90      		pop r11
 1244               	.LVL153:
 1245 0278 AF90      		pop r10
 1246               	.LVL154:
 197:../../tmk_core/common/action.c ****                     }
 1247               		.loc 1 197 0
 1248 027a 0C94 0000 		jmp host_consumer_send
 1249               	.LVL155:
 1250               	.L105:
 188:../../tmk_core/common/action.c ****                     } else {
 1251               		.loc 1 188 0
 1252 027e C801      		movw r24,r16
 1253 0280 9370      		andi r25,lo8(3)
 187:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1254               		.loc 1 187 0
 1255 0282 F110      		cpse r15,__zero_reg__
 1256 0284 00C0      		rjmp .L176
 190:../../tmk_core/common/action.c ****                     }
 1257               		.loc 1 190 0
 1258 0286 90E0      		ldi r25,0
 1259 0288 80E0      		ldi r24,0
 1260               	.L176:
 1261               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1262               		.loc 1 351 0
 1263 028a 0F90      		pop __tmp_reg__
 1264 028c 0F90      		pop __tmp_reg__
 1265 028e 0F90      		pop __tmp_reg__
 1266 0290 0F90      		pop __tmp_reg__
 1267 0292 0F90      		pop __tmp_reg__
 1268 0294 DF91      		pop r29
 1269 0296 CF91      		pop r28
 1270               	.LVL156:
 1271 0298 1F91      		pop r17
 1272               	.LVL157:
 1273 029a 0F91      		pop r16
 1274               	.LVL158:
 1275 029c FF90      		pop r15
 1276               	.LVL159:
 1277 029e EF90      		pop r14
 1278               	.LVL160:
 1279 02a0 DF90      		pop r13
 1280               	.LVL161:
 1281 02a2 CF90      		pop r12
 1282               	.LVL162:
 1283 02a4 BF90      		pop r11
 1284               	.LVL163:
 1285 02a6 AF90      		pop r10
 1286               	.LVL164:
 190:../../tmk_core/common/action.c ****                     }
 1287               		.loc 1 190 0
 1288 02a8 0C94 0000 		jmp host_system_send
 1289               	.LVL165:
 1290               	.L81:
 207:../../tmk_core/common/action.c ****                 mousekey_send();
 1291               		.loc 1 207 0
 1292 02ac 802F      		mov r24,r16
 206:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1293               		.loc 1 206 0
 1294 02ae FF20      		tst r15
 1295 02b0 01F0      		breq .L109
 207:../../tmk_core/common/action.c ****                 mousekey_send();
 1296               		.loc 1 207 0
 1297 02b2 0E94 0000 		call mousekey_on
 1298               	.LVL166:
 1299               	.L179:
 1300               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1301               		.loc 1 351 0
 1302 02b6 0F90      		pop __tmp_reg__
 1303 02b8 0F90      		pop __tmp_reg__
 1304 02ba 0F90      		pop __tmp_reg__
 1305 02bc 0F90      		pop __tmp_reg__
 1306 02be 0F90      		pop __tmp_reg__
 1307 02c0 DF91      		pop r29
 1308 02c2 CF91      		pop r28
 1309               	.LVL167:
 1310 02c4 1F91      		pop r17
 1311               	.LVL168:
 1312 02c6 0F91      		pop r16
 1313               	.LVL169:
 1314 02c8 FF90      		pop r15
 1315               	.LVL170:
 1316 02ca EF90      		pop r14
 1317               	.LVL171:
 1318 02cc DF90      		pop r13
 1319               	.LVL172:
 1320 02ce CF90      		pop r12
 1321               	.LVL173:
 1322 02d0 BF90      		pop r11
 1323               	.LVL174:
 1324 02d2 AF90      		pop r10
 1325               	.LVL175:
 211:../../tmk_core/common/action.c ****             }
 1326               		.loc 1 211 0
 1327 02d4 0C94 0000 		jmp mousekey_send
 1328               	.LVL176:
 1329               	.L109:
 210:../../tmk_core/common/action.c ****                 mousekey_send();
 1330               		.loc 1 210 0
 1331 02d8 0E94 0000 		call mousekey_off
 1332               	.LVL177:
 1333 02dc 00C0      		rjmp .L179
 1334               	.LVL178:
 1335               	.L82:
 217:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1336               		.loc 1 217 0
 1337 02de 812F      		mov r24,r17
 1338 02e0 8370      		andi r24,lo8(3)
 1339 02e2 01F0      		breq .+2
 1340 02e4 00C0      		rjmp .L110
 219:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1341               		.loc 1 219 0
 1342 02e6 F110      		cpse r15,__zero_reg__
 1343 02e8 00C0      		rjmp .L72
 1344               	.LVL179:
 1345               	.LBB46:
 220:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1346               		.loc 1 220 0
 1347 02ea 202F      		mov r18,r16
 1348 02ec 2295      		swap r18
 1349 02ee 2695      		lsr r18
 1350 02f0 2770      		andi r18,lo8(7)
 1351 02f2 220F      		lsl r18
 1352 02f4 220F      		lsl r18
 221:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1353               		.loc 1 221 0
 1354 02f6 602F      		mov r22,r16
 1355 02f8 6F70      		andi r22,lo8(15)
 1356 02fa C62E      		mov r12,r22
 1357 02fc D12C      		mov r13,__zero_reg__
 1358 02fe F12C      		mov r15,__zero_reg__
 1359 0300 E12C      		mov r14,__zero_reg__
 1360 0302 022E      		mov r0,r18
 1361 0304 00C0      		rjmp 2f
 1362               		1:
 1363 0306 CC0C      		lsl r12
 1364 0308 DD1C      		rol r13
 1365 030a EE1C      		rol r14
 1366 030c FF1C      		rol r15
 1367               		2:
 1368 030e 0A94      		dec r0
 1369 0310 02F4      		brpl 1b
 1370               	.LVL180:
 222:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1371               		.loc 1 222 0
 1372 0312 60E0      		ldi r22,0
 1373 0314 70E0      		ldi r23,0
 1374 0316 CB01      		movw r24,r22
 1375 0318 04FF      		sbrs r16,4
 1376 031a 00C0      		rjmp .L111
 222:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1377               		.loc 1 222 0 is_stmt 0 discriminator 1
 1378 031c 6FE0      		ldi r22,lo8(15)
 1379 031e 70E0      		ldi r23,0
 1380 0320 80E0      		ldi r24,0
 1381 0322 90E0      		ldi r25,0
 1382 0324 00C0      		rjmp 2f
 1383               		1:
 1384 0326 660F      		lsl r22
 1385 0328 771F      		rol r23
 1386 032a 881F      		rol r24
 1387 032c 991F      		rol r25
 1388               		2:
 1389 032e 2A95      		dec r18
 1390 0330 02F4      		brpl 1b
 1391 0332 6095      		com r22
 1392 0334 7095      		com r23
 1393 0336 8095      		com r24
 1394 0338 9095      		com r25
 1395               	.L111:
 1396               	.LVL181:
 223:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1397               		.loc 1 223 0 is_stmt 1 discriminator 4
 1398 033a 1695      		lsr r17
 1399 033c 1695      		lsr r17
 1400               	.LVL182:
 1401 033e 1370      		andi r17,lo8(3)
 1402 0340 1230      		cpi r17,lo8(2)
 1403 0342 01F0      		breq .L113
 1404 0344 00F4      		brsh .L114
 1405 0346 6C29      		or r22,r12
 1406               	.LVL183:
 1407 0348 7D29      		or r23,r13
 1408 034a 8E29      		or r24,r14
 1409 034c 9F29      		or r25,r15
 1410 034e 1130      		cpi r17,lo8(1)
 1411 0350 01F0      		breq .L180
 1412               	/* epilogue start */
 1413               	.LBE46:
 351:../../tmk_core/common/action.c **** 
 1414               		.loc 1 351 0 discriminator 4
 1415 0352 0F90      		pop __tmp_reg__
 1416 0354 0F90      		pop __tmp_reg__
 1417 0356 0F90      		pop __tmp_reg__
 1418 0358 0F90      		pop __tmp_reg__
 1419 035a 0F90      		pop __tmp_reg__
 1420 035c DF91      		pop r29
 1421 035e CF91      		pop r28
 1422               	.LVL184:
 1423 0360 1F91      		pop r17
 1424               	.LVL185:
 1425 0362 0F91      		pop r16
 1426               	.LVL186:
 1427 0364 FF90      		pop r15
 1428               	.LVL187:
 1429 0366 EF90      		pop r14
 1430               	.LVL188:
 1431 0368 DF90      		pop r13
 1432               	.LVL189:
 1433 036a CF90      		pop r12
 1434               	.LVL190:
 1435 036c BF90      		pop r11
 1436               	.LVL191:
 1437 036e AF90      		pop r10
 1438               	.LVL192:
 1439               	.LBB47:
 224:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1440               		.loc 1 224 0 discriminator 4
 1441 0370 0C94 0000 		jmp default_layer_and
 1442               	.LVL193:
 1443               	.L113:
 226:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1444               		.loc 1 226 0
 1445 0374 6C29      		or r22,r12
 1446               	.LVL194:
 1447 0376 7D29      		or r23,r13
 1448 0378 8E29      		or r24,r14
 1449 037a 9F29      		or r25,r15
 1450               	/* epilogue start */
 1451               	.LBE47:
 351:../../tmk_core/common/action.c **** 
 1452               		.loc 1 351 0
 1453 037c 0F90      		pop __tmp_reg__
 1454 037e 0F90      		pop __tmp_reg__
 1455 0380 0F90      		pop __tmp_reg__
 1456 0382 0F90      		pop __tmp_reg__
 1457 0384 0F90      		pop __tmp_reg__
 1458 0386 DF91      		pop r29
 1459 0388 CF91      		pop r28
 1460               	.LVL195:
 1461 038a 1F91      		pop r17
 1462               	.LVL196:
 1463 038c 0F91      		pop r16
 1464               	.LVL197:
 1465 038e FF90      		pop r15
 1466               	.LVL198:
 1467 0390 EF90      		pop r14
 1468               	.LVL199:
 1469 0392 DF90      		pop r13
 1470               	.LVL200:
 1471 0394 CF90      		pop r12
 1472               	.LVL201:
 1473 0396 BF90      		pop r11
 1474               	.LVL202:
 1475 0398 AF90      		pop r10
 1476               	.LVL203:
 1477               	.LBB48:
 226:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1478               		.loc 1 226 0
 1479 039a 0C94 0000 		jmp default_layer_xor
 1480               	.LVL204:
 1481               	.L114:
 227:../../tmk_core/common/action.c ****                     }
 1482               		.loc 1 227 0
 1483 039e 0E94 0000 		call default_layer_and
 1484               	.LVL205:
 1485 03a2 C701      		movw r24,r14
 1486 03a4 B601      		movw r22,r12
 1487               	.L180:
 1488               	/* epilogue start */
 1489               	.LBE48:
 351:../../tmk_core/common/action.c **** 
 1490               		.loc 1 351 0
 1491 03a6 0F90      		pop __tmp_reg__
 1492 03a8 0F90      		pop __tmp_reg__
 1493 03aa 0F90      		pop __tmp_reg__
 1494 03ac 0F90      		pop __tmp_reg__
 1495 03ae 0F90      		pop __tmp_reg__
 1496 03b0 DF91      		pop r29
 1497 03b2 CF91      		pop r28
 1498               	.LVL206:
 1499 03b4 1F91      		pop r17
 1500               	.LVL207:
 1501 03b6 0F91      		pop r16
 1502               	.LVL208:
 1503 03b8 FF90      		pop r15
 1504               	.LVL209:
 1505 03ba EF90      		pop r14
 1506               	.LVL210:
 1507 03bc DF90      		pop r13
 1508               	.LVL211:
 1509 03be CF90      		pop r12
 1510               	.LVL212:
 1511 03c0 BF90      		pop r11
 1512               	.LVL213:
 1513 03c2 AF90      		pop r10
 1514               	.LVL214:
 1515               	.LBB49:
 227:../../tmk_core/common/action.c ****                     }
 1516               		.loc 1 227 0
 1517 03c4 0C94 0000 		jmp default_layer_or
 1518               	.LVL215:
 1519               	.L110:
 1520               	.LBE49:
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1521               		.loc 1 232 0
 1522 03c8 8695      		lsr r24
 1523 03ca FF20      		tst r15
 1524 03cc 01F0      		breq .L117
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1525               		.loc 1 232 0 is_stmt 0 discriminator 1
 1526 03ce 812F      		mov r24,r17
 1527 03d0 8170      		andi r24,lo8(1)
 1528               	.L117:
 232:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1529               		.loc 1 232 0 discriminator 4
 1530 03d2 8823      		tst r24
 1531 03d4 01F4      		brne .+2
 1532 03d6 00C0      		rjmp .L72
 1533               	.LVL216:
 1534               	.LBB50:
 234:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1535               		.loc 1 234 0 is_stmt 1
 1536 03d8 202F      		mov r18,r16
 1537 03da 2295      		swap r18
 1538 03dc 2695      		lsr r18
 1539 03de 2770      		andi r18,lo8(7)
 1540 03e0 220F      		lsl r18
 1541 03e2 220F      		lsl r18
 235:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1542               		.loc 1 235 0
 1543 03e4 602F      		mov r22,r16
 1544 03e6 6F70      		andi r22,lo8(15)
 1545 03e8 C62E      		mov r12,r22
 1546 03ea D12C      		mov r13,__zero_reg__
 1547 03ec F12C      		mov r15,__zero_reg__
 1548 03ee E12C      		mov r14,__zero_reg__
 1549 03f0 022E      		mov r0,r18
 1550 03f2 00C0      		rjmp 2f
 1551               		1:
 1552 03f4 CC0C      		lsl r12
 1553 03f6 DD1C      		rol r13
 1554 03f8 EE1C      		rol r14
 1555 03fa FF1C      		rol r15
 1556               		2:
 1557 03fc 0A94      		dec r0
 1558 03fe 02F4      		brpl 1b
 1559               	.LVL217:
 236:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1560               		.loc 1 236 0
 1561 0400 60E0      		ldi r22,0
 1562 0402 70E0      		ldi r23,0
 1563 0404 CB01      		movw r24,r22
 1564 0406 04FF      		sbrs r16,4
 1565 0408 00C0      		rjmp .L118
 236:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1566               		.loc 1 236 0 is_stmt 0 discriminator 1
 1567 040a 6FE0      		ldi r22,lo8(15)
 1568 040c 70E0      		ldi r23,0
 1569 040e 80E0      		ldi r24,0
 1570 0410 90E0      		ldi r25,0
 1571 0412 00C0      		rjmp 2f
 1572               		1:
 1573 0414 660F      		lsl r22
 1574 0416 771F      		rol r23
 1575 0418 881F      		rol r24
 1576 041a 991F      		rol r25
 1577               		2:
 1578 041c 2A95      		dec r18
 1579 041e 02F4      		brpl 1b
 1580 0420 6095      		com r22
 1581 0422 7095      		com r23
 1582 0424 8095      		com r24
 1583 0426 9095      		com r25
 1584               	.L118:
 1585               	.LVL218:
 237:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1586               		.loc 1 237 0 is_stmt 1 discriminator 4
 1587 0428 1695      		lsr r17
 1588 042a 1695      		lsr r17
 1589               	.LVL219:
 1590 042c 1370      		andi r17,lo8(3)
 1591 042e 1230      		cpi r17,lo8(2)
 1592 0430 01F0      		breq .L120
 1593 0432 00F4      		brsh .L121
 1594 0434 6C29      		or r22,r12
 1595               	.LVL220:
 1596 0436 7D29      		or r23,r13
 1597 0438 8E29      		or r24,r14
 1598 043a 9F29      		or r25,r15
 1599 043c 1130      		cpi r17,lo8(1)
 1600 043e 01F0      		breq .L177
 1601               	/* epilogue start */
 1602               	.LBE50:
 351:../../tmk_core/common/action.c **** 
 1603               		.loc 1 351 0 discriminator 4
 1604 0440 0F90      		pop __tmp_reg__
 1605 0442 0F90      		pop __tmp_reg__
 1606 0444 0F90      		pop __tmp_reg__
 1607 0446 0F90      		pop __tmp_reg__
 1608 0448 0F90      		pop __tmp_reg__
 1609 044a DF91      		pop r29
 1610 044c CF91      		pop r28
 1611               	.LVL221:
 1612 044e 1F91      		pop r17
 1613               	.LVL222:
 1614 0450 0F91      		pop r16
 1615               	.LVL223:
 1616 0452 FF90      		pop r15
 1617               	.LVL224:
 1618 0454 EF90      		pop r14
 1619               	.LVL225:
 1620 0456 DF90      		pop r13
 1621               	.LVL226:
 1622 0458 CF90      		pop r12
 1623               	.LVL227:
 1624 045a BF90      		pop r11
 1625               	.LVL228:
 1626 045c AF90      		pop r10
 1627               	.LVL229:
 1628               	.LBB51:
 238:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1629               		.loc 1 238 0 discriminator 4
 1630 045e 0C94 0000 		jmp layer_and
 1631               	.LVL230:
 1632               	.L120:
 240:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1633               		.loc 1 240 0
 1634 0462 6C29      		or r22,r12
 1635               	.LVL231:
 1636 0464 7D29      		or r23,r13
 1637 0466 8E29      		or r24,r14
 1638 0468 9F29      		or r25,r15
 1639               	/* epilogue start */
 1640               	.LBE51:
 351:../../tmk_core/common/action.c **** 
 1641               		.loc 1 351 0
 1642 046a 0F90      		pop __tmp_reg__
 1643 046c 0F90      		pop __tmp_reg__
 1644 046e 0F90      		pop __tmp_reg__
 1645 0470 0F90      		pop __tmp_reg__
 1646 0472 0F90      		pop __tmp_reg__
 1647 0474 DF91      		pop r29
 1648 0476 CF91      		pop r28
 1649               	.LVL232:
 1650 0478 1F91      		pop r17
 1651               	.LVL233:
 1652 047a 0F91      		pop r16
 1653               	.LVL234:
 1654 047c FF90      		pop r15
 1655               	.LVL235:
 1656 047e EF90      		pop r14
 1657               	.LVL236:
 1658 0480 DF90      		pop r13
 1659               	.LVL237:
 1660 0482 CF90      		pop r12
 1661               	.LVL238:
 1662 0484 BF90      		pop r11
 1663               	.LVL239:
 1664 0486 AF90      		pop r10
 1665               	.LVL240:
 1666               	.LBB52:
 240:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1667               		.loc 1 240 0
 1668 0488 0C94 0000 		jmp layer_xor
 1669               	.LVL241:
 1670               	.L121:
 241:../../tmk_core/common/action.c ****                     }
 1671               		.loc 1 241 0
 1672 048c 0E94 0000 		call layer_and
 1673               	.LVL242:
 1674 0490 C701      		movw r24,r14
 1675 0492 B601      		movw r22,r12
 1676               	.L177:
 1677               	/* epilogue start */
 1678               	.LBE52:
 351:../../tmk_core/common/action.c **** 
 1679               		.loc 1 351 0
 1680 0494 0F90      		pop __tmp_reg__
 1681 0496 0F90      		pop __tmp_reg__
 1682 0498 0F90      		pop __tmp_reg__
 1683 049a 0F90      		pop __tmp_reg__
 1684 049c 0F90      		pop __tmp_reg__
 1685 049e DF91      		pop r29
 1686 04a0 CF91      		pop r28
 1687               	.LVL243:
 1688 04a2 1F91      		pop r17
 1689               	.LVL244:
 1690 04a4 0F91      		pop r16
 1691               	.LVL245:
 1692 04a6 FF90      		pop r15
 1693               	.LVL246:
 1694 04a8 EF90      		pop r14
 1695               	.LVL247:
 1696 04aa DF90      		pop r13
 1697               	.LVL248:
 1698 04ac CF90      		pop r12
 1699               	.LVL249:
 1700 04ae BF90      		pop r11
 1701               	.LVL250:
 1702 04b0 AF90      		pop r10
 1703               	.LVL251:
 1704               	.LBB53:
 241:../../tmk_core/common/action.c ****                     }
 1705               		.loc 1 241 0
 1706 04b2 0C94 0000 		jmp layer_or
 1707               	.LVL252:
 1708               	.L83:
 1709               	.LBE53:
 249:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 1710               		.loc 1 249 0
 1711 04b6 003F      		cpi r16,lo8(-16)
 1712 04b8 01F4      		brne .+2
 1713 04ba 00C0      		rjmp .L124
 1714 04bc 00F4      		brsh .L125
 1715 04be 80E4      		ldi r24,lo8(64)
 1716 04c0 800F      		add r24,r16
 1717 04c2 8032      		cpi r24,lo8(32)
 1718 04c4 00F0      		brlo .L167
 1719               	.L123:
 290:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1720               		.loc 1 290 0
 1721 04c6 FF20      		tst r15
 1722 04c8 01F4      		brne .+2
 1723 04ca 00C0      		rjmp .L140
 291:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1724               		.loc 1 291 0
 1725 04cc E110      		cpse r14,__zero_reg__
 1726 04ce 00C0      		rjmp .L172
 296:../../tmk_core/common/action.c ****                         }
 1727               		.loc 1 296 0
 1728 04d0 812F      		mov r24,r17
 1729 04d2 8F71      		andi r24,lo8(31)
 1730 04d4 00C0      		rjmp .L173
 1731               	.L125:
 249:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 1732               		.loc 1 249 0
 1733 04d6 023F      		cpi r16,lo8(-14)
 1734 04d8 01F4      		brne .+2
 1735 04da 00C0      		rjmp .L127
 1736 04dc 00F4      		brsh .+2
 1737 04de 00C0      		rjmp .L128
 1738 04e0 033F      		cpi r16,lo8(-13)
 1739 04e2 01F4      		brne .L123
 285:../../tmk_core/common/action.c ****                                     layer_clear();
 1740               		.loc 1 285 0
 1741 04e4 FF20      		tst r15
 1742 04e6 01F4      		brne .+2
 1743 04e8 00C0      		rjmp .L139
 285:../../tmk_core/common/action.c ****                                     layer_clear();
 1744               		.loc 1 285 0 is_stmt 0 discriminator 1
 1745 04ea 812F      		mov r24,r17
 1746 04ec 8F71      		andi r24,lo8(31)
 1747               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1748               		.loc 1 351 0 is_stmt 1 discriminator 1
 1749 04ee 0F90      		pop __tmp_reg__
 1750 04f0 0F90      		pop __tmp_reg__
 1751 04f2 0F90      		pop __tmp_reg__
 1752 04f4 0F90      		pop __tmp_reg__
 1753 04f6 0F90      		pop __tmp_reg__
 1754 04f8 DF91      		pop r29
 1755 04fa CF91      		pop r28
 1756               	.LVL253:
 1757 04fc 1F91      		pop r17
 1758               	.LVL254:
 1759 04fe 0F91      		pop r16
 1760               	.LVL255:
 1761 0500 FF90      		pop r15
 1762               	.LVL256:
 1763 0502 EF90      		pop r14
 1764               	.LVL257:
 1765 0504 DF90      		pop r13
 1766               	.LVL258:
 1767 0506 CF90      		pop r12
 1768               	.LVL259:
 1769 0508 BF90      		pop r11
 1770               	.LVL260:
 1771 050a AF90      		pop r10
 1772               	.LVL261:
 285:../../tmk_core/common/action.c ****                                     layer_clear();
 1773               		.loc 1 285 0 discriminator 1
 1774 050c 0C94 0000 		jmp layer_move
 1775               	.LVL262:
 1776               	.L167:
 249:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:
 1777               		.loc 1 249 0
 1778 0510 C02E      		mov r12,r16
 1779 0512 812F      		mov r24,r17
 1780 0514 8F71      		andi r24,lo8(31)
 1781 0516 102F      		mov r17,r16
 1782               	.LVL263:
 1783 0518 1071      		andi r17,lo8(16)
 252:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1784               		.loc 1 252 0
 1785 051a FF20      		tst r15
 1786 051c 01F0      		breq .L130
 253:../../tmk_core/common/action.c ****                         register_mods((action.layer_tap.code & 0x10) ?
 1787               		.loc 1 253 0
 1788 051e 0E94 0000 		call layer_on
 1789               	.LVL264:
 254:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1790               		.loc 1 254 0
 1791 0522 8C2D      		mov r24,r12
 1792 0524 8295      		swap r24
 1793 0526 807F      		andi r24,lo8(-16)
 1794 0528 1111      		cpse r17,__zero_reg__
 1795 052a 00C0      		rjmp .L168
 254:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1796               		.loc 1 254 0 is_stmt 0 discriminator 2
 1797 052c 802F      		mov r24,r16
 1798 052e 8F70      		andi r24,lo8(15)
 1799 0530 00C0      		rjmp .L168
 1800               	.L130:
 258:../../tmk_core/common/action.c ****                         unregister_mods((action.layer_tap.code & 0x10) ?
 1801               		.loc 1 258 0 is_stmt 1
 1802 0532 0E94 0000 		call layer_off
 1803               	.LVL265:
 259:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1804               		.loc 1 259 0
 1805 0536 8C2D      		mov r24,r12
 1806 0538 8295      		swap r24
 1807 053a 807F      		andi r24,lo8(-16)
 1808 053c 1111      		cpse r17,__zero_reg__
 1809 053e 00C0      		rjmp .L134
 259:../../tmk_core/common/action.c ****                                 (action.layer_tap.code & 0x0f) << 4 :
 1810               		.loc 1 259 0 is_stmt 0 discriminator 2
 1811 0540 802F      		mov r24,r16
 1812 0542 8F70      		andi r24,lo8(15)
 1813 0544 00C0      		rjmp .L134
 1814               	.LVL266:
 1815               	.L124:
 266:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1816               		.loc 1 266 0 is_stmt 1
 1817 0546 FF20      		tst r15
 1818 0548 01F0      		breq .L135
 267:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1819               		.loc 1 267 0
 1820 054a F4E0      		ldi r31,lo8(4)
 1821 054c FE15      		cp r31,r14
 1822 054e 00F4      		brsh .+2
 1823 0550 00C0      		rjmp .L72
 1824               	.L136:
 268:../../tmk_core/common/action.c ****                         }
 1825               		.loc 1 268 0
 1826 0552 812F      		mov r24,r17
 1827 0554 8F71      		andi r24,lo8(31)
 1828               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1829               		.loc 1 351 0
 1830 0556 0F90      		pop __tmp_reg__
 1831 0558 0F90      		pop __tmp_reg__
 1832 055a 0F90      		pop __tmp_reg__
 1833 055c 0F90      		pop __tmp_reg__
 1834 055e 0F90      		pop __tmp_reg__
 1835 0560 DF91      		pop r29
 1836 0562 CF91      		pop r28
 1837               	.LVL267:
 1838 0564 1F91      		pop r17
 1839               	.LVL268:
 1840 0566 0F91      		pop r16
 1841               	.LVL269:
 1842 0568 FF90      		pop r15
 1843               	.LVL270:
 1844 056a EF90      		pop r14
 1845               	.LVL271:
 1846 056c DF90      		pop r13
 1847               	.LVL272:
 1848 056e CF90      		pop r12
 1849               	.LVL273:
 1850 0570 BF90      		pop r11
 1851               	.LVL274:
 1852 0572 AF90      		pop r10
 1853               	.LVL275:
 268:../../tmk_core/common/action.c ****                         }
 1854               		.loc 1 268 0
 1855 0574 0C94 0000 		jmp layer_invert
 1856               	.LVL276:
 1857               	.L135:
 271:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1858               		.loc 1 271 0
 1859 0578 85E0      		ldi r24,lo8(5)
 1860 057a 8E15      		cp r24,r14
 1861 057c 00F4      		brsh .+2
 1862 057e 00C0      		rjmp .L72
 1863 0580 00C0      		rjmp .L136
 1864               	.L128:
 1865 0582 812F      		mov r24,r17
 1866 0584 8F71      		andi r24,lo8(31)
 277:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1867               		.loc 1 277 0
 1868 0586 FF20      		tst r15
 1869 0588 01F0      		breq .L174
 1870               	.L173:
 1871               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1872               		.loc 1 351 0
 1873 058a 0F90      		pop __tmp_reg__
 1874 058c 0F90      		pop __tmp_reg__
 1875 058e 0F90      		pop __tmp_reg__
 1876 0590 0F90      		pop __tmp_reg__
 1877 0592 0F90      		pop __tmp_reg__
 1878 0594 DF91      		pop r29
 1879 0596 CF91      		pop r28
 1880               	.LVL277:
 1881 0598 1F91      		pop r17
 1882               	.LVL278:
 1883 059a 0F91      		pop r16
 1884               	.LVL279:
 1885 059c FF90      		pop r15
 1886               	.LVL280:
 1887 059e EF90      		pop r14
 1888               	.LVL281:
 1889 05a0 DF90      		pop r13
 1890               	.LVL282:
 1891 05a2 CF90      		pop r12
 1892               	.LVL283:
 1893 05a4 BF90      		pop r11
 1894               	.LVL284:
 1895 05a6 AF90      		pop r10
 1896               	.LVL285:
 296:../../tmk_core/common/action.c ****                         }
 1897               		.loc 1 296 0
 1898 05a8 0C94 0000 		jmp layer_on
 1899               	.LVL286:
 1900               	.L127:
 1901 05ac 812F      		mov r24,r17
 1902 05ae 8F71      		andi r24,lo8(31)
 281:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1903               		.loc 1 281 0
 1904 05b0 FF20      		tst r15
 1905 05b2 01F0      		breq .L173
 1906               	.L174:
 1907               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1908               		.loc 1 351 0
 1909 05b4 0F90      		pop __tmp_reg__
 1910 05b6 0F90      		pop __tmp_reg__
 1911 05b8 0F90      		pop __tmp_reg__
 1912 05ba 0F90      		pop __tmp_reg__
 1913 05bc 0F90      		pop __tmp_reg__
 1914 05be DF91      		pop r29
 1915 05c0 CF91      		pop r28
 1916               	.LVL287:
 1917 05c2 1F91      		pop r17
 1918               	.LVL288:
 1919 05c4 0F91      		pop r16
 1920               	.LVL289:
 1921 05c6 FF90      		pop r15
 1922               	.LVL290:
 1923 05c8 EF90      		pop r14
 1924               	.LVL291:
 1925 05ca DF90      		pop r13
 1926               	.LVL292:
 1927 05cc CF90      		pop r12
 1928               	.LVL293:
 1929 05ce BF90      		pop r11
 1930               	.LVL294:
 1931 05d0 AF90      		pop r10
 1932               	.LVL295:
 304:../../tmk_core/common/action.c ****                         }
 1933               		.loc 1 304 0
 1934 05d2 0C94 0000 		jmp layer_off
 1935               	.LVL296:
 1936               	.L139:
 1937               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1938               		.loc 1 351 0
 1939 05d6 0F90      		pop __tmp_reg__
 1940 05d8 0F90      		pop __tmp_reg__
 1941 05da 0F90      		pop __tmp_reg__
 1942 05dc 0F90      		pop __tmp_reg__
 1943 05de 0F90      		pop __tmp_reg__
 1944 05e0 DF91      		pop r29
 1945 05e2 CF91      		pop r28
 1946               	.LVL297:
 1947 05e4 1F91      		pop r17
 1948               	.LVL298:
 1949 05e6 0F91      		pop r16
 1950               	.LVL299:
 1951 05e8 FF90      		pop r15
 1952               	.LVL300:
 1953 05ea EF90      		pop r14
 1954               	.LVL301:
 1955 05ec DF90      		pop r13
 1956               	.LVL302:
 1957 05ee CF90      		pop r12
 1958               	.LVL303:
 1959 05f0 BF90      		pop r11
 1960               	.LVL304:
 1961 05f2 AF90      		pop r10
 1962               	.LVL305:
 286:../../tmk_core/common/action.c ****                     break;
 1963               		.loc 1 286 0
 1964 05f4 0C94 0000 		jmp layer_clear
 1965               	.LVL306:
 1966               	.L140:
 299:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1967               		.loc 1 299 0
 1968 05f8 E110      		cpse r14,__zero_reg__
 1969 05fa 00C0      		rjmp .L175
 304:../../tmk_core/common/action.c ****                         }
 1970               		.loc 1 304 0
 1971 05fc 812F      		mov r24,r17
 1972 05fe 8F71      		andi r24,lo8(31)
 1973 0600 00C0      		rjmp .L174
 1974               	.LVL307:
 1975               	.L84:
 315:../../tmk_core/common/action.c ****             break;
 1976               		.loc 1 315 0
 1977 0602 412F      		mov r20,r17
 1978 0604 4F70      		andi r20,lo8(15)
 1979               	.LVL308:
 1980 0606 602F      		mov r22,r16
 1981 0608 C501      		movw r24,r10
 1982 060a 0E94 0000 		call action_get_macro
 1983               	.LVL309:
 1984               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 1985               		.loc 1 351 0
 1986 060e 0F90      		pop __tmp_reg__
 1987 0610 0F90      		pop __tmp_reg__
 1988 0612 0F90      		pop __tmp_reg__
 1989 0614 0F90      		pop __tmp_reg__
 1990 0616 0F90      		pop __tmp_reg__
 1991 0618 DF91      		pop r29
 1992 061a CF91      		pop r28
 1993               	.LVL310:
 1994 061c 1F91      		pop r17
 1995               	.LVL311:
 1996 061e 0F91      		pop r16
 1997               	.LVL312:
 1998 0620 FF90      		pop r15
 1999               	.LVL313:
 2000 0622 EF90      		pop r14
 2001               	.LVL314:
 2002 0624 DF90      		pop r13
 2003               	.LVL315:
 2004 0626 CF90      		pop r12
 2005               	.LVL316:
 2006 0628 BF90      		pop r11
 2007               	.LVL317:
 2008 062a AF90      		pop r10
 2009               	.LVL318:
 315:../../tmk_core/common/action.c ****             break;
 2010               		.loc 1 315 0
 2011 062c 0C94 0000 		jmp action_macro_play
 2012               	.LVL319:
 2013               	.L85:
 345:../../tmk_core/common/action.c ****             break;
 2014               		.loc 1 345 0
 2015 0630 412F      		mov r20,r17
 2016 0632 4F70      		andi r20,lo8(15)
 2017               	.LVL320:
 2018 0634 602F      		mov r22,r16
 2019 0636 C501      		movw r24,r10
 2020               	/* epilogue start */
 351:../../tmk_core/common/action.c **** 
 2021               		.loc 1 351 0
 2022 0638 0F90      		pop __tmp_reg__
 2023 063a 0F90      		pop __tmp_reg__
 2024 063c 0F90      		pop __tmp_reg__
 2025 063e 0F90      		pop __tmp_reg__
 2026 0640 0F90      		pop __tmp_reg__
 2027 0642 DF91      		pop r29
 2028 0644 CF91      		pop r28
 2029               	.LVL321:
 2030 0646 1F91      		pop r17
 2031               	.LVL322:
 2032 0648 0F91      		pop r16
 2033               	.LVL323:
 2034 064a FF90      		pop r15
 2035               	.LVL324:
 2036 064c EF90      		pop r14
 2037               	.LVL325:
 2038 064e DF90      		pop r13
 2039               	.LVL326:
 2040 0650 CF90      		pop r12
 2041               	.LVL327:
 2042 0652 BF90      		pop r11
 2043               	.LVL328:
 2044 0654 AF90      		pop r10
 2045               	.LVL329:
 345:../../tmk_core/common/action.c ****             break;
 2046               		.loc 1 345 0
 2047 0656 0C94 0000 		jmp action_function
 2048               	.LVL330:
 2049               		.cfi_endproc
 2050               	.LFE104:
 2052               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 2053               	.global	clear_keyboard_but_mods
 2055               	clear_keyboard_but_mods:
 2056               	.LFB110:
 510:../../tmk_core/common/action.c **** 
 511:../../tmk_core/common/action.c **** void clear_keyboard(void)
 512:../../tmk_core/common/action.c **** {
 513:../../tmk_core/common/action.c ****     clear_mods();
 514:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 515:../../tmk_core/common/action.c **** }
 516:../../tmk_core/common/action.c **** 
 517:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 518:../../tmk_core/common/action.c **** {
 2057               		.loc 1 518 0
 2058               		.cfi_startproc
 2059               	/* prologue: function */
 2060               	/* frame size = 0 */
 2061               	/* stack size = 0 */
 2062               	.L__stack_usage = 0
 519:../../tmk_core/common/action.c ****     clear_weak_mods();
 2063               		.loc 1 519 0
 2064 0000 0E94 0000 		call clear_weak_mods
 2065               	.LVL331:
 520:../../tmk_core/common/action.c ****     clear_keys();
 2066               		.loc 1 520 0
 2067 0004 0E94 0000 		call clear_keys
 2068               	.LVL332:
 521:../../tmk_core/common/action.c ****     send_keyboard_report();
 2069               		.loc 1 521 0
 2070 0008 0E94 0000 		call send_keyboard_report
 2071               	.LVL333:
 522:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 523:../../tmk_core/common/action.c ****     mousekey_clear();
 2072               		.loc 1 523 0
 2073 000c 0E94 0000 		call mousekey_clear
 2074               	.LVL334:
 524:../../tmk_core/common/action.c ****     mousekey_send();
 2075               		.loc 1 524 0
 2076 0010 0E94 0000 		call mousekey_send
 2077               	.LVL335:
 525:../../tmk_core/common/action.c **** #endif
 526:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 527:../../tmk_core/common/action.c ****     host_system_send(0);
 2078               		.loc 1 527 0
 2079 0014 90E0      		ldi r25,0
 2080 0016 80E0      		ldi r24,0
 2081 0018 0E94 0000 		call host_system_send
 2082               	.LVL336:
 528:../../tmk_core/common/action.c ****     host_consumer_send(0);
 2083               		.loc 1 528 0
 2084 001c 90E0      		ldi r25,0
 2085 001e 80E0      		ldi r24,0
 2086 0020 0C94 0000 		jmp host_consumer_send
 2087               	.LVL337:
 2088               		.cfi_endproc
 2089               	.LFE110:
 2091               		.section	.text.clear_keyboard,"ax",@progbits
 2092               	.global	clear_keyboard
 2094               	clear_keyboard:
 2095               	.LFB109:
 512:../../tmk_core/common/action.c ****     clear_mods();
 2096               		.loc 1 512 0
 2097               		.cfi_startproc
 2098               	/* prologue: function */
 2099               	/* frame size = 0 */
 2100               	/* stack size = 0 */
 2101               	.L__stack_usage = 0
 513:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2102               		.loc 1 513 0
 2103 0000 0E94 0000 		call clear_mods
 2104               	.LVL338:
 514:../../tmk_core/common/action.c **** }
 2105               		.loc 1 514 0
 2106 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2107               	.LVL339:
 2108               		.cfi_endproc
 2109               	.LFE109:
 2111               		.section	.text.is_tap_key,"ax",@progbits
 2112               	.global	is_tap_key
 2114               	is_tap_key:
 2115               	.LFB111:
 529:../../tmk_core/common/action.c **** #endif
 530:../../tmk_core/common/action.c **** }
 531:../../tmk_core/common/action.c **** 
 532:../../tmk_core/common/action.c **** bool is_tap_key(keyevent_t event)
 533:../../tmk_core/common/action.c **** {
 2116               		.loc 1 533 0
 2117               		.cfi_startproc
 2118 0000 1F93      		push r17
 2119               	.LCFI17:
 2120               		.cfi_def_cfa_offset 3
 2121               		.cfi_offset 17, -2
 2122 0002 CF93      		push r28
 2123               	.LCFI18:
 2124               		.cfi_def_cfa_offset 4
 2125               		.cfi_offset 28, -3
 2126 0004 DF93      		push r29
 2127               	.LCFI19:
 2128               		.cfi_def_cfa_offset 5
 2129               		.cfi_offset 29, -4
 2130 0006 00D0      		rcall .
 2131 0008 00D0      		rcall .
 2132 000a 1F92      		push __zero_reg__
 2133               	.LCFI20:
 2134               		.cfi_def_cfa_offset 10
 2135 000c CDB7      		in r28,__SP_L__
 2136 000e DEB7      		in r29,__SP_H__
 2137               	.LCFI21:
 2138               		.cfi_def_cfa_register 28
 2139               	/* prologue: function */
 2140               	/* frame size = 5 */
 2141               	/* stack size = 8 */
 2142               	.L__stack_usage = 8
 2143 0010 942F      		mov r25,r20
 2144 0012 4983      		std Y+1,r20
 2145 0014 252F      		mov r18,r21
 2146 0016 5A83      		std Y+2,r21
 2147 0018 6B83      		std Y+3,r22
 2148 001a 7C83      		std Y+4,r23
 2149 001c 8D83      		std Y+5,r24
 2150               	.LBB56:
 2151               	.LBB57:
 2152               		.loc 2 49 0
 2153 001e 4C81      		ldd r20,Y+4
 2154 0020 5D81      		ldd r21,Y+5
 2155 0022 81E0      		ldi r24,lo8(1)
 2156 0024 452B      		or r20,r21
 2157 0026 01F0      		breq .L184
 2158 0028 2F3F      		cpi r18,lo8(-1)
 2159 002a 01F4      		brne .L195
 2160 002c 81E0      		ldi r24,lo8(1)
 2161 002e 9F3F      		cpi r25,lo8(-1)
 2162 0030 01F0      		breq .L184
 2163               	.L195:
 2164 0032 80E0      		ldi r24,0
 2165               	.L184:
 2166               	.LBE57:
 2167               	.LBE56:
 534:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return false; }
 2168               		.loc 1 534 0
 2169 0034 182F      		mov r17,r24
 2170 0036 1170      		andi r17,lo8(1)
 2171 0038 80FD      		sbrc r24,0
 2172 003a 00C0      		rjmp .L196
 535:../../tmk_core/common/action.c **** 
 536:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event);
 2173               		.loc 1 536 0
 2174 003c 4981      		ldd r20,Y+1
 2175 003e 5A81      		ldd r21,Y+2
 2176 0040 6B81      		ldd r22,Y+3
 2177 0042 7C81      		ldd r23,Y+4
 2178 0044 8D81      		ldd r24,Y+5
 2179 0046 0E94 0000 		call layer_switch_get_action
 2180               	.LVL340:
 537:../../tmk_core/common/action.c **** 
 538:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 2181               		.loc 1 538 0
 2182 004a 292F      		mov r18,r25
 2183 004c 2295      		swap r18
 2184 004e 2F70      		andi r18,lo8(15)
 2185 0050 2C30      		cpi r18,lo8(12)
 2186 0052 00F4      		brsh .L187
 2187 0054 2A30      		cpi r18,lo8(10)
 2188 0056 00F4      		brsh .L188
 2189 0058 2250      		subi r18,lo8(-(-2))
 2190 005a 2230      		cpi r18,lo8(2)
 2191 005c 00F0      		brlo .L211
 2192               	.LVL341:
 2193               	.L183:
 539:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 540:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 541:../../tmk_core/common/action.c ****             switch (action.key.code) {
 542:../../tmk_core/common/action.c ****                 case MODS_ONESHOT:
 543:../../tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 544:../../tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:                 // tap key
 545:../../tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:              // tap key
 546:../../tmk_core/common/action.c ****                     return true;
 547:../../tmk_core/common/action.c ****             }
 548:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 549:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 550:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 551:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:         // with modifiers
 552:../../tmk_core/common/action.c ****                     return false;
 553:../../tmk_core/common/action.c ****                 case KC_A ... KC_EXSEL:     // tap key
 554:../../tmk_core/common/action.c ****                 case KC_LCTRL ... KC_RGUI:  // tap key
 555:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 556:../../tmk_core/common/action.c ****                     return true;
 557:../../tmk_core/common/action.c ****             }
 558:../../tmk_core/common/action.c ****             return false;
 559:../../tmk_core/common/action.c ****         case ACT_MACRO:
 560:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 561:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 562:../../tmk_core/common/action.c ****             return false;
 563:../../tmk_core/common/action.c ****     }
 564:../../tmk_core/common/action.c ****     return false;
 565:../../tmk_core/common/action.c **** }
 2194               		.loc 1 565 0
 2195 005e 812F      		mov r24,r17
 2196               	.LVL342:
 2197               	/* epilogue start */
 2198 0060 0F90      		pop __tmp_reg__
 2199 0062 0F90      		pop __tmp_reg__
 2200 0064 0F90      		pop __tmp_reg__
 2201 0066 0F90      		pop __tmp_reg__
 2202 0068 0F90      		pop __tmp_reg__
 2203 006a DF91      		pop r29
 2204 006c CF91      		pop r28
 2205 006e 1F91      		pop r17
 2206 0070 0895      		ret
 2207               	.LVL343:
 2208               	.L187:
 538:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2209               		.loc 1 538 0
 2210 0072 2C30      		cpi r18,lo8(12)
 2211 0074 01F0      		breq .L190
 2212 0076 2F30      		cpi r18,lo8(15)
 2213 0078 01F4      		brne .L183
 2214               	.L190:
 561:../../tmk_core/common/action.c ****             return false;
 2215               		.loc 1 561 0
 2216 007a 93FB      		bst r25,3
 2217 007c 1127      		clr r17
 2218 007e 10F9      		bld r17,0
 2219 0080 00C0      		rjmp .L183
 2220               	.L211:
 541:../../tmk_core/common/action.c ****                 case MODS_ONESHOT:
 2221               		.loc 1 541 0
 2222 0082 853A      		cpi r24,lo8(-91)
 2223 0084 00F4      		brsh .L191
 2224 0086 8430      		cpi r24,lo8(4)
 2225 0088 00F4      		brsh .L198
 2226 008a 8230      		cpi r24,lo8(2)
 2227 008c 00F4      		brsh .L188
 2228               	.LVL344:
 2229               	.L198:
 556:../../tmk_core/common/action.c ****             }
 2230               		.loc 1 556 0
 2231 008e 11E0      		ldi r17,lo8(1)
 2232 0090 00C0      		rjmp .L183
 2233               	.LVL345:
 2234               	.L191:
 541:../../tmk_core/common/action.c ****                 case MODS_ONESHOT:
 2235               		.loc 1 541 0
 2236 0092 90E2      		ldi r25,lo8(32)
 2237               	.LVL346:
 2238 0094 980F      		add r25,r24
 2239 0096 9830      		cpi r25,lo8(8)
 2240 0098 00F0      		brlo .L198
 2241               	.LVL347:
 2242               	.L188:
 550:../../tmk_core/common/action.c ****                 case 0xc0 ... 0xdf:         // with modifiers
 2243               		.loc 1 550 0
 2244 009a 883E      		cpi r24,lo8(-24)
 2245 009c 00F4      		brsh .L193
 2246 009e 803E      		cpi r24,lo8(-32)
 2247 00a0 00F4      		brsh .L198
 2248 00a2 8450      		subi r24,lo8(-(-4))
 2249               	.LVL348:
 2250 00a4 813A      		cpi r24,lo8(-95)
 2251 00a6 00F4      		brsh .L183
 2252 00a8 00C0      		rjmp .L198
 2253               	.LVL349:
 2254               	.L193:
 2255 00aa 803F      		cpi r24,lo8(-16)
 2256 00ac 01F4      		brne .L183
 2257 00ae 00C0      		rjmp .L198
 2258               	.LVL350:
 2259               	.L196:
 534:../../tmk_core/common/action.c **** 
 2260               		.loc 1 534 0
 2261 00b0 10E0      		ldi r17,0
 2262 00b2 00C0      		rjmp .L183
 2263               		.cfi_endproc
 2264               	.LFE111:
 2266               		.section	.text.debug_event,"ax",@progbits
 2267               	.global	debug_event
 2269               	debug_event:
 2270               	.LFB112:
 566:../../tmk_core/common/action.c **** 
 567:../../tmk_core/common/action.c **** 
 568:../../tmk_core/common/action.c **** /*
 569:../../tmk_core/common/action.c ****  * debug print
 570:../../tmk_core/common/action.c ****  */
 571:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 572:../../tmk_core/common/action.c **** {
 2271               		.loc 1 572 0
 2272               		.cfi_startproc
 2273 0000 CF93      		push r28
 2274               	.LCFI22:
 2275               		.cfi_def_cfa_offset 3
 2276               		.cfi_offset 28, -2
 2277 0002 DF93      		push r29
 2278               	.LCFI23:
 2279               		.cfi_def_cfa_offset 4
 2280               		.cfi_offset 29, -3
 2281 0004 00D0      		rcall .
 2282 0006 00D0      		rcall .
 2283 0008 1F92      		push __zero_reg__
 2284               	.LCFI24:
 2285               		.cfi_def_cfa_offset 9
 2286 000a CDB7      		in r28,__SP_L__
 2287 000c DEB7      		in r29,__SP_H__
 2288               	.LCFI25:
 2289               		.cfi_def_cfa_register 28
 2290               	/* prologue: function */
 2291               	/* frame size = 5 */
 2292               	/* stack size = 7 */
 2293               	.L__stack_usage = 7
 2294               	/* epilogue start */
 573:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 574:../../tmk_core/common/action.c **** }
 2295               		.loc 1 574 0
 2296 000e 0F90      		pop __tmp_reg__
 2297 0010 0F90      		pop __tmp_reg__
 2298 0012 0F90      		pop __tmp_reg__
 2299 0014 0F90      		pop __tmp_reg__
 2300 0016 0F90      		pop __tmp_reg__
 2301 0018 DF91      		pop r29
 2302 001a CF91      		pop r28
 2303 001c 0895      		ret
 2304               		.cfi_endproc
 2305               	.LFE112:
 2307               		.section	.text.debug_record,"ax",@progbits
 2308               	.global	debug_record
 2310               	debug_record:
 2311               	.LFB113:
 575:../../tmk_core/common/action.c **** 
 576:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 577:../../tmk_core/common/action.c **** {
 2312               		.loc 1 577 0
 2313               		.cfi_startproc
 2314 0000 CF93      		push r28
 2315               	.LCFI26:
 2316               		.cfi_def_cfa_offset 3
 2317               		.cfi_offset 28, -2
 2318 0002 DF93      		push r29
 2319               	.LCFI27:
 2320               		.cfi_def_cfa_offset 4
 2321               		.cfi_offset 29, -3
 2322 0004 00D0      		rcall .
 2323 0006 00D0      		rcall .
 2324 0008 00D0      		rcall .
 2325               	.LCFI28:
 2326               		.cfi_def_cfa_offset 10
 2327 000a CDB7      		in r28,__SP_L__
 2328 000c DEB7      		in r29,__SP_H__
 2329               	.LCFI29:
 2330               		.cfi_def_cfa_register 28
 2331               	/* prologue: function */
 2332               	/* frame size = 6 */
 2333               	/* stack size = 8 */
 2334               	.L__stack_usage = 8
 2335               	/* epilogue start */
 578:../../tmk_core/common/action.c ****     debug_event(record.event);
 579:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 580:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 581:../../tmk_core/common/action.c **** #endif
 582:../../tmk_core/common/action.c **** }
 2336               		.loc 1 582 0
 2337 000e 2696      		adiw r28,6
 2338 0010 0FB6      		in __tmp_reg__,__SREG__
 2339 0012 F894      		cli
 2340 0014 DEBF      		out __SP_H__,r29
 2341 0016 0FBE      		out __SREG__,__tmp_reg__
 2342 0018 CDBF      		out __SP_L__,r28
 2343 001a DF91      		pop r29
 2344 001c CF91      		pop r28
 2345 001e 0895      		ret
 2346               		.cfi_endproc
 2347               	.LFE113:
 2349               		.section	.text.debug_action,"ax",@progbits
 2350               	.global	debug_action
 2352               	debug_action:
 2353               	.LFB114:
 583:../../tmk_core/common/action.c **** 
 584:../../tmk_core/common/action.c **** void debug_action(action_t action)
 585:../../tmk_core/common/action.c **** {
 2354               		.loc 1 585 0
 2355               		.cfi_startproc
 2356               	.LVL351:
 2357               	/* prologue: function */
 2358               	/* frame size = 0 */
 2359               	/* stack size = 0 */
 2360               	.L__stack_usage = 0
 2361               	/* epilogue start */
 586:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 587:../../tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 588:../../tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 589:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 590:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 591:../../tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 592:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 593:../../tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 594:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 595:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 596:../../tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 597:../../tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 598:../../tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 599:../../tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 600:../../tmk_core/common/action.c ****     }
 601:../../tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 602:../../tmk_core/common/action.c **** }
 2362               		.loc 1 602 0
 2363 0000 0895      		ret
 2364               		.cfi_endproc
 2365               	.LFE114:
 2367               		.text
 2368               	.Letext0:
 2369               		.file 4 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdint.h"
 2370               		.file 5 "../../tmk_core/common/keycode.h"
 2371               		.file 6 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 2372               		.file 7 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 2373               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2374               		.file 9 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 2375               		.file 10 "/usr/local/Cellar/avr-gcc/7.2.0/avr/include/stdio.h"
 2376               		.file 11 "../../tmk_core/common/report.h"
 2377               		.file 12 "../../tmk_core/common/host.h"
 2378               		.file 13 "../../tmk_core/common/mousekey.h"
 2379               		.file 14 "../../tmk_core/common/command.h"
 2380               		.file 15 "../../tmk_core/common/action_code.h"
 2381               		.file 16 "../../tmk_core/common/action.h"
 2382               		.file 17 "../../tmk_core/common/action_layer.h"
 2383               		.file 18 "../../tmk_core/common/action_util.h"
 2384               		.file 19 "../../tmk_core/common/avr/xprintf.h"
 2385               		.file 20 "../../tmk_core/common/debug.h"
 2386               		.file 21 "../../tmk_core/common/action_macro.h"
 2387               		.file 22 "../../tmk_core/common/hook.h"
 2388               		.file 23 "../../tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:4      *ABS*:000000000000003f __SREG__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:121    .text.register_code:0000000000000000 register_code
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:458    .text.unregister_code:0000000000000000 unregister_code
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:641    .text.register_mods:0000000000000000 register_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:669    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:697    .text.process_action:0000000000000000 process_action
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2055   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2094   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2114   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2269   .text.debug_event:0000000000000000 debug_event
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2310   .text.debug_record:0000000000000000 debug_record
/var/folders/0t/kvl6kk9d4s327fss_3zj34vc3_bfct/T//ccvxtS78.s:2352   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hook_matrix_change
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_move
layer_on
layer_off
layer_invert
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
