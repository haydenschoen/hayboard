
haymakr_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00005844  000058d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  0080013a  0080013a  00005912  2**0
                  ALLOC
  3 .noinit       00000004  00800254  00800254  00005912  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005914  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000626c  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006280  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000009f0  00000000  00000000  000062c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000134cd  00000000  00000000  00006cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004ee8  00000000  00000000  0001a17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008ee3  00000000  00000000  0001f065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001aec  00000000  00000000  00027f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000042f2  00000000  00000000  00029a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000960b  00000000  00000000  0002dd26  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00037331  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__ctors_end>
       4:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
       8:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
       c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      10:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      14:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      18:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      1c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      20:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      24:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      28:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__vector_10>
      2c:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_11>
      30:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__vector_12>
      34:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      38:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      3c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      40:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      44:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      48:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      4c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      50:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      54:	0c 94 be 1f 	jmp	0x3f7c	; 0x3f7c <__vector_21>
      58:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      5c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      60:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      64:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      68:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      6c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      70:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      74:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      78:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      7c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      80:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      84:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      88:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      8c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      90:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      94:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      98:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      9c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      a0:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      a4:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>
      a8:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	01 e1       	ldi	r16, 0x11	; 17
      ae:	01 16       	cp	r0, r17
      b0:	02 16       	cp	r0, r18
      b2:	02 e1       	ldi	r16, 0x12	; 18
      b4:	01 18       	sub	r0, r1
      b6:	02 18       	sub	r0, r2
      b8:	01 0f       	add	r16, r17
      ba:	02 0f       	add	r16, r18
      bc:	01 17       	cp	r16, r17
      be:	02 17       	cp	r16, r18
      c0:	01 21       	and	r16, r1
      c2:	02 21       	and	r16, r2
      c4:	01 11       	cpse	r16, r1
      c6:	02 11       	cpse	r16, r2
      c8:	01 e1       	ldi	r16, 0x11	; 17
      ca:	01 12       	cpse	r0, r17
      cc:	02 12       	cpse	r0, r18
      ce:	02 e1       	ldi	r16, 0x12	; 18
      d0:	01 09       	sbc	r16, r1
      d2:	02 09       	sbc	r16, r2
      d4:	01 e1       	ldi	r16, 0x11	; 17
      d6:	01 16       	cp	r0, r17
      d8:	02 16       	cp	r0, r18
      da:	02 e1       	ldi	r16, 0x12	; 18
      dc:	01 1a       	sub	r0, r17
      de:	02 1a       	sub	r0, r18
      e0:	01 08       	sbc	r0, r1
      e2:	02 08       	sbc	r0, r2
      e4:	01 08       	sbc	r0, r1
      e6:	02 08       	sbc	r0, r2
      e8:	01 17       	cp	r16, r17
      ea:	02 17       	cp	r16, r18
      ec:	01 11       	cpse	r16, r1
      ee:	02 11       	cpse	r16, r2
      f0:	01 08       	sbc	r0, r1
      f2:	02 08       	sbc	r0, r2
      f4:	01 16       	cp	r0, r17
      f6:	02 16       	cp	r0, r18
      f8:	01 16       	cp	r0, r17
      fa:	02 16       	cp	r0, r18
      fc:	Address 0x00000000000000fc is out of bounds.


000000fd <__m.4735>:
      fd:	01 e1 01 0c 02 0c 02 e1 01 10 02 10 01 21 02 21     .............!.!
     10d:	01 0e 02 0e 01 11 02 11 01 0c 02 0c 01 09 02 09     ................
     11d:	01 20 02 20 01 e1 01 06 02 06 02 e1 01 18 02 18     . . ............
     12d:	01 24 02 24 01 e1 01 06 02 06 02 e1 01 18 02 18     .$.$............
     13d:	01 24 02 24 00                                      .$.$.

00000142 <__m.4732>:
     142:	01 e1 01 16 02 16 02 e1 01 18 02 18 01 13 02 13     ................
     152:	01 08 02 08 01 15 02 15 01 e1 01 13 02 13 02 e1     ................
     162:	01 27 02 27 01 1a 02 1a 01 08 02 08 01 15 02 15     .'.'............
     172:	01 e1 01 10 02 10 02 e1 01 04 02 04 01 06 02 06     ................
     182:	01 0b 02 0b 01 0c 02 0c 01 11 02 11 01 08 02 08     ................
     192:	01 15 02 15 01 1c 02 1c 00                          .........

0000019b <__m.4729>:
     19b:	01 e1 01 07 02 07 02 e1 01 08 02 08 01 0f 02 0f     ................
     1ab:	01 e1 01 05 02 05 02 e1 01 04 02 04 01 05 02 05     ................
     1bb:	01 18 02 18 01 1e 02 1e 00                          .........

000001c4 <fn_actions>:
     1c4:	f1 a1 f1 a2 2d 08 2e 08 20 0a 21 0b 2f 08 30 08     ....-... .!./.0.
     1d4:	26 02 27 02 2f 02 30 02 31 02 2d 02 2e 02 f1 a3     &.'./.0.1.-.....
     1e4:	00 c0 01 c0 02 c0 03 c0 50 0a 50 06 4f 06 4f 0a     ........P.P.O.O.

000001f4 <keymaps>:
     1f4:	35 1e 1f 20 21 22 00 00 00 23 24 25 26 27 2a 2b     5.. !"...#$%&'*+
     204:	14 1a 08 15 17 00 00 00 1c 18 0c 12 13 2d 29 04     .............-).
     214:	16 07 09 0a c2 00 c3 0b 0d 0e 0f 33 34 e1 1d 1b     ...........34...
     224:	06 19 05 00 52 00 11 10 36 37 38 28 b0 e0 e2 e3     ....R...678(....
     234:	c0 2c 50 51 4f 2c c1 e7 e6 e4 2e 01 3a 3b 3c 3d     .,PQO,......:;<=
     244:	3e 00 00 00 3f 40 41 42 43 01 01 01 01 01 f9 01     >...?@ABC.......
     254:	00 00 00 01 01 01 c8 c9 01 01 01 d4 d5 d6 d7 c4     ................
     264:	00 c5 01 2d 2e ca cb 31 01 01 01 01 fa 01 00 a9     ...-...1........
     274:	00 01 cd ce 2f 30 cc 01 a7 01 01 01 01 ac aa ab     ..../0..........
     284:	01 cf 01 01 01 01 01 01 01 01 01 01 00 00 00 01     ................
     294:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 01 24     ...............$
     2a4:	25 26 54 01 01 01 01 01 01 01 c6 00 c7 01 21 22     %&T...........!"
     2b4:	23 55 01 01 01 01 01 01 01 00 a9 00 01 1e 1f 20     #U............. 
     2c4:	56 67 01 01 01 01 cf 01 ac aa ab 01 01 27 63 57     Vg...........'cW
     2d4:	58 01 01 01 01 01 01 00 00 00 01 01 01 01 01 01     X...............
     2e4:	01 d0 d1 d2 d3 01 00 00 00 01 01 01 01 01 01 01     ................
     2f4:	01 01 01 01 01 01 00 01 01 01 01 01 01 01 01 01     ................
     304:	01 01 01 01 00 01 00 01 01 01 01 01 01 01 01 01     ................
     314:	01 01 01 01 01 01 01 01 01 01 01 01                 ............

00000320 <__c.1891>:
     320:	0a 00                                               ..

00000322 <__c.1889>:
     322:	25 30 32 58 00                                      %02X.

00000327 <__c.1887>:
     327:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000331 <__c.4940>:
     331:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     341:	00                                                  .

00000342 <__c.4938>:
     342:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     352:	00                                                  .

00000353 <__c.4933>:
     353:	0d 0a 69 6e 69 74 0a 00                             ..init..

0000035b <__c.4827>:
     35b:	5b 44 5d 00                                         [D].

0000035f <__c.4822>:
     35f:	5b 43 5d 00                                         [C].

00000363 <ProductString>:
     363:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

0000036f <ManufacturerString>:
     36f:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     37f:	6b 00 00 00                                         k...

00000383 <LanguageString>:
     383:	04 03 09 04                                         ....

00000387 <ConfigurationDescriptor>:
     387:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     397:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     3a7:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     3b7:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     3c7:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     3d7:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     3e7:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     3f7:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     407:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

00000414 <DeviceDescriptor>:
     414:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     424:	00 01                                               ..

00000426 <NKROReport>:
     426:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     436:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     446:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     456:	25 01 95 f8 75 01 81 02 c0                          %...u....

0000045f <ConsoleReport>:
     45f:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     46f:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     47f:	02 c0                                               ..

00000481 <ExtrakeyReport>:
     481:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     491:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     4a1:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     4b1:	10 95 01 81 00 c0                                   ......

000004b7 <MouseReport>:
     4b7:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     4c7:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     4d7:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     4e7:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     4f7:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000504 <KeyboardReport>:
     504:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     514:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     524:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     534:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000544 <__c.4546>:
     544:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000554 <__c.4541>:
     554:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000562 <__c.4533>:
     562:	0a 00                                               ..

00000564 <__c.4528>:
     564:	25 30 32 58 20 00                                   %02X .

0000056a <__c.4525>:
     56a:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000575 <__c.4888>:
     575:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000580 <__c.1747>:
     580:	25 30 32 58 3a 20 25 30 31 36 62 25 73 0a 00        %02X: %016b%s..

0000058f <__c.1744>:
     58f:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
     59f:	43 44 45 46 0a 00                                   CDEF..

000005a5 <__c.4673>:
     5a5:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     5b5:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000005c3 <__c.4668>:
     5c3:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     5d3:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005e1 <__c.4840>:
     5e1:	64 6f 6e 65 2e 0a 00                                done...

000005e8 <__c.4834>:
     5e8:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     5f8:	2e 2e 2e 20 00                                      ... .

000005fd <__c.4605>:
     5fd:	29 0a 00                                            )..

00000600 <__c.4603>:
     600:	25 75 00                                            %u.

00000603 <__c.4601>:
     603:	2f 00                                               /.

00000605 <__c.4599>:
     605:	25 75 00                                            %u.

00000608 <__c.4597>:
     608:	5d 28 00                                            ](.

0000060b <__c.4595>:
     60b:	25 64 00                                            %d.

0000060e <__c.4593>:
     60e:	20 00                                                .

00000610 <__c.4591>:
     610:	25 64 00                                            %d.

00000613 <__c.4589>:
     613:	20 00                                                .

00000615 <__c.4587>:
     615:	25 64 00                                            %d.

00000618 <__c.4585>:
     618:	20 00                                                .

0000061a <__c.4583>:
     61a:	25 64 00                                            %d.

0000061d <__c.4581>:
     61d:	7c 00                                               |.

0000061f <__c.4579>:
     61f:	25 30 32 58 00                                      %02X.

00000624 <__c.4577>:
     624:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     634:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     644:	20 5b 00                                             [.

00000647 <__c.5213>:
     647:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     657:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000662 <__c.5210>:
     662:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     672:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000067b <__c.5207>:
     67b:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     68b:	20 25 64 0a 00                                       %d..

00000690 <__c.5204>:
     690:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     6a0:	64 0a 00                                            d..

000006a3 <__c.5201>:
     6a3:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     6b3:	0a 00                                               ..

000006b5 <__c.5197>:
     6b5:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000006c4 <__c.5190>:
     6c4:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     6d4:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000006df <__c.5187>:
     6df:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     6ef:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000006f8 <__c.5184>:
     6f8:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     708:	20 25 64 0a 00                                       %d..

0000070d <__c.5181>:
     70d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     71d:	64 0a 00                                            d..

00000720 <__c.5178>:
     720:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     730:	0a 00                                               ..

00000732 <__c.5174>:
     732:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000741 <__c.5167>:
     741:	0a 00                                               ..

00000743 <__c.5165>:
     743:	25 75 00                                            %u.

00000746 <__c.5163>:
     746:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     756:	5f 6d 61 78 3a 20 00                                _max: .

0000075d <__c.5161>:
     75d:	0a 00                                               ..

0000075f <__c.5159>:
     75f:	25 75 00                                            %u.

00000762 <__c.5157>:
     762:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     772:	65 64 3a 20 00                                      ed: .

00000777 <__c.5155>:
     777:	0a 00                                               ..

00000779 <__c.5153>:
     779:	25 75 00                                            %u.

0000077c <__c.5151>:
     77c:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     78c:	00                                                  .

0000078d <__c.5149>:
     78d:	0a 00                                               ..

0000078f <__c.5147>:
     78f:	25 75 00                                            %u.

00000792 <__c.5145>:
     792:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000007a1 <__c.5143>:
     7a1:	0a 00                                               ..

000007a3 <__c.5141>:
     7a3:	25 75 00                                            %u.

000007a6 <__c.5139>:
     7a6:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     7b6:	20 00                                                .

000007b8 <__c.5137>:
     7b8:	0a 00                                               ..

000007ba <__c.5135>:
     7ba:	25 75 00                                            %u.

000007bd <__c.5133>:
     7bd:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     7cd:	20 00                                                .

000007cf <__c.5131>:
     7cf:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000007dd <__c.5251>:
     7dd:	4d 3e 00                                            M>.

000007e0 <__c.5249>:
     7e0:	4d 25 64 3e 20 00                                   M%d> .

000007e6 <__c.5247>:
     7e6:	3f 00                                               ?.

000007e8 <__c.5244>:
     7e8:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000007f5 <__c.5230>:
     7f5:	43 3e 20 00                                         C> .

000007f9 <__c.5220>:
     7f9:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     809:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     819:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     829:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     839:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000847 <__c.5218>:
     847:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     857:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     867:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     877:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     887:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     897:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     8a7:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     8b7:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     8c7:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     8d7:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     8e7:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     8f7:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     907:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     917:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     927:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     937:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000942 <__c.5123>:
     942:	3f 00                                               ?.

00000944 <__c.5120>:
     944:	4d 3e 20 00                                         M> .

00000948 <__c.5125>:
     948:	43 3e 20 00                                         C> .

0000094c <__c.5269>:
     94c:	4c 25 64 0a 00                                      L%d..

00000951 <__c.5109>:
     951:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     961:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     971:	73 65 6b 65 79 0a 00                                sekey..

00000978 <__c.4934>:
     978:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     988:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     998:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9a8:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9b8:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9c8:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9d8:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     9e8:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     9f8:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a08:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a18:	4b 52 4f 0a 00                                      KRO..

00000a1d <__c.5029>:
     a1d:	0a 00                                               ..

00000a1f <__c.5027>:
     a1f:	25 75 00                                            %u.

00000a22 <__c.5025>:
     a22:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a2a <__c.5023>:
     a2a:	0a 00                                               ..

00000a2c <__c.5021>:
     a2c:	25 75 00                                            %u.

00000a2f <__c.5019>:
     a2f:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a3f:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a4b <__c.5017>:
     a4b:	0a 00                                               ..

00000a4d <__c.5015>:
     a4d:	25 75 00                                            %u.

00000a50 <__c.5013>:
     a50:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a60:	20 00                                                .

00000a62 <__c.5011>:
     a62:	0a 00                                               ..

00000a64 <__c.5009>:
     a64:	25 75 00                                            %u.

00000a67 <__c.5007>:
     a67:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000a71 <__c.5005>:
     a71:	0a 00                                               ..

00000a73 <__c.5003>:
     a73:	25 75 00                                            %u.

00000a76 <__c.5001>:
     a76:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     a86:	20 00                                                .

00000a88 <__c.4999>:
     a88:	0a 00                                               ..

00000a8a <__c.4997>:
     a8a:	25 75 00                                            %u.

00000a8d <__c.4995>:
     a8d:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     a9d:	20 00                                                .

00000a9f <__c.4993>:
     a9f:	0a 00                                               ..

00000aa1 <__c.4991>:
     aa1:	25 75 00                                            %u.

00000aa4 <__c.4989>:
     aa4:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     ab4:	74 72 6f 6c 3a 20 00                                trol: .

00000abb <__c.4987>:
     abb:	0a 00                                               ..

00000abd <__c.4985>:
     abd:	25 75 00                                            %u.

00000ac0 <__c.4983>:
     ac0:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     ad0:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000ad9 <__c.4981>:
     ad9:	0a 00                                               ..

00000adb <__c.4979>:
     adb:	25 30 32 58 00                                      %02X.

00000ae0 <__c.4977>:
     ae0:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     af0:	77 3a 20 00                                         w: .

00000af4 <__c.4974>:
     af4:	0a 00                                               ..

00000af6 <__c.4972>:
     af6:	25 75 00                                            %u.

00000af9 <__c.4970>:
     af9:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000b02 <__c.4968>:
     b02:	0a 00                                               ..

00000b04 <__c.4966>:
     b04:	25 75 00                                            %u.

00000b07 <__c.4964>:
     b07:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000b13 <__c.4962>:
     b13:	0a 00                                               ..

00000b15 <__c.4960>:
     b15:	25 75 00                                            %u.

00000b18 <__c.4958>:
     b18:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000b22 <__c.4956>:
     b22:	0a 00                                               ..

00000b24 <__c.4954>:
     b24:	25 75 00                                            %u.

00000b27 <__c.4952>:
     b27:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b31 <__c.4950>:
     b31:	0a 00                                               ..

00000b33 <__c.4948>:
     b33:	25 30 32 58 00                                      %02X.

00000b38 <__c.4946>:
     b38:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     b48:	3a 20 00                                            : .

00000b4b <__c.4943>:
     b4b:	0a 00                                               ..

00000b4d <__c.4941>:
     b4d:	25 75 00                                            %u.

00000b50 <__c.4939>:
     b50:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000b60 <__c.5104>:
     b60:	3f 00                                               ?.

00000b62 <__c.5095>:
     b62:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000b6d <__c.5093>:
     b6d:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000b77 <__c.5090>:
     b77:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     b87:	25 30 34 6c 58 0a 00                                %04lX..

00000b8e <__c.5088>:
     b8e:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     b9e:	58 0a 00                                            X..

00000ba1 <__c.5086>:
     ba1:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     bb1:	58 0a 00                                            X..

00000bb4 <__c.5084>:
     bb4:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     bc4:	6c 3a 20 25 58 0a 00                                l: %X..

00000bcb <__c.5082>:
     bcb:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     bdb:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000be5 <__c.5080>:
     be5:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000bf3 <__c.5077>:
     bf3:	47 43 43 3a 20 37 2e 32 2e 30 20 41 56 52 2d 4c     GCC: 7.2.0 AVR-L
     c03:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     c13:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000c1e <__c.5075>:
     c1e:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     c2e:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     c3e:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     c4e:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     c5e:	30 39 36 0a 00                                      096..

00000c63 <__c.5073>:
     c63:	42 55 49 4c 44 3a 20 30 64 64 62 31 31 38 20 28     BUILD: 0ddb118 (
     c73:	31 37 3a 30 36 3a 35 30 20 4a 61 6e 20 20 35 20     17:06:50 Jan  5 
     c83:	32 30 31 38 29 0a 00                                2018)..

00000c8a <__c.5071>:
     c8a:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     c9a:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     caa:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     cba:	30 30 31 0a 00                                      001..

00000cbf <__c.5069>:
     cbf:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     ccf:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     cdf:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000ce8 <__c.5067>:
     ce8:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000cf7 <__c.5064>:
     cf7:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000d04 <__c.5062>:
     d04:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000d10 <__c.5059>:
     d10:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000d20 <__c.5057>:
     d20:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000d2f <__c.5054>:
     d2f:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000d3d <__c.5052>:
     d3d:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000d4a <__c.5049>:
     d4a:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000d56 <__c.5047>:
     d56:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000d63 <__c.5044>:
     d63:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     d73:	00                                                  .

00000d74 <__c.5041>:
     d74:	43 3e 20 00                                         C> .

00000d78 <__c.5035>:
     d78:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000d84 <__ctors_end>:
     d84:	11 24       	eor	r1, r1
     d86:	1f be       	out	0x3f, r1	; 63
     d88:	cf ef       	ldi	r28, 0xFF	; 255
     d8a:	da e0       	ldi	r29, 0x0A	; 10
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	cd bf       	out	0x3d, r28	; 61

00000d90 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d90:	04 b6       	in	r0, 0x34	; 52
     d92:	03 fe       	sbrs	r0, 3
     d94:	27 c0       	rjmp	.+78     	; 0xde4 <__do_copy_data>
     d96:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__bss_end>
     d9a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__bss_end+0x1>
     d9e:	a0 91 56 02 	lds	r26, 0x0256	; 0x800256 <__bss_end+0x2>
     da2:	b0 91 57 02 	lds	r27, 0x0257	; 0x800257 <__bss_end+0x3>
     da6:	87 30       	cpi	r24, 0x07	; 7
     da8:	90 4b       	sbci	r25, 0xB0	; 176
     daa:	a7 40       	sbci	r26, 0x07	; 7
     dac:	b0 4b       	sbci	r27, 0xB0	; 176
     dae:	d1 f4       	brne	.+52     	; 0xde4 <__do_copy_data>
        reset_key = 0;
     db0:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__bss_end>
     db4:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__bss_end+0x1>
     db8:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <__bss_end+0x2>
     dbc:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     dc0:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     dc2:	84 b7       	in	r24, 0x34	; 52
     dc4:	87 7f       	andi	r24, 0xF7	; 247
     dc6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	a8 95       	wdr
     dce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     dd2:	88 61       	ori	r24, 0x18	; 24
     dd4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     dd8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ddc:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     dde:	e0 e0       	ldi	r30, 0x00	; 0
     de0:	f8 e3       	ldi	r31, 0x38	; 56
     de2:	09 95       	icall

00000de4 <__do_copy_data>:
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b1 e0       	ldi	r27, 0x01	; 1
     dea:	e4 e4       	ldi	r30, 0x44	; 68
     dec:	f8 e5       	ldi	r31, 0x58	; 88
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <__do_copy_data+0x10>
     df0:	05 90       	lpm	r0, Z+
     df2:	0d 92       	st	X+, r0
     df4:	aa 33       	cpi	r26, 0x3A	; 58
     df6:	b1 07       	cpc	r27, r17
     df8:	d9 f7       	brne	.-10     	; 0xdf0 <__do_copy_data+0xc>

00000dfa <__do_clear_bss>:
     dfa:	22 e0       	ldi	r18, 0x02	; 2
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b1 e0       	ldi	r27, 0x01	; 1
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <.do_clear_bss_start>

00000e02 <.do_clear_bss_loop>:
     e02:	1d 92       	st	X+, r1

00000e04 <.do_clear_bss_start>:
     e04:	a4 35       	cpi	r26, 0x54	; 84
     e06:	b2 07       	cpc	r27, r18
     e08:	e1 f7       	brne	.-8      	; 0xe02 <.do_clear_bss_loop>
     e0a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <main>
     e0e:	0c 94 20 2c 	jmp	0x5840	; 0x5840 <_exit>

00000e12 <__bad_interrupt>:
     e12:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000e16 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     e16:	ff 93       	push	r31
	push	ZL
     e18:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     e1a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
	lds	ZH, xfunc_out+1	;/
     e1e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     e22:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     e24:	09 f0       	breq	.+2      	; 0xe28 <xputc+0x12>
	icall
     e26:	09 95       	icall
2:	pop	ZL
     e28:	ef 91       	pop	r30
	pop	ZH
     e2a:	ff 91       	pop	r31
	ret
     e2c:	08 95       	ret

00000e2e <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     e2e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     e30:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     e32:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     e34:	11 f0       	breq	.+4      	; 0xe3a <xputs+0xc>
	rcall	xputc
     e36:	ef df       	rcall	.-34     	; 0xe16 <xputc>
	rjmp	1b
     e38:	fb cf       	rjmp	.-10     	; 0xe30 <xputs+0x2>
2:	ret
     e3a:	08 95       	ret

00000e3c <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e3c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e3e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e40:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e42:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e44:	0c c0       	rjmp	.+24     	; 0xe5e <xitoa+0x22>
	neg	r20		;
     e46:	41 95       	neg	r20
	sbrs	r25, 7		;
     e48:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <xitoa+0x22>
	ldi	r30, '-'	;
     e4c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e4e:	60 95       	com	r22
	com	r23		;
     e50:	70 95       	com	r23
	com	r24		;
     e52:	80 95       	com	r24
	com	r25		;
     e54:	90 95       	com	r25
	adc	r22, r1		;
     e56:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e58:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e5a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e5c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e5e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <xitoa+0x2a>
	neg	r18		;
     e62:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e64:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e66:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e68:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e6a:	66 0f       	add	r22, r22
	rol	r23		;
     e6c:	77 1f       	adc	r23, r23
	rol	r24		;
     e6e:	88 1f       	adc	r24, r24
	rol	r25		;
     e70:	99 1f       	adc	r25, r25
	rol	r26		;
     e72:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e74:	a4 17       	cp	r26, r20
	brcs	3f		;
     e76:	10 f0       	brcs	.+4      	; 0xe7c <xitoa+0x40>
	sub	r26, r20	;
     e78:	a4 1b       	sub	r26, r20
	inc	r22		;
     e7a:	63 95       	inc	r22
3:	dec	r21		;
     e7c:	5a 95       	dec	r21
	brne	2b		;/
     e7e:	a9 f7       	brne	.-22     	; 0xe6a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e80:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e82:	08 f0       	brcs	.+2      	; 0xe86 <xitoa+0x4a>
	subi	r26, -7		;
     e84:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e86:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e88:	af 93       	push	r26
	inc	r31		;/
     e8a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e8c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e8e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e90:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e92:	91 05       	cpc	r25, r1
	brne	1b		;/
     e94:	41 f7       	brne	.-48     	; 0xe66 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e96:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e98:	11 f4       	brne	.+4      	; 0xe9e <xitoa+0x62>
	push	r30		;
     e9a:	ef 93       	push	r30
	inc	r31		;/
     e9c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e9e:	f2 17       	cp	r31, r18
	brcc	6f		;
     ea0:	18 f4       	brcc	.+6      	; 0xea8 <xitoa+0x6c>
	push	r19		;
     ea2:	3f 93       	push	r19
	inc	r31		;
     ea4:	f3 95       	inc	r31
	rjmp	5b		;/
     ea6:	fb cf       	rjmp	.-10     	; 0xe9e <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     ea8:	8f 91       	pop	r24
	rcall	xputc		;
     eaa:	b5 df       	rcall	.-150    	; 0xe16 <xputc>
	dec	r31		;
     eac:	fa 95       	dec	r31
	brne	6b		;/
     eae:	e1 f7       	brne	.-8      	; 0xea8 <xitoa+0x6c>

	ret
     eb0:	08 95       	ret

00000eb2 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     eb2:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     eb4:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     eb6:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     eb8:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     eba:	21 f0       	breq	.+8      	; 0xec4 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     ebc:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     ebe:	19 f0       	breq	.+6      	; 0xec6 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     ec0:	aa df       	rcall	.-172    	; 0xe16 <xputc>
	rjmp	0b		;/
     ec2:	f9 cf       	rjmp	.-14     	; 0xeb6 <xvprintf+0x4>
90:	ret
     ec4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     ec6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     ec8:	e8 94       	clt
	_LPMI	r21		;Get flags
     eca:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     ecc:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     ece:	c1 f3       	breq	.-16     	; 0xec0 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     ed0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     ed2:	11 f4       	brne	.+4      	; 0xed8 <xvprintf+0x26>
	set			;/
     ed4:	68 94       	set
22:	_LPMI	r21		;Get width
     ed6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     ed8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     eda:	48 f4       	brcc	.+18     	; 0xeee <xvprintf+0x3c>
	subi	r21, '0'	;
     edc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     ede:	90 f3       	brcs	.-28     	; 0xec4 <xvprintf+0x12>
	lsl	r18		;
     ee0:	22 0f       	add	r18, r18
	mov	r0, r18		;
     ee2:	02 2e       	mov	r0, r18
	lsl	r18		;
     ee4:	22 0f       	add	r18, r18
	lsl	r18		;
     ee6:	22 0f       	add	r18, r18
	add	r18, r0		;
     ee8:	20 0d       	add	r18, r0
	add	r18, r21	;
     eea:	25 0f       	add	r18, r21
	rjmp	22b		;/
     eec:	f4 cf       	rjmp	.-24     	; 0xed6 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     eee:	0e f4       	brtc	.+2      	; 0xef2 <xvprintf+0x40>
	neg	r18		;
     ef0:	21 95       	neg	r18
25:	ld	r24, Y+		;
     ef2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     ef4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     ef6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ef8:	19 f3       	breq	.-58     	; 0xec0 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     efa:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     efc:	29 f1       	breq	.+74     	; 0xf48 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     efe:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     f00:	59 f1       	breq	.+86     	; 0xf58 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     f02:	bc 01       	movw	r22, r24
	clr	r24		;
     f04:	88 27       	eor	r24, r24
	clr	r25		;
     f06:	99 27       	eor	r25, r25
	clt			;/
     f08:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     f0a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     f0c:	21 f4       	brne	.+8      	; 0xf16 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     f0e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     f10:	99 91       	ld	r25, Y+
	set			;
     f12:	68 94       	set
	_LPMI	r21		;/
     f14:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     f16:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     f18:	39 f4       	brne	.+14     	; 0xf28 <xvprintf+0x76>
	ldi	r20, -10	;
     f1a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     f1c:	7e f0       	brts	.+30     	; 0xf3c <xvprintf+0x8a>
	sbrs	r23, 7		;
     f1e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <xvprintf+0x8a>
	ldi	r24, -1		;
     f22:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     f24:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     f28:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     f2a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     f2c:	39 f0       	breq	.+14     	; 0xf3c <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     f2e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     f30:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     f32:	21 f0       	breq	.+8      	; 0xf3c <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     f34:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     f36:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     f38:	09 f0       	breq	.+2      	; 0xf3c <xvprintf+0x8a>
	ret			;abort
     f3a:	08 95       	ret
40:	push	ZH		;Output the value
     f3c:	ff 93       	push	r31
	push	ZL		;
     f3e:	ef 93       	push	r30
	rcall	xitoa		;
     f40:	7d df       	rcall	.-262    	; 0xe3c <xitoa>
42:	pop	ZL		;
     f42:	ef 91       	pop	r30
	pop	ZH		;
     f44:	ff 91       	pop	r31
	rjmp	0b		;/
     f46:	b7 cf       	rjmp	.-146    	; 0xeb6 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f48:	ff 93       	push	r31
	push	ZL
     f4a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f4c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f4e:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f50:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f52:	b9 f3       	breq	.-18     	; 0xf42 <xvprintf+0x90>
	rcall	xputc
     f54:	60 df       	rcall	.-320    	; 0xe16 <xputc>
	rjmp	51b
     f56:	fb cf       	rjmp	.-10     	; 0xf4e <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f58:	ff 93       	push	r31
	push	ZL
     f5a:	ef 93       	push	r30
	rcall	xputs
     f5c:	68 df       	rcall	.-304    	; 0xe2e <xputs>
	rjmp	42b
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <xvprintf+0x90>

00000f60 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f60:	df 93       	push	r29
	push	YL
     f62:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f64:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f66:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f68:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f6a:	a3 df       	rcall	.-186    	; 0xeb2 <xvprintf>
	pop	YL
     f6c:	cf 91       	pop	r28
	pop	YH
     f6e:	df 91       	pop	r29
	ret
     f70:	08 95       	ret

00000f72 <action_get_macro>:
         TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,     TRNS,     TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, \
         TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS),
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
     f72:	fc 01       	movw	r30, r24
    switch (id) {
     f74:	61 30       	cpi	r22, 0x01	; 1
     f76:	71 f0       	breq	.+28     	; 0xf94 <action_get_macro+0x22>
     f78:	38 f0       	brcs	.+14     	; 0xf88 <action_get_macro+0x16>
     f7a:	62 30       	cpi	r22, 0x02	; 2
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <action_get_macro+0x2e>
     f7e:	63 30       	cpi	r22, 0x03	; 3
     f80:	a9 f0       	breq	.+42     	; 0xfac <action_get_macro+0x3a>
        case 0:
            return (record->event.pressed ?
                    MACRO( D(LSFT), T(D), U(LSFT), T(E), T(L), D(LSFT), T(B), U(LSFT), T(A), T(B), T(U), T(1), END ) :
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
            return (record->event.pressed ?
                    MACRO( D(LSFT), T(S), U(LSFT), T(U), T(L), T(T), T(4), T(N), D(LSFT), T(O), U(LSFT), T(F), D(LSFT), T(S), U(LSFT), T(W), T(E), T(E), T(T), T(N), T(E), T(S), T(S), END ) :
                    MACRO_NONE );
    }
    return MACRO_NONE;
}
     f86:	08 95       	ret
                    MACRO( D(LSFT), T(D), U(LSFT), T(E), T(L), D(LSFT), T(B), U(LSFT), T(A), T(B), T(U), T(1), END ) :
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	88 23       	and	r24, r24
     f8c:	d1 f3       	breq	.-12     	; 0xf82 <action_get_macro+0x10>
     f8e:	8b e9       	ldi	r24, 0x9B	; 155
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	08 95       	ret
                    MACRO( D(LSFT), T(S), U(LSFT), T(U), T(P), T(E), T(R), D(LSFT), T(P), U(LSFT), T(0), T(W), T(E), T(R), D(LSFT), T(M), U(LSFT), T(A), T(C), T(H), T(I), T(N), T(E), T(R), T(Y), END ) :
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	88 23       	and	r24, r24
     f98:	a1 f3       	breq	.-24     	; 0xf82 <action_get_macro+0x10>
     f9a:	82 e4       	ldi	r24, 0x42	; 66
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	08 95       	ret
                    MACRO( D(LSFT), T(I), U(LSFT), T(M), T(4), T(K), T(N), T(I), T(F), T(3), D(LSFT), T(C), U(LSFT), T(U), T(7), D(LSFT), T(C), U(LSFT), T(U), T(7), END ) :
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	88 23       	and	r24, r24
     fa4:	71 f3       	breq	.-36     	; 0xf82 <action_get_macro+0x10>
     fa6:	8d ef       	ldi	r24, 0xFD	; 253
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	08 95       	ret
                    MACRO( D(LSFT), T(S), U(LSFT), T(U), T(L), T(T), T(4), T(N), D(LSFT), T(O), U(LSFT), T(F), D(LSFT), T(S), U(LSFT), T(W), T(E), T(E), T(T), T(N), T(E), T(S), T(S), END ) :
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	88 23       	and	r24, r24
     fb0:	41 f3       	breq	.-48     	; 0xf82 <action_get_macro+0x10>
     fb2:	8c ea       	ldi	r24, 0xAC	; 172
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <unselect_rows>:
 * pin: D1  D2  D3  C6  C7
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00001110;
     fb8:	8a b1       	in	r24, 0x0a	; 10
     fba:	81 7f       	andi	r24, 0xF1	; 241
     fbc:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001110;
     fbe:	8b b1       	in	r24, 0x0b	; 11
     fc0:	81 7f       	andi	r24, 0xF1	; 241
     fc2:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~0b11000000;
     fc4:	87 b1       	in	r24, 0x07	; 7
     fc6:	8f 73       	andi	r24, 0x3F	; 63
     fc8:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~0b11000000;
     fca:	88 b1       	in	r24, 0x08	; 8
     fcc:	8f 73       	andi	r24, 0x3F	; 63
     fce:	88 b9       	out	0x08, r24	; 8
}
     fd0:	08 95       	ret

00000fd2 <matrix_init>:
    unselect_rows();
     fd2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <unselect_rows>
    DDRF  &= ~(1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     fd6:	80 b3       	in	r24, 0x10	; 16
     fd8:	8c 70       	andi	r24, 0x0C	; 12
     fda:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     fdc:	81 b3       	in	r24, 0x11	; 17
     fde:	83 6f       	ori	r24, 0xF3	; 243
     fe0:	81 bb       	out	0x11, r24	; 17
    DDRD  &= ~(1<<0);
     fe2:	50 98       	cbi	0x0a, 0	; 10
    PORTD |=  (1<<0);
     fe4:	58 9a       	sbi	0x0b, 0	; 11
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     fe6:	84 b1       	in	r24, 0x04	; 4
     fe8:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     fea:	85 b1       	in	r24, 0x05	; 5
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	85 b9       	out	0x05, r24	; 5
        matrix[i] = 0;
     ff0:	a6 e4       	ldi	r26, 0x46	; 70
     ff2:	b1 e0       	ldi	r27, 0x01	; 1
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	1c 92       	st	X, r1
     ff8:	1e 92       	st	-X, r1
        matrix_debouncing[i] = 0;
     ffa:	ec e3       	ldi	r30, 0x3C	; 60
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	11 82       	std	Z+1, r1	; 0x01
    1000:	10 82       	st	Z, r1
        matrix[i] = 0;
    1002:	13 96       	adiw	r26, 0x03	; 3
    1004:	1c 92       	st	X, r1
    1006:	1e 92       	st	-X, r1
    1008:	12 97       	sbiw	r26, 0x02	; 2
        matrix_debouncing[i] = 0;
    100a:	13 82       	std	Z+3, r1	; 0x03
    100c:	12 82       	std	Z+2, r1	; 0x02
        matrix[i] = 0;
    100e:	15 96       	adiw	r26, 0x05	; 5
    1010:	1c 92       	st	X, r1
    1012:	1e 92       	st	-X, r1
    1014:	14 97       	sbiw	r26, 0x04	; 4
        matrix_debouncing[i] = 0;
    1016:	15 82       	std	Z+5, r1	; 0x05
    1018:	14 82       	std	Z+4, r1	; 0x04
        matrix[i] = 0;
    101a:	17 96       	adiw	r26, 0x07	; 7
    101c:	1c 92       	st	X, r1
    101e:	1e 92       	st	-X, r1
    1020:	16 97       	sbiw	r26, 0x06	; 6
        matrix_debouncing[i] = 0;
    1022:	17 82       	std	Z+7, r1	; 0x07
    1024:	16 82       	std	Z+6, r1	; 0x06
        matrix[i] = 0;
    1026:	19 96       	adiw	r26, 0x09	; 9
    1028:	1c 92       	st	X, r1
    102a:	1e 92       	st	-X, r1
    102c:	18 97       	sbiw	r26, 0x08	; 8
        matrix_debouncing[i] = 0;
    102e:	11 86       	std	Z+9, r1	; 0x09
    1030:	10 86       	std	Z+8, r1	; 0x08
}
    1032:	08 95       	ret

00001034 <matrix_scan>:
{
    1034:	2f 92       	push	r2
    1036:	3f 92       	push	r3
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	28 97       	sbiw	r28, 0x08	; 8
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	0c e3       	ldi	r16, 0x3C	; 60
    106a:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    106c:	1d 82       	std	Y+5, r1	; 0x05

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    106e:	2d 81       	ldd	r18, Y+5	; 0x05
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	09 f4       	brne	.+2      	; 0x1076 <matrix_scan+0x42>
    1074:	e5 c0       	rjmp	.+458    	; 0x1240 <matrix_scan+0x20c>
    1076:	08 f0       	brcs	.+2      	; 0x107a <matrix_scan+0x46>
    1078:	d7 c0       	rjmp	.+430    	; 0x1228 <matrix_scan+0x1f4>
    107a:	21 30       	cpi	r18, 0x01	; 1
    107c:	09 f4       	brne	.+2      	; 0x1080 <matrix_scan+0x4c>
    107e:	dd c0       	rjmp	.+442    	; 0x123a <matrix_scan+0x206>
        case 0:
            DDRD  |= (1<<1);
    1080:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
    1082:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1084:	40 ea       	ldi	r20, 0xA0	; 160
    1086:	4a 95       	dec	r20
    1088:	f1 f7       	brne	.-4      	; 0x1086 <matrix_scan+0x52>
    return (PINB&(1<<0) ? 0 : (1<<14)) |
    108a:	18 99       	sbic	0x03, 0	; 3
    108c:	df c0       	rjmp	.+446    	; 0x124c <matrix_scan+0x218>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e4       	ldi	r25, 0x40	; 64
           (PINB&(1<<1) ? 0 : (1<<13)) |
    1092:	19 99       	sbic	0x03, 1	; 3
    1094:	de c0       	rjmp	.+444    	; 0x1252 <matrix_scan+0x21e>
    1096:	c1 2c       	mov	r12, r1
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	d4 2e       	mov	r13, r20
           (PINB&(1<<2) ? 0 : (1<<12)) |
    109c:	1a 99       	sbic	0x03, 2	; 3
    109e:	dc c0       	rjmp	.+440    	; 0x1258 <matrix_scan+0x224>
    10a0:	e1 2c       	mov	r14, r1
    10a2:	30 e1       	ldi	r19, 0x10	; 16
    10a4:	f3 2e       	mov	r15, r19
           (PINB&(1<<3) ? 0 : (1<<11)) |
    10a6:	1b 99       	sbic	0x03, 3	; 3
    10a8:	da c0       	rjmp	.+436    	; 0x125e <matrix_scan+0x22a>
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b8 e0       	ldi	r27, 0x08	; 8
           (PINB&(1<<7) ? 0 : (1<<10)) |
    10ae:	1f 99       	sbic	0x03, 7	; 3
    10b0:	d9 c0       	rjmp	.+434    	; 0x1264 <matrix_scan+0x230>
    10b2:	e0 e0       	ldi	r30, 0x00	; 0
    10b4:	f4 e0       	ldi	r31, 0x04	; 4
           (PIND&(1<<0) ? 0 : (1<<9)) |
    10b6:	48 99       	sbic	0x09, 0	; 9
    10b8:	d8 c0       	rjmp	.+432    	; 0x126a <matrix_scan+0x236>
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	72 e0       	ldi	r23, 0x02	; 2
           (PINB&(1<<4) ? 0 : (1<<8)) |
    10be:	1c 99       	sbic	0x03, 4	; 3
    10c0:	d7 c0       	rjmp	.+430    	; 0x1270 <matrix_scan+0x23c>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	31 e0       	ldi	r19, 0x01	; 1
    10c6:	38 87       	std	Y+8, r19	; 0x08
    10c8:	2f 83       	std	Y+7, r18	; 0x07
           (PINB&(1<<5) ? 0 : (1<<7)) |
    10ca:	1d 99       	sbic	0x03, 5	; 3
    10cc:	d4 c0       	rjmp	.+424    	; 0x1276 <matrix_scan+0x242>
    10ce:	20 e8       	ldi	r18, 0x80	; 128
    10d0:	a2 2e       	mov	r10, r18
    10d2:	b1 2c       	mov	r11, r1
           (PINB&(1<<6) ? 0 : (1<<6)) |
    10d4:	1e 99       	sbic	0x03, 6	; 3
    10d6:	d2 c0       	rjmp	.+420    	; 0x127c <matrix_scan+0x248>
    10d8:	50 e4       	ldi	r21, 0x40	; 64
    10da:	85 2e       	mov	r8, r21
    10dc:	91 2c       	mov	r9, r1
           (PINF&(1<<7) ? 0 : (1<<5)) |
    10de:	7f 99       	sbic	0x0f, 7	; 15
    10e0:	d0 c0       	rjmp	.+416    	; 0x1282 <matrix_scan+0x24e>
    10e2:	40 e2       	ldi	r20, 0x20	; 32
    10e4:	64 2e       	mov	r6, r20
    10e6:	71 2c       	mov	r7, r1
           (PINF&(1<<6) ? 0 : (1<<4)) |
    10e8:	7e 99       	sbic	0x0f, 6	; 15
    10ea:	ce c0       	rjmp	.+412    	; 0x1288 <matrix_scan+0x254>
    10ec:	30 e1       	ldi	r19, 0x10	; 16
    10ee:	43 2e       	mov	r4, r19
    10f0:	51 2c       	mov	r5, r1
           (PINF&(1<<5) ? 0 : (1<<3)) |
    10f2:	7d 99       	sbic	0x0f, 5	; 15
    10f4:	cc c0       	rjmp	.+408    	; 0x128e <matrix_scan+0x25a>
    10f6:	28 e0       	ldi	r18, 0x08	; 8
    10f8:	22 2e       	mov	r2, r18
    10fa:	31 2c       	mov	r3, r1
           (PINF&(1<<4) ? 0 : (1<<2)) |
    10fc:	7c 99       	sbic	0x0f, 4	; 15
    10fe:	ca c0       	rjmp	.+404    	; 0x1294 <matrix_scan+0x260>
    1100:	44 e0       	ldi	r20, 0x04	; 4
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	5a 83       	std	Y+2, r21	; 0x02
    1106:	49 83       	std	Y+1, r20	; 0x01
           (PINF&(1<<1) ? 0 : (1<<1)) |
    1108:	79 99       	sbic	0x0f, 1	; 15
    110a:	c7 c0       	rjmp	.+398    	; 0x129a <matrix_scan+0x266>
    110c:	22 e0       	ldi	r18, 0x02	; 2
    110e:	30 e0       	ldi	r19, 0x00	; 0
           (PINF&(1<<0) ? 0 : (1<<0));
    1110:	5f b1       	in	r21, 0x0f	; 15
    1112:	50 95       	com	r21
    1114:	51 70       	andi	r21, 0x01	; 1
    1116:	5b 83       	std	Y+3, r21	; 0x03
    1118:	1c 82       	std	Y+4, r1	; 0x04
           (PINF&(1<<1) ? 0 : (1<<1)) |
    111a:	4b 81       	ldd	r20, Y+3	; 0x03
    111c:	5c 81       	ldd	r21, Y+4	; 0x04
    111e:	84 2b       	or	r24, r20
    1120:	95 2b       	or	r25, r21
    1122:	8c 29       	or	r24, r12
    1124:	9d 29       	or	r25, r13
    1126:	8e 29       	or	r24, r14
    1128:	9f 29       	or	r25, r15
    112a:	8a 2b       	or	r24, r26
    112c:	9b 2b       	or	r25, r27
    112e:	8e 2b       	or	r24, r30
    1130:	9f 2b       	or	r25, r31
    1132:	86 2b       	or	r24, r22
    1134:	97 2b       	or	r25, r23
    1136:	ef 81       	ldd	r30, Y+7	; 0x07
    1138:	f8 85       	ldd	r31, Y+8	; 0x08
    113a:	8e 2b       	or	r24, r30
    113c:	9f 2b       	or	r25, r31
    113e:	8a 29       	or	r24, r10
    1140:	9b 29       	or	r25, r11
    1142:	88 2a       	or	r8, r24
    1144:	99 2a       	or	r9, r25
    1146:	68 28       	or	r6, r8
    1148:	79 28       	or	r7, r9
    114a:	46 28       	or	r4, r6
    114c:	57 28       	or	r5, r7
    114e:	24 28       	or	r2, r4
    1150:	35 28       	or	r3, r5
    1152:	49 81       	ldd	r20, Y+1	; 0x01
    1154:	5a 81       	ldd	r21, Y+2	; 0x02
    1156:	24 2a       	or	r2, r20
    1158:	35 2a       	or	r3, r21
    115a:	22 29       	or	r18, r2
    115c:	33 29       	or	r19, r3
        if (matrix_debouncing[i] != cols) {
    115e:	f8 01       	movw	r30, r16
    1160:	81 91       	ld	r24, Z+
    1162:	91 91       	ld	r25, Z+
    1164:	8f 01       	movw	r16, r30
    1166:	82 17       	cp	r24, r18
    1168:	93 07       	cpc	r25, r19
    116a:	61 f1       	breq	.+88     	; 0x11c4 <matrix_scan+0x190>
            matrix_debouncing[i] = cols;
    116c:	32 97       	sbiw	r30, 0x02	; 2
    116e:	31 83       	std	Z+1, r19	; 0x01
    1170:	20 83       	st	Z, r18
            if (debouncing) {
    1172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1176:	88 23       	and	r24, r24
    1178:	11 f1       	breq	.+68     	; 0x11be <matrix_scan+0x18a>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    117a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    117e:	80 ff       	sbrs	r24, 0
    1180:	04 c0       	rjmp	.+8      	; 0x118a <matrix_scan+0x156>
    1182:	87 e2       	ldi	r24, 0x27	; 39
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    118a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    118e:	80 ff       	sbrs	r24, 0
    1190:	0e c0       	rjmp	.+28     	; 0x11ae <matrix_scan+0x17a>
    1192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1196:	1f 92       	push	r1
    1198:	8f 93       	push	r24
    119a:	82 e2       	ldi	r24, 0x22	; 34
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	9f 93       	push	r25
    11a0:	8f 93       	push	r24
    11a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    11b2:	80 ff       	sbrs	r24, 0
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <matrix_scan+0x18a>
    11b6:	80 e2       	ldi	r24, 0x20	; 32
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            debouncing = DEBOUNCE;
    11be:	85 e0       	ldi	r24, 0x05	; 5
    11c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        unselect_rows();
    11c4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    11c8:	fd 81       	ldd	r31, Y+5	; 0x05
    11ca:	ff 5f       	subi	r31, 0xFF	; 255
    11cc:	fd 83       	std	Y+5, r31	; 0x05
    11ce:	f5 30       	cpi	r31, 0x05	; 5
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <matrix_scan+0x1a0>
    11d2:	4d cf       	rjmp	.-358    	; 0x106e <matrix_scan+0x3a>
    if (debouncing) {
    11d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    11d8:	88 23       	and	r24, r24
    11da:	61 f0       	breq	.+24     	; 0x11f4 <matrix_scan+0x1c0>
        if (--debouncing) {
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    11e2:	88 23       	and	r24, r24
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <matrix_scan+0x1b4>
    11e6:	5c c0       	rjmp	.+184    	; 0x12a0 <matrix_scan+0x26c>
	__builtin_avr_delay_cycles(__ticks_dc);
    11e8:	8f e9       	ldi	r24, 0x9F	; 159
    11ea:	9f e0       	ldi	r25, 0x0F	; 15
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <matrix_scan+0x1b8>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <matrix_scan+0x1be>
    11f2:	00 00       	nop
}
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	28 96       	adiw	r28, 0x08	; 8
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	bf 90       	pop	r11
    1214:	af 90       	pop	r10
    1216:	9f 90       	pop	r9
    1218:	8f 90       	pop	r8
    121a:	7f 90       	pop	r7
    121c:	6f 90       	pop	r6
    121e:	5f 90       	pop	r5
    1220:	4f 90       	pop	r4
    1222:	3f 90       	pop	r3
    1224:	2f 90       	pop	r2
    1226:	08 95       	ret
    switch (row) {
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	33 30       	cpi	r19, 0x03	; 3
    122c:	61 f0       	breq	.+24     	; 0x1246 <matrix_scan+0x212>
    122e:	34 30       	cpi	r19, 0x04	; 4
    1230:	09 f0       	breq	.+2      	; 0x1234 <matrix_scan+0x200>
    1232:	26 cf       	rjmp	.-436    	; 0x1080 <matrix_scan+0x4c>
        case 3:
            DDRC  |= (1<<6);
            PORTC &= ~(1<<6);
            break;
        case 4:
            DDRC  |= (1<<7);
    1234:	3f 9a       	sbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1236:	47 98       	cbi	0x08, 7	; 8
    1238:	25 cf       	rjmp	.-438    	; 0x1084 <matrix_scan+0x50>
            DDRD  |= (1<<2);
    123a:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
    123c:	5a 98       	cbi	0x0b, 2	; 11
    123e:	22 cf       	rjmp	.-444    	; 0x1084 <matrix_scan+0x50>
            DDRD  |= (1<<3);
    1240:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
    1242:	5b 98       	cbi	0x0b, 3	; 11
    1244:	1f cf       	rjmp	.-450    	; 0x1084 <matrix_scan+0x50>
            DDRC  |= (1<<6);
    1246:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
    1248:	46 98       	cbi	0x08, 6	; 8
    124a:	1c cf       	rjmp	.-456    	; 0x1084 <matrix_scan+0x50>
    return (PINB&(1<<0) ? 0 : (1<<14)) |
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	20 cf       	rjmp	.-448    	; 0x1092 <matrix_scan+0x5e>
           (PINB&(1<<1) ? 0 : (1<<13)) |
    1252:	d1 2c       	mov	r13, r1
    1254:	c1 2c       	mov	r12, r1
    1256:	22 cf       	rjmp	.-444    	; 0x109c <matrix_scan+0x68>
           (PINB&(1<<2) ? 0 : (1<<12)) |
    1258:	f1 2c       	mov	r15, r1
    125a:	e1 2c       	mov	r14, r1
    125c:	24 cf       	rjmp	.-440    	; 0x10a6 <matrix_scan+0x72>
           (PINB&(1<<3) ? 0 : (1<<11)) |
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	25 cf       	rjmp	.-438    	; 0x10ae <matrix_scan+0x7a>
           (PINB&(1<<7) ? 0 : (1<<10)) |
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e0 e0       	ldi	r30, 0x00	; 0
    1268:	26 cf       	rjmp	.-436    	; 0x10b6 <matrix_scan+0x82>
           (PIND&(1<<0) ? 0 : (1<<9)) |
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	27 cf       	rjmp	.-434    	; 0x10be <matrix_scan+0x8a>
           (PINB&(1<<4) ? 0 : (1<<8)) |
    1270:	18 86       	std	Y+8, r1	; 0x08
    1272:	1f 82       	std	Y+7, r1	; 0x07
    1274:	2a cf       	rjmp	.-428    	; 0x10ca <matrix_scan+0x96>
           (PINB&(1<<5) ? 0 : (1<<7)) |
    1276:	b1 2c       	mov	r11, r1
    1278:	a1 2c       	mov	r10, r1
    127a:	2c cf       	rjmp	.-424    	; 0x10d4 <matrix_scan+0xa0>
           (PINB&(1<<6) ? 0 : (1<<6)) |
    127c:	91 2c       	mov	r9, r1
    127e:	81 2c       	mov	r8, r1
    1280:	2e cf       	rjmp	.-420    	; 0x10de <matrix_scan+0xaa>
           (PINF&(1<<7) ? 0 : (1<<5)) |
    1282:	71 2c       	mov	r7, r1
    1284:	61 2c       	mov	r6, r1
    1286:	30 cf       	rjmp	.-416    	; 0x10e8 <matrix_scan+0xb4>
           (PINF&(1<<6) ? 0 : (1<<4)) |
    1288:	51 2c       	mov	r5, r1
    128a:	41 2c       	mov	r4, r1
    128c:	32 cf       	rjmp	.-412    	; 0x10f2 <matrix_scan+0xbe>
           (PINF&(1<<5) ? 0 : (1<<3)) |
    128e:	31 2c       	mov	r3, r1
    1290:	21 2c       	mov	r2, r1
    1292:	34 cf       	rjmp	.-408    	; 0x10fc <matrix_scan+0xc8>
           (PINF&(1<<4) ? 0 : (1<<2)) |
    1294:	1a 82       	std	Y+2, r1	; 0x02
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	37 cf       	rjmp	.-402    	; 0x1108 <matrix_scan+0xd4>
           (PINF&(1<<1) ? 0 : (1<<1)) |
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	38 cf       	rjmp	.-400    	; 0x1110 <matrix_scan+0xdc>
                matrix[i] = matrix_debouncing[i];
    12a0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <matrix_debouncing>
    12a4:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <matrix_debouncing+0x1>
    12a8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <matrix+0x1>
    12ac:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <matrix>
    12b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <matrix_debouncing+0x2>
    12b4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <matrix_debouncing+0x3>
    12b8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <matrix+0x3>
    12bc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <matrix+0x2>
    12c0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <matrix_debouncing+0x4>
    12c4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <matrix_debouncing+0x5>
    12c8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <matrix+0x5>
    12cc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <matrix+0x4>
    12d0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <matrix_debouncing+0x6>
    12d4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <matrix_debouncing+0x7>
    12d8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <matrix+0x7>
    12dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <matrix+0x6>
    12e0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <matrix_debouncing+0x8>
    12e4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <matrix_debouncing+0x9>
    12e8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <matrix+0x9>
    12ec:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <matrix+0x8>
    12f0:	81 cf       	rjmp	.-254    	; 0x11f4 <matrix_scan+0x1c0>

000012f2 <matrix_get_row>:
    return matrix[row];
    12f2:	e8 2f       	mov	r30, r24
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	ea 5b       	subi	r30, 0xBA	; 186
    12fc:	fe 4f       	sbci	r31, 0xFE	; 254
}
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	08 95       	ret

00001304 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1304:	81 ff       	sbrs	r24, 1
    1306:	03 c0       	rjmp	.+6      	; 0x130e <led_set+0xa>
        // output low
        DDRB |= (1<<2);
    1308:	22 9a       	sbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
        PORTB &= ~(1<<2);
    130a:	2a 98       	cbi	0x05, 2	; 5
    }
}
    130c:	08 95       	ret
        DDRB &= ~(1<<2);
    130e:	22 98       	cbi	0x04, 2	; 4
    1310:	fc cf       	rjmp	.-8      	; 0x130a <led_set+0x6>

00001312 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1312:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    1316:	08 95       	ret

00001318 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1318:	9f b7       	in	r25, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
    1320:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1322:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_DeviceState>
    1326:	94 30       	cpi	r25, 0x04	; 4
    1328:	09 f0       	breq	.+2      	; 0x132c <sendchar+0x14>
    132a:	49 c0       	rjmp	.+146    	; 0x13be <sendchar+0xa6>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    132c:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1330:	2f 70       	andi	r18, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1332:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1336:	90 fd       	sbrc	r25, 0
    1338:	30 c0       	rjmp	.+96     	; 0x139a <sendchar+0x82>
    133a:	90 e0       	ldi	r25, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    133c:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    133e:	24 e0       	ldi	r18, 0x04	; 4
    1340:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1344:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1348:	20 ff       	sbrs	r18, 0
    134a:	36 c0       	rjmp	.+108    	; 0x13b8 <sendchar+0xa0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    134c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1350:	27 ff       	sbrs	r18, 7
    1352:	32 c0       	rjmp	.+100    	; 0x13b8 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1354:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <timeouted.4910>
    1358:	22 23       	and	r18, r18
    135a:	21 f0       	breq	.+8      	; 0x1364 <sendchar+0x4c>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    135c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1360:	25 ff       	sbrs	r18, 5
    1362:	2a c0       	rjmp	.+84     	; 0x13b8 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1364:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <timeouted.4910>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1368:	26 e0       	ldi	r18, 0x06	; 6
    136a:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    136e:	35 ff       	sbrs	r19, 5
    1370:	16 c0       	rjmp	.+44     	; 0x139e <sendchar+0x86>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1372:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1376:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    137a:	85 fd       	sbrc	r24, 5
    137c:	29 c0       	rjmp	.+82     	; 0x13d0 <sendchar+0xb8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    137e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    1382:	80 ff       	sbrs	r24, 0
    1384:	fc cf       	rjmp	.-8      	; 0x137e <sendchar+0x66>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138a:	8e 77       	andi	r24, 0x7E	; 126
    138c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1390:	9f 70       	andi	r25, 0x0F	; 15
    1392:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    } else {
        CONSOLE_FLUSH_SET(true);
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    139a:	90 e8       	ldi	r25, 0x80	; 128
    139c:	cf cf       	rjmp	.-98     	; 0x133c <sendchar+0x24>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    139e:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <USB_DeviceState>
    13a2:	34 30       	cpi	r19, 0x04	; 4
    13a4:	49 f4       	brne	.+18     	; 0x13b8 <sendchar+0xa0>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    13a6:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        if (Endpoint_IsStalled()) {
    13aa:	35 fd       	sbrc	r19, 5
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <sendchar+0xa0>
    13ae:	21 50       	subi	r18, 0x01	; 1
        if (!(timeout--)) {
    13b0:	41 f4       	brne	.+16     	; 0x13c2 <sendchar+0xaa>
            timeouted = true;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timeouted.4910>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13b8:	9f 70       	andi	r25, 0x0F	; 15
    13ba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        return -1;
    13be:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    13c0:	08 95       	ret
    13c2:	ef e9       	ldi	r30, 0x9F	; 159
    13c4:	ff e0       	ldi	r31, 0x0F	; 15
    13c6:	31 97       	sbiw	r30, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <sendchar+0xae>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <sendchar+0xb4>
    13cc:	00 00       	nop
    13ce:	cd cf       	rjmp	.-102    	; 0x136a <sendchar+0x52>
        CONSOLE_FLUSH_SET(true);
    13d0:	8f b7       	in	r24, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	21 e0       	ldi	r18, 0x01	; 1
    13d6:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <console_flush>
    13da:	8f bf       	out	0x3f, r24	; 63
    13dc:	d9 cf       	rjmp	.-78     	; 0x1390 <sendchar+0x78>

000013de <send_consumer>:
{
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <send_consumer+0x6>
    13e4:	1f 92       	push	r1
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    13ec:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	19 f5       	brne	.+70     	; 0x143a <send_consumer+0x5c>
    report_extra_t r = {
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	99 83       	std	Y+1, r25	; 0x01
    13f8:	3b 83       	std	Y+3, r19	; 0x03
    13fa:	2a 83       	std	Y+2, r18	; 0x02
    13fc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1400:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1402:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1406:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1408:	95 fd       	sbrc	r25, 5
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <send_consumer+0x3a>
	__builtin_avr_delay_cycles(__ticks_dc);
    140c:	95 ed       	ldi	r25, 0xD5	; 213
    140e:	9a 95       	dec	r25
    1410:	f1 f7       	brne	.-4      	; 0x140e <send_consumer+0x30>
    1412:	00 00       	nop
    1414:	81 11       	cpse	r24, r1
    1416:	f5 cf       	rjmp	.-22     	; 0x1402 <send_consumer+0x24>
    1418:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    141c:	85 ff       	sbrs	r24, 5
    141e:	0d c0       	rjmp	.+26     	; 0x143a <send_consumer+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	63 e0       	ldi	r22, 0x03	; 3
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1430:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1434:	8e 77       	andi	r24, 0x7E	; 126
    1436:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <send_system>:
{
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	00 d0       	rcall	.+0      	; 0x144c <send_system+0x6>
    144c:	1f 92       	push	r1
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1452:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <USB_DeviceState>
    1456:	24 30       	cpi	r18, 0x04	; 4
    1458:	21 f5       	brne	.+72     	; 0x14a2 <send_system+0x5c>
    report_extra_t r = {
    145a:	22 e0       	ldi	r18, 0x02	; 2
    145c:	29 83       	std	Y+1, r18	; 0x01
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1462:	83 e0       	ldi	r24, 0x03	; 3
    1464:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1468:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    146a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146e:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1470:	95 fd       	sbrc	r25, 5
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <send_system+0x3a>
    1474:	95 ed       	ldi	r25, 0xD5	; 213
    1476:	9a 95       	dec	r25
    1478:	f1 f7       	brne	.-4      	; 0x1476 <send_system+0x30>
    147a:	00 00       	nop
    147c:	81 11       	cpse	r24, r1
    147e:	f5 cf       	rjmp	.-22     	; 0x146a <send_system+0x24>
    1480:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1484:	85 ff       	sbrs	r24, 5
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <send_system+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	63 e0       	ldi	r22, 0x03	; 3
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1498:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    149c:	8e 77       	andi	r24, 0x7E	; 126
    149e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <send_mouse>:
{
    14ae:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14b0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	f9 f4       	brne	.+62     	; 0x14f6 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    14be:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14c4:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    14c6:	85 fd       	sbrc	r24, 5
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <send_mouse+0x28>
    14ca:	85 ed       	ldi	r24, 0xD5	; 213
    14cc:	8a 95       	dec	r24
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <send_mouse+0x1e>
    14d0:	00 00       	nop
    14d2:	91 11       	cpse	r25, r1
    14d4:	f5 cf       	rjmp	.-22     	; 0x14c0 <send_mouse+0x12>
    14d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    14da:	85 ff       	sbrs	r24, 5
    14dc:	0c c0       	rjmp	.+24     	; 0x14f6 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	65 e0       	ldi	r22, 0x05	; 5
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	c9 01       	movw	r24, r18
    14e8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14f0:	8e 77       	andi	r24, 0x7E	; 126
    14f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    14f6:	08 95       	ret

000014f8 <send_keyboard>:
{
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14fe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	f9 f4       	brne	.+62     	; 0x1544 <send_keyboard+0x4c>
    if (keyboard_protocol && keyboard_nkro) {
    1506:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    150a:	88 23       	and	r24, r24
    150c:	f1 f0       	breq	.+60     	; 0x154a <send_keyboard+0x52>
    150e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    1512:	88 23       	and	r24, r24
    1514:	d1 f0       	breq	.+52     	; 0x154a <send_keyboard+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1516:	85 e0       	ldi	r24, 0x05	; 5
    1518:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    151c:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    151e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1522:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    1524:	95 fd       	sbrc	r25, 5
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <send_keyboard+0x3c>
    1528:	9a e2       	ldi	r25, 0x2A	; 42
    152a:	9a 95       	dec	r25
    152c:	f1 f7       	brne	.-4      	; 0x152a <send_keyboard+0x32>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <send_keyboard+0x38>
    1530:	81 11       	cpse	r24, r1
    1532:	f5 cf       	rjmp	.-22     	; 0x151e <send_keyboard+0x26>
    1534:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	60 e2       	ldi	r22, 0x20	; 32
    153e:	70 e0       	ldi	r23, 0x00	; 0
        if (!Endpoint_IsReadWriteAllowed()) return;
    1540:	85 fd       	sbrc	r24, 5
    1542:	1a c0       	rjmp	.+52     	; 0x1578 <send_keyboard+0x80>
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1550:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1552:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1556:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1558:	95 fd       	sbrc	r25, 5
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <send_keyboard+0x70>
    155c:	95 ed       	ldi	r25, 0xD5	; 213
    155e:	9a 95       	dec	r25
    1560:	f1 f7       	brne	.-4      	; 0x155e <send_keyboard+0x66>
    1562:	00 00       	nop
    1564:	81 11       	cpse	r24, r1
    1566:	f5 cf       	rjmp	.-22     	; 0x1552 <send_keyboard+0x5a>
    1568:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    156c:	85 ff       	sbrs	r24, 5
    156e:	ea cf       	rjmp	.-44     	; 0x1544 <send_keyboard+0x4c>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	68 e0       	ldi	r22, 0x08	; 8
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	ce 01       	movw	r24, r28
    157a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    157e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1582:	8e 77       	andi	r24, 0x7E	; 126
    1584:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	fe 01       	movw	r30, r28
    158c:	a4 e5       	ldi	r26, 0x54	; 84
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	01 90       	ld	r0, Z+
    1592:	0d 92       	st	X+, r0
    1594:	8a 95       	dec	r24
    1596:	e1 f7       	brne	.-8      	; 0x1590 <send_keyboard+0x98>
    1598:	d5 cf       	rjmp	.-86     	; 0x1544 <send_keyboard+0x4c>

0000159a <EVENT_USB_Device_Connect>:
    print("[C]");
    159a:	8f e5       	ldi	r24, 0x5F	; 95
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    if (!USB_IsInitialized) {
    15a2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_IsInitialized>
    15a6:	81 11       	cpse	r24, r1
    15a8:	09 c0       	rjmp	.+18     	; 0x15bc <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    15aa:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <USB_Disable>
        USB_Init();
    15ae:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    15b2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15b6:	84 60       	ori	r24, 0x04	; 4
    15b8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
}
    15bc:	08 95       	ret

000015be <EVENT_USB_Device_Disconnect>:
    print("[D]");
    15be:	8b e5       	ldi	r24, 0x5B	; 91
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    USB_IsInitialized = false;
    15c6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_IsInitialized>
}
    15ca:	08 95       	ret

000015cc <EVENT_USB_Device_Reset>:
}
    15cc:	08 95       	ret

000015ce <EVENT_USB_Device_StartOfFrame>:
    if (++count % 50) return;
    15ce:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <count.4840>
    15d2:	2f 5f       	subi	r18, 0xFF	; 255
    15d4:	82 2f       	mov	r24, r18
    15d6:	62 e3       	ldi	r22, 0x32	; 50
    15d8:	0e 94 b5 2b 	call	0x576a	; 0x576a <__udivmodqi4>
    15dc:	99 23       	and	r25, r25
    15de:	19 f0       	breq	.+6      	; 0x15e6 <EVENT_USB_Device_StartOfFrame+0x18>
    15e0:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <count.4840>
    15e4:	08 95       	ret
    count = 0;
    15e6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <count.4840>
    if (!console_flush) return;
    15ea:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <console_flush>
    15ee:	88 23       	and	r24, r24
    15f0:	e9 f0       	breq	.+58     	; 0x162c <EVENT_USB_Device_StartOfFrame+0x5e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    15f2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	b9 f4       	brne	.+46     	; 0x1628 <EVENT_USB_Device_StartOfFrame+0x5a>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15fa:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    15fe:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1600:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1604:	80 fd       	sbrc	r24, 0
    1606:	13 c0       	rjmp	.+38     	; 0x162e <EVENT_USB_Device_StartOfFrame+0x60>
    1608:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    160a:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    160c:	94 e0       	ldi	r25, 0x04	; 4
    160e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1612:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1616:	90 ff       	sbrs	r25, 0
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <EVENT_USB_Device_StartOfFrame+0x54>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    161a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    161e:	97 fd       	sbrc	r25, 7
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <EVENT_USB_Device_StartOfFrame+0x68>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    console_flush = false;
    1628:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
}
    162c:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    162e:	80 e8       	ldi	r24, 0x80	; 128
    1630:	ec cf       	rjmp	.-40     	; 0x160a <EVENT_USB_Device_StartOfFrame+0x3c>
				UEDATX = Data;
    1632:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1636:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (Endpoint_IsReadWriteAllowed())
    163a:	95 fd       	sbrc	r25, 5
    163c:	fa cf       	rjmp	.-12     	; 0x1632 <EVENT_USB_Device_StartOfFrame+0x64>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    163e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (Endpoint_IsINReady()) {
    1642:	90 ff       	sbrs	r25, 0
    1644:	ee cf       	rjmp	.-36     	; 0x1622 <EVENT_USB_Device_StartOfFrame+0x54>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1646:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    164a:	9e 77       	andi	r25, 0x7E	; 126
    164c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1650:	e8 cf       	rjmp	.-48     	; 0x1622 <EVENT_USB_Device_StartOfFrame+0x54>

00001652 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1652:	42 e0       	ldi	r20, 0x02	; 2
    1654:	61 ec       	ldi	r22, 0xC1	; 193
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
    165c:	42 e0       	ldi	r20, 0x02	; 2
    165e:	61 ec       	ldi	r22, 0xC1	; 193
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	61 ec       	ldi	r22, 0xC1	; 193
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
    1670:	42 e2       	ldi	r20, 0x22	; 34
    1672:	61 ec       	ldi	r22, 0xC1	; 193
    1674:	84 e0       	ldi	r24, 0x04	; 4
    1676:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
    167a:	42 e2       	ldi	r20, 0x22	; 34
    167c:	61 ec       	ldi	r22, 0xC1	; 193
    167e:	85 e0       	ldi	r24, 0x05	; 5
    1680:	0c 94 d9 0d 	jmp	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>

00001684 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1684:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x1>
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	09 f4       	brne	.+2      	; 0x168e <EVENT_USB_Device_ControlRequest+0xa>
    168c:	55 c0       	rjmp	.+170    	; 0x1738 <EVENT_USB_Device_ControlRequest+0xb4>
    168e:	30 f4       	brcc	.+12     	; 0x169c <EVENT_USB_Device_ControlRequest+0x18>
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	71 f1       	breq	.+92     	; 0x16f0 <EVENT_USB_Device_ControlRequest+0x6c>
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	09 f4       	brne	.+2      	; 0x169a <EVENT_USB_Device_ControlRequest+0x16>
    1698:	91 c0       	rjmp	.+290    	; 0x17bc <EVENT_USB_Device_ControlRequest+0x138>
    169a:	08 95       	ret
    169c:	8a 30       	cpi	r24, 0x0A	; 10
    169e:	09 f4       	brne	.+2      	; 0x16a2 <EVENT_USB_Device_ControlRequest+0x1e>
    16a0:	7d c0       	rjmp	.+250    	; 0x179c <EVENT_USB_Device_ControlRequest+0x118>
    16a2:	8b 30       	cpi	r24, 0x0B	; 11
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <EVENT_USB_Device_ControlRequest+0x24>
    16a6:	63 c0       	rjmp	.+198    	; 0x176e <EVENT_USB_Device_ControlRequest+0xea>
    16a8:	89 30       	cpi	r24, 0x09	; 9
    16aa:	09 f0       	breq	.+2      	; 0x16ae <EVENT_USB_Device_ControlRequest+0x2a>
    16ac:	44 c0       	rjmp	.+136    	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    16ae:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    16b2:	81 32       	cpi	r24, 0x21	; 33
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <EVENT_USB_Device_ControlRequest+0x34>
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
                switch (USB_ControlRequest.wIndex) {
    16b8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    16bc:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <EVENT_USB_Device_ControlRequest+0x44>
    16c4:	04 97       	sbiw	r24, 0x04	; 4
    16c6:	b9 f5       	brne	.+110    	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    16c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16cc:	87 7f       	andi	r24, 0xF7	; 247
    16ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    16d6:	82 ff       	sbrs	r24, 2
    16d8:	2a c0       	rjmp	.+84     	; 0x172e <EVENT_USB_Device_ControlRequest+0xaa>
				return UEDATX;
    16da:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    16de:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    16ec:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16f0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    16f4:	81 3a       	cpi	r24, 0xA1	; 161
    16f6:	f9 f4       	brne	.+62     	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    16f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16fc:	87 7f       	andi	r24, 0xF7	; 247
    16fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    1702:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1706:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    170a:	89 2b       	or	r24, r25
    170c:	61 f4       	brne	.+24     	; 0x1726 <EVENT_USB_Device_ControlRequest+0xa2>
                    ReportSize = sizeof(keyboard_report_sent);
    170e:	60 e2       	ldi	r22, 0x20	; 32
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1710:	84 e5       	ldi	r24, 0x54	; 84
    1712:	91 e0       	ldi	r25, 0x01	; 1
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    171a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    171e:	8b 77       	andi	r24, 0x7B	; 123
    1720:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1724:	08 95       	ret
    uint8_t  ReportSize = 0;
    1726:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	f3 cf       	rjmp	.-26     	; 0x1714 <EVENT_USB_Device_ControlRequest+0x90>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    172e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1732:	81 11       	cpse	r24, r1
    1734:	ce cf       	rjmp	.-100    	; 0x16d2 <EVENT_USB_Device_ControlRequest+0x4e>
}
    1736:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1738:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    173c:	81 3a       	cpi	r24, 0xA1	; 161
    173e:	d9 f7       	brne	.-10     	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1740:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1744:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    1748:	89 2b       	or	r24, r25
    174a:	a9 f7       	brne	.-22     	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    174c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1750:	87 7f       	andi	r24, 0xF7	; 247
    1752:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1756:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    175a:	80 ff       	sbrs	r24, 0
    175c:	fc cf       	rjmp	.-8      	; 0x1756 <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    175e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
				UEDATX = Data;
    1762:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1766:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    176a:	8e 77       	andi	r24, 0x7E	; 126
    176c:	bd cf       	rjmp	.-134    	; 0x16e8 <EVENT_USB_Device_ControlRequest+0x64>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    176e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    1772:	81 32       	cpi	r24, 0x21	; 33
    1774:	01 f7       	brne	.-64     	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1776:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    177a:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    177e:	89 2b       	or	r24, r25
    1780:	d1 f6       	brne	.-76     	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1786:	87 7f       	andi	r24, 0xF7	; 247
    1788:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    178c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1790:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    1794:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    1798:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    179c:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    17a0:	81 32       	cpi	r24, 0x21	; 33
    17a2:	49 f6       	brne	.-110    	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
    17a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a8:	87 7f       	andi	r24, 0xF7	; 247
    17aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    17ae:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    17b2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x3>
    17b6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <keyboard_idle>
    17ba:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17bc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    17c0:	81 3a       	cpi	r24, 0xA1	; 161
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <EVENT_USB_Device_ControlRequest+0x142>
    17c4:	b8 cf       	rjmp	.-144    	; 0x1736 <EVENT_USB_Device_ControlRequest+0xb2>
    17c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    17d4:	80 ff       	sbrs	r24, 0
    17d6:	fc cf       	rjmp	.-8      	; 0x17d0 <EVENT_USB_Device_ControlRequest+0x14c>
                Endpoint_Write_8(keyboard_idle);
    17d8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    17dc:	c2 cf       	rjmp	.-124    	; 0x1762 <EVENT_USB_Device_ControlRequest+0xde>

000017de <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    17de:	08 95       	ret

000017e0 <hook_late_init>:
    17e0:	08 95       	ret

000017e2 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    17e2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    17e6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_led_stats>
    keyboard_led_stats = 0;
    17ea:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	0e 94 82 09 	call	0x1304	; 0x1304 <led_set>

    matrix_clear();
    17f4:	0e 94 ce 12 	call	0x259c	; 0x259c <matrix_clear>
    clear_keyboard();
    17f8:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <clear_keyboard>

000017fc <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    17fc:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <hook_usb_suspend_entry>

00001800 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1800:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1804:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_Device_RemoteWakeupEnabled>
    1808:	88 23       	and	r24, r24
    180a:	29 f0       	breq	.+10     	; 0x1816 <hook_usb_suspend_loop+0x16>
    180c:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <suspend_wakeup_condition>
    1810:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1812:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <USB_Device_SendRemoteWakeup>
    }
}
    1816:	08 95       	ret

00001818 <main>:
    MCUSR &= ~(1 << WDRF);
    1818:	84 b7       	in	r24, 0x34	; 52
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	84 bf       	out	0x34, r24	; 52
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	a8 95       	wdr
    1824:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1828:	88 61       	ori	r24, 0x18	; 24
    182a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    182e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1832:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1840:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1844:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    1846:	8c e8       	ldi	r24, 0x8C	; 140
    1848:	99 e0       	ldi	r25, 0x09	; 9
    184a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <print_set_sendchar>
    print("\r\ninit\n");
    184e:	83 e5       	ldi	r24, 0x53	; 83
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    hook_early_init();
    1856:	0e 94 ef 0b 	call	0x17de	; 0x17de <hook_early_init>
    keyboard_setup();
    185a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <keyboard_setup>
    USB_Disable();
    185e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <USB_Disable>
    USB_Init();
    1862:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <USB_Init>
    1866:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    186a:	84 60       	ori	r24, 0x04	; 4
    186c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    sei();
    1870:	78 94       	sei
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1872:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1876:	84 30       	cpi	r24, 0x04	; 4
    1878:	e1 f7       	brne	.-8      	; 0x1872 <main+0x5a>
    print("USB configured.\n");
    187a:	82 e4       	ldi	r24, 0x42	; 66
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    keyboard_init();
    1882:	0e 94 fd 11 	call	0x23fa	; 0x23fa <keyboard_init>
    host_set_driver(&lufa_driver);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	0e 94 39 11 	call	0x2272	; 0x2272 <host_set_driver>
    print("Keyboard start.\n");
    188e:	81 e3       	ldi	r24, 0x31	; 49
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    hook_late_init();
    1896:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <hook_late_init>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    189a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <main+0x90>
        keyboard_task();
    18a2:	0e 94 03 12 	call	0x2406	; 0x2406 <keyboard_task>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    18a6:	f9 cf       	rjmp	.-14     	; 0x189a <main+0x82>
            hook_usb_suspend_loop();
    18a8:	0e 94 00 0c 	call	0x1800	; 0x1800 <hook_usb_suspend_loop>
    18ac:	f6 cf       	rjmp	.-20     	; 0x189a <main+0x82>

000018ae <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    18ae:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    18b2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_led_stats>
    18b6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
}
    18ba:	08 95       	ret

000018bc <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    18bc:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <hook_usb_wakeup>

000018c0 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    18c0:	29 2f       	mov	r18, r25
    18c2:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    18c4:	23 30       	cpi	r18, 0x03	; 3
    18c6:	31 05       	cpc	r19, r1
    18c8:	79 f1       	breq	.+94     	; 0x1928 <CALLBACK_USB_GetDescriptor+0x68>
    18ca:	58 f4       	brcc	.+22     	; 0x18e2 <CALLBACK_USB_GetDescriptor+0x22>
    18cc:	21 30       	cpi	r18, 0x01	; 1
    18ce:	31 05       	cpc	r19, r1
    18d0:	f1 f0       	breq	.+60     	; 0x190e <CALLBACK_USB_GetDescriptor+0x4e>
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	19 f1       	breq	.+70     	; 0x191e <CALLBACK_USB_GetDescriptor+0x5e>
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	1a c0       	rjmp	.+52     	; 0x1916 <CALLBACK_USB_GetDescriptor+0x56>
    switch (DescriptorType)
    18e2:	21 32       	cpi	r18, 0x21	; 33
    18e4:	31 05       	cpc	r19, r1
    18e6:	99 f1       	breq	.+102    	; 0x194e <CALLBACK_USB_GetDescriptor+0x8e>
    18e8:	22 32       	cpi	r18, 0x22	; 34
    18ea:	31 05       	cpc	r19, r1
    18ec:	a9 f7       	brne	.-22     	; 0x18d8 <CALLBACK_USB_GetDescriptor+0x18>
    18ee:	65 30       	cpi	r22, 0x05	; 5
    18f0:	98 f7       	brcc	.-26     	; 0x18d8 <CALLBACK_USB_GetDescriptor+0x18>
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	fb 01       	movw	r30, r22
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	e6 5e       	subi	r30, 0xE6	; 230
    18fc:	fe 4f       	sbci	r31, 0xFE	; 254
    18fe:	20 81       	ld	r18, Z
    1900:	31 81       	ldd	r19, Z+1	; 0x01
    1902:	6b 5e       	subi	r22, 0xEB	; 235
    1904:	7e 4f       	sbci	r23, 0xFE	; 254
    1906:	fb 01       	movw	r30, r22
    1908:	80 81       	ld	r24, Z
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <CALLBACK_USB_GetDescriptor+0x56>
            Size    = sizeof(USB_Descriptor_Device_t);
    190e:	82 e1       	ldi	r24, 0x12	; 18
    1910:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    1912:	24 e1       	ldi	r18, 0x14	; 20
    1914:	34 e0       	ldi	r19, 0x04	; 4
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1916:	fa 01       	movw	r30, r20
    1918:	31 83       	std	Z+1, r19	; 0x01
    191a:	20 83       	st	Z, r18
    return Size;
}
    191c:	08 95       	ret
            Size    = sizeof(USB_Descriptor_Configuration_t);
    191e:	8d e8       	ldi	r24, 0x8D	; 141
    1920:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    1922:	27 e8       	ldi	r18, 0x87	; 135
    1924:	33 e0       	ldi	r19, 0x03	; 3
            break;
    1926:	f7 cf       	rjmp	.-18     	; 0x1916 <CALLBACK_USB_GetDescriptor+0x56>
            switch (DescriptorIndex )
    1928:	99 27       	eor	r25, r25
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	61 f0       	breq	.+24     	; 0x1948 <CALLBACK_USB_GetDescriptor+0x88>
    1930:	28 f0       	brcs	.+10     	; 0x193c <CALLBACK_USB_GetDescriptor+0x7c>
    1932:	02 97       	sbiw	r24, 0x02	; 2
    1934:	89 f6       	brne	.-94     	; 0x18d8 <CALLBACK_USB_GetDescriptor+0x18>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1936:	e3 e6       	ldi	r30, 0x63	; 99
    1938:	f3 e0       	ldi	r31, 0x03	; 3
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <CALLBACK_USB_GetDescriptor+0x80>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    193c:	e3 e8       	ldi	r30, 0x83	; 131
    193e:	f3 e0       	ldi	r31, 0x03	; 3
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1940:	84 91       	lpm	r24, Z
    1942:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    1944:	9f 01       	movw	r18, r30
                    break;
    1946:	e7 cf       	rjmp	.-50     	; 0x1916 <CALLBACK_USB_GetDescriptor+0x56>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1948:	ef e6       	ldi	r30, 0x6F	; 111
    194a:	f3 e0       	ldi	r31, 0x03	; 3
    194c:	f9 cf       	rjmp	.-14     	; 0x1940 <CALLBACK_USB_GetDescriptor+0x80>
    194e:	65 30       	cpi	r22, 0x05	; 5
    1950:	08 f0       	brcs	.+2      	; 0x1954 <CALLBACK_USB_GetDescriptor+0x94>
    1952:	c2 cf       	rjmp	.-124    	; 0x18d8 <CALLBACK_USB_GetDescriptor+0x18>
    1954:	e6 2f       	mov	r30, r22
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	ec 5d       	subi	r30, 0xDC	; 220
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	20 81       	ld	r18, Z
    1962:	31 81       	ldd	r19, Z+1	; 0x01
        case HID_DTYPE_HID:
    1964:	89 e0       	ldi	r24, 0x09	; 9
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	d6 cf       	rjmp	.-84     	; 0x1916 <CALLBACK_USB_GetDescriptor+0x56>

0000196a <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    196a:	80 e1       	ldi	r24, 0x10	; 16
    196c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    196e:	82 e1       	ldi	r24, 0x12	; 18
    1970:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1972:	09 b4       	in	r0, 0x29	; 41
    1974:	00 fe       	sbrs	r0, 0
    1976:	fd cf       	rjmp	.-6      	; 0x1972 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1978:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    197c:	8f 7d       	andi	r24, 0xDF	; 223
    197e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1982:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    198c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1990:	81 fd       	sbrc	r24, 1
    1992:	fc cf       	rjmp	.-8      	; 0x198c <USB_Device_SendRemoteWakeup+0x22>
}
    1994:	08 95       	ret

00001996 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1996:	af 92       	push	r10
    1998:	bf 92       	push	r11
    199a:	cf 92       	push	r12
    199c:	df 92       	push	r13
    199e:	ff 92       	push	r15
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	6c 01       	movw	r12, r24
    19aa:	eb 01       	movw	r28, r22
    19ac:	8a 01       	movw	r16, r20
    19ae:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <Endpoint_WaitUntilReady>
    19b2:	f8 2e       	mov	r15, r24
    19b4:	81 11       	cpse	r24, r1
    19b6:	23 c0       	rjmp	.+70     	; 0x19fe <Endpoint_Write_Stream_LE+0x68>
    19b8:	01 15       	cp	r16, r1
    19ba:	11 05       	cpc	r17, r1
    19bc:	39 f0       	breq	.+14     	; 0x19cc <Endpoint_Write_Stream_LE+0x36>
    19be:	f8 01       	movw	r30, r16
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	c8 1b       	sub	r28, r24
    19c6:	d9 0b       	sbc	r29, r25
    19c8:	c8 0e       	add	r12, r24
    19ca:	d9 1e       	adc	r13, r25
    19cc:	b1 2c       	mov	r11, r1
    19ce:	a1 2c       	mov	r10, r1
    19d0:	20 97       	sbiw	r28, 0x00	; 0
    19d2:	a9 f0       	breq	.+42     	; 0x19fe <Endpoint_Write_Stream_LE+0x68>
    19d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19d8:	85 fd       	sbrc	r24, 5
    19da:	22 c0       	rjmp	.+68     	; 0x1a20 <Endpoint_Write_Stream_LE+0x8a>
    19dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19e0:	8e 77       	andi	r24, 0x7E	; 126
    19e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19e6:	01 15       	cp	r16, r1
    19e8:	11 05       	cpc	r17, r1
    19ea:	a1 f0       	breq	.+40     	; 0x1a14 <Endpoint_Write_Stream_LE+0x7e>
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	a8 0e       	add	r10, r24
    19f4:	b9 1e       	adc	r11, r25
    19f6:	b1 82       	std	Z+1, r11	; 0x01
    19f8:	a0 82       	st	Z, r10
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	f8 2e       	mov	r15, r24
    19fe:	8f 2d       	mov	r24, r15
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	08 95       	ret
    1a14:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <Endpoint_WaitUntilReady>
    1a18:	88 23       	and	r24, r24
    1a1a:	d1 f2       	breq	.-76     	; 0x19d0 <Endpoint_Write_Stream_LE+0x3a>
    1a1c:	f8 2e       	mov	r15, r24
    1a1e:	ef cf       	rjmp	.-34     	; 0x19fe <Endpoint_Write_Stream_LE+0x68>
    1a20:	f6 01       	movw	r30, r12
    1a22:	81 91       	ld	r24, Z+
    1a24:	6f 01       	movw	r12, r30
    1a26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a2a:	21 97       	sbiw	r28, 0x01	; 1
    1a2c:	ff ef       	ldi	r31, 0xFF	; 255
    1a2e:	af 1a       	sub	r10, r31
    1a30:	bf 0a       	sbc	r11, r31
    1a32:	ce cf       	rjmp	.-100    	; 0x19d0 <Endpoint_Write_Stream_LE+0x3a>

00001a34 <Endpoint_Write_Control_Stream_LE>:
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USB_ControlRequest+0x6>
    1a3a:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <USB_ControlRequest+0x7>
    1a3e:	86 17       	cp	r24, r22
    1a40:	97 07       	cpc	r25, r23
    1a42:	a0 f0       	brcs	.+40     	; 0x1a6c <Endpoint_Write_Control_Stream_LE+0x38>
    1a44:	61 15       	cp	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <Endpoint_Write_Control_Stream_LE+0x20>
    1a4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a4e:	9e 77       	andi	r25, 0x7E	; 126
    1a50:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	61 15       	cp	r22, r1
    1a58:	71 05       	cpc	r23, r1
    1a5a:	51 f4       	brne	.+20     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0x3c>
    1a5c:	91 11       	cpse	r25, r1
    1a5e:	08 c0       	rjmp	.+16     	; 0x1a70 <Endpoint_Write_Control_Stream_LE+0x3c>
    1a60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a64:	82 ff       	sbrs	r24, 2
    1a66:	35 c0       	rjmp	.+106    	; 0x1ad2 <Endpoint_Write_Control_Stream_LE+0x9e>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	08 95       	ret
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	f2 cf       	rjmp	.-28     	; 0x1a54 <Endpoint_Write_Control_Stream_LE+0x20>
    1a70:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1a74:	88 23       	and	r24, r24
    1a76:	c9 f1       	breq	.+114    	; 0x1aea <Endpoint_Write_Control_Stream_LE+0xb6>
    1a78:	85 30       	cpi	r24, 0x05	; 5
    1a7a:	c9 f1       	breq	.+114    	; 0x1aee <Endpoint_Write_Control_Stream_LE+0xba>
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a80:	83 fd       	sbrc	r24, 3
    1a82:	31 c0       	rjmp	.+98     	; 0x1ae6 <Endpoint_Write_Control_Stream_LE+0xb2>
    1a84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a88:	82 fd       	sbrc	r24, 2
    1a8a:	ea cf       	rjmp	.-44     	; 0x1a60 <Endpoint_Write_Control_Stream_LE+0x2c>
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a90:	80 ff       	sbrs	r24, 0
    1a92:	e1 cf       	rjmp	.-62     	; 0x1a56 <Endpoint_Write_Control_Stream_LE+0x22>
    1a94:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a98:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a9c:	32 2f       	mov	r19, r18
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	61 15       	cp	r22, r1
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <Endpoint_Write_Control_Stream_LE+0x78>
    1aa6:	28 30       	cpi	r18, 0x08	; 8
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	58 f0       	brcs	.+22     	; 0x1ac2 <Endpoint_Write_Control_Stream_LE+0x8e>
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	28 30       	cpi	r18, 0x08	; 8
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <Endpoint_Write_Control_Stream_LE+0x82>
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aba:	2e 77       	andi	r18, 0x7E	; 126
    1abc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac0:	ca cf       	rjmp	.-108    	; 0x1a56 <Endpoint_Write_Control_Stream_LE+0x22>
    1ac2:	81 91       	ld	r24, Z+
    1ac4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ac8:	61 50       	subi	r22, 0x01	; 1
    1aca:	71 09       	sbc	r23, r1
    1acc:	2f 5f       	subi	r18, 0xFF	; 255
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	e7 cf       	rjmp	.-50     	; 0x1aa0 <Endpoint_Write_Control_Stream_LE+0x6c>
    1ad2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1ad6:	88 23       	and	r24, r24
    1ad8:	41 f0       	breq	.+16     	; 0x1aea <Endpoint_Write_Control_Stream_LE+0xb6>
    1ada:	85 30       	cpi	r24, 0x05	; 5
    1adc:	41 f0       	breq	.+16     	; 0x1aee <Endpoint_Write_Control_Stream_LE+0xba>
    1ade:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ae2:	83 ff       	sbrs	r24, 3
    1ae4:	bd cf       	rjmp	.-134    	; 0x1a60 <Endpoint_Write_Control_Stream_LE+0x2c>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	08 95       	ret
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	08 95       	ret
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	08 95       	ret

00001af2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1af2:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1af4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USB_ControlRequest+0x6>
    1af8:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <USB_ControlRequest+0x7>
    1afc:	86 17       	cp	r24, r22
    1afe:	97 07       	cpc	r25, r23
    1b00:	a0 f0       	brcs	.+40     	; 0x1b2a <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b02:	61 15       	cp	r22, r1
    1b04:	71 05       	cpc	r23, r1
    1b06:	29 f4       	brne	.+10     	; 0x1b12 <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b0c:	8e 77       	andi	r24, 0x7E	; 126
    1b0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b12:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b14:	61 15       	cp	r22, r1
    1b16:	71 05       	cpc	r23, r1
    1b18:	51 f4       	brne	.+20     	; 0x1b2e <Endpoint_Write_Control_PStream_LE+0x3c>
    1b1a:	91 11       	cpse	r25, r1
    1b1c:	08 c0       	rjmp	.+16     	; 0x1b2e <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b22:	82 ff       	sbrs	r24, 2
    1b24:	36 c0       	rjmp	.+108    	; 0x1b92 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	08 95       	ret
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	f2 cf       	rjmp	.-28     	; 0x1b12 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b2e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b32:	88 23       	and	r24, r24
    1b34:	d1 f1       	breq	.+116    	; 0x1baa <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b36:	85 30       	cpi	r24, 0x05	; 5
    1b38:	d1 f1       	breq	.+116    	; 0x1bae <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1b3e:	83 fd       	sbrc	r24, 3
    1b40:	32 c0       	rjmp	.+100    	; 0x1ba6 <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1b46:	82 fd       	sbrc	r24, 2
    1b48:	ea cf       	rjmp	.-44     	; 0x1b1e <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1b4e:	80 ff       	sbrs	r24, 0
    1b50:	e1 cf       	rjmp	.-62     	; 0x1b14 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b52:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1b56:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b5a:	32 2f       	mov	r19, r18
    1b5c:	28 2f       	mov	r18, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <Endpoint_Write_Control_PStream_LE+0x78>
    1b64:	28 30       	cpi	r18, 0x08	; 8
    1b66:	31 05       	cpc	r19, r1
    1b68:	58 f0       	brcs	.+22     	; 0x1b80 <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	28 30       	cpi	r18, 0x08	; 8
    1b6e:	31 05       	cpc	r19, r1
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <Endpoint_Write_Control_PStream_LE+0x82>
    1b72:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b78:	8e 77       	andi	r24, 0x7E	; 126
    1b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b7e:	ca cf       	rjmp	.-108    	; 0x1b14 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b80:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b86:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1b88:	61 50       	subi	r22, 0x01	; 1
    1b8a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	e6 cf       	rjmp	.-52     	; 0x1b5e <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b92:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b96:	88 23       	and	r24, r24
    1b98:	41 f0       	breq	.+16     	; 0x1baa <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b9a:	85 30       	cpi	r24, 0x05	; 5
    1b9c:	41 f0       	breq	.+16     	; 0x1bae <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1ba2:	83 ff       	sbrs	r24, 3
    1ba4:	bc cf       	rjmp	.-136    	; 0x1b1e <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
}
    1ba8:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	08 95       	ret

00001bb2 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	97 30       	cpi	r25, 0x07	; 7
    1bb6:	28 f0       	brcs	.+10     	; 0x1bc2 <Endpoint_ConfigureEndpoint_Prv+0x10>
    1bb8:	8f 70       	andi	r24, 0x0F	; 15
    1bba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	08 95       	ret
    1bc2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1bc6:	24 2f       	mov	r18, r20
    1bc8:	76 2f       	mov	r23, r22
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	98 17       	cp	r25, r24
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1bd0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1bd4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1bd8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1bdc:	21 fd       	sbrc	r18, 1
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <Endpoint_ConfigureEndpoint_Prv+0x32>
    1be0:	9f 5f       	subi	r25, 0xFF	; 255
    1be2:	e8 cf       	rjmp	.-48     	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1be4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1be8:	3e 7f       	andi	r19, 0xFE	; 254
    1bea:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1bee:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1bf2:	3d 7f       	andi	r19, 0xFD	; 253
    1bf4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1bf8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1bfc:	31 60       	ori	r19, 0x01	; 1
    1bfe:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c02:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1c06:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1c0a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1c0e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1c12:	27 fd       	sbrc	r18, 7
    1c14:	e5 cf       	rjmp	.-54     	; 0x1be0 <Endpoint_ConfigureEndpoint_Prv+0x2e>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	08 95       	ret

00001c1a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c1a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    1c1e:	87 ff       	sbrs	r24, 7
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1c26:	82 ff       	sbrs	r24, 2
    1c28:	06 c0       	rjmp	.+12     	; 0x1c36 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c2e:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c36:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	f2 cf       	rjmp	.-28     	; 0x1c22 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1c3e:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c40:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1c44:	88 23       	and	r24, r24
    1c46:	d9 f3       	breq	.-10     	; 0x1c3e <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1c4c:	80 ff       	sbrs	r24, 0
    1c4e:	f8 cf       	rjmp	.-16     	; 0x1c40 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c54:	8e 77       	andi	r24, 0x7E	; 126
    1c56:	ec cf       	rjmp	.-40     	; 0x1c30 <Endpoint_ClearStatusStage+0x16>

00001c58 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c58:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1c5c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1c60:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c62:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1c66:	90 ff       	sbrs	r25, 0
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c6a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c6e:	90 ff       	sbrs	r25, 0
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c76:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c7a:	92 fd       	sbrc	r25, 2
    1c7c:	fa cf       	rjmp	.-12     	; 0x1c72 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c7e:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c82:	99 23       	and	r25, r25
    1c84:	91 f0       	breq	.+36     	; 0x1caa <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c86:	95 30       	cpi	r25, 0x05	; 5
    1c88:	91 f0       	breq	.+36     	; 0x1cae <Endpoint_WaitUntilReady+0x56>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c8a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c8e:	95 fd       	sbrc	r25, 5
    1c90:	10 c0       	rjmp	.+32     	; 0x1cb2 <Endpoint_WaitUntilReady+0x5a>
    1c92:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1c96:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c9a:	24 17       	cp	r18, r20
    1c9c:	35 07       	cpc	r19, r21
    1c9e:	09 f3       	breq	.-62     	; 0x1c62 <Endpoint_WaitUntilReady+0xa>
    1ca0:	81 50       	subi	r24, 0x01	; 1
    1ca2:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ca4:	f1 f6       	brne	.-68     	; 0x1c62 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ca6:	84 e0       	ldi	r24, 0x04	; 4
    1ca8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1cb4:	08 95       	ret

00001cb6 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1cb6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cba:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1cbe:	e0 ee       	ldi	r30, 0xE0	; 224
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1cc8:	e8 ed       	ldi	r30, 0xD8	; 216
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 77       	andi	r24, 0x7F	; 127
    1cd0:	80 83       	st	Z, r24
				PLLCSR = 0;
    1cd2:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1cd4:	a7 ed       	ldi	r26, 0xD7	; 215
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	8c 91       	ld	r24, X
    1cda:	8e 7f       	andi	r24, 0xFE	; 254
    1cdc:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 7e       	andi	r24, 0xEF	; 239
    1ce2:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1ce4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_IsInitialized>
}
    1ce8:	08 95       	ret

00001cea <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cf2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cf6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cfa:	c8 ed       	ldi	r28, 0xD8	; 216
    1cfc:	d0 e0       	ldi	r29, 0x00	; 0
    1cfe:	88 81       	ld	r24, Y
    1d00:	8f 77       	andi	r24, 0x7F	; 127
    1d02:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1d04:	88 81       	ld	r24, Y
    1d06:	80 68       	ori	r24, 0x80	; 128
    1d08:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1d0a:	88 81       	ld	r24, Y
    1d0c:	8f 7d       	andi	r24, 0xDF	; 223
    1d0e:	88 83       	st	Y, r24
				PLLCSR = 0;
    1d10:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d12:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1d16:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d1a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d1e:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d22:	00 ee       	ldi	r16, 0xE0	; 224
    1d24:	10 e0       	ldi	r17, 0x00	; 0
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 81       	ld	r24, Z
    1d2a:	8b 7f       	andi	r24, 0xFB	; 251
    1d2c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d2e:	88 81       	ld	r24, Y
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d34:	42 e0       	ldi	r20, 0x02	; 2
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d3e:	e1 ee       	ldi	r30, 0xE1	; 225
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8e 7f       	andi	r24, 0xFE	; 254
    1d46:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1d48:	e2 ee       	ldi	r30, 0xE2	; 226
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	81 60       	ori	r24, 0x01	; 1
    1d50:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1d52:	80 81       	ld	r24, Z
    1d54:	88 60       	ori	r24, 0x08	; 8
    1d56:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1d58:	f8 01       	movw	r30, r16
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1d60:	88 81       	ld	r24, Y
    1d62:	80 61       	ori	r24, 0x10	; 16
    1d64:	88 83       	st	Y, r24
}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1d70:	e8 ed       	ldi	r30, 0xD8	; 216
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7e       	andi	r24, 0xEF	; 239
    1d78:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1d7a:	e7 ed       	ldi	r30, 0xD7	; 215
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	81 60       	ori	r24, 0x01	; 1
    1d82:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1d84:	84 e0       	ldi	r24, 0x04	; 4
    1d86:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <USB_IsInitialized>
	USB_ResetInterface();
    1d8e:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <USB_ResetInterface>

00001d92 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d92:	e8 ed       	ldi	r30, 0xD8	; 216
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d9c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1da0:	08 95       	ret

00001da2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1da2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1da6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1daa:	08 95       	ret

00001dac <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1dac:	1f 92       	push	r1
    1dae:	0f 92       	push	r0
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	0f 92       	push	r0
    1db4:	11 24       	eor	r1, r1
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	4f 93       	push	r20
    1dbc:	5f 93       	push	r21
    1dbe:	6f 93       	push	r22
    1dc0:	7f 93       	push	r23
    1dc2:	8f 93       	push	r24
    1dc4:	9f 93       	push	r25
    1dc6:	af 93       	push	r26
    1dc8:	bf 93       	push	r27
    1dca:	ef 93       	push	r30
    1dcc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1dce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1dd2:	82 ff       	sbrs	r24, 2
    1dd4:	0b c0       	rjmp	.+22     	; 0x1dec <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1dd6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dda:	82 ff       	sbrs	r24, 2
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1dde:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1de2:	8b 7f       	andi	r24, 0xFB	; 251
    1de4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1de8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    1dec:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1df0:	80 ff       	sbrs	r24, 0
    1df2:	19 c0       	rjmp	.+50     	; 0x1e26 <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1df4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1df8:	80 ff       	sbrs	r24, 0
    1dfa:	15 c0       	rjmp	.+42     	; 0x1e26 <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1dfc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1e00:	8e 7f       	andi	r24, 0xFE	; 254
    1e02:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e06:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e0a:	80 ff       	sbrs	r24, 0
    1e0c:	94 c0       	rjmp	.+296    	; 0x1f36 <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    1e0e:	80 e1       	ldi	r24, 0x10	; 16
    1e10:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e12:	82 e1       	ldi	r24, 0x12	; 18
    1e14:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e16:	09 b4       	in	r0, 0x29	; 41
    1e18:	00 fe       	sbrs	r0, 0
    1e1a:	fd cf       	rjmp	.-6      	; 0x1e16 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1e22:	0e 94 cd 0a 	call	0x159a	; 0x159a <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1e26:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	19 c0       	rjmp	.+50     	; 0x1e60 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1e2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e32:	80 ff       	sbrs	r24, 0
    1e34:	15 c0       	rjmp	.+42     	; 0x1e60 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1e36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e3a:	8e 7f       	andi	r24, 0xFE	; 254
    1e3c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1e40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e44:	80 61       	ori	r24, 0x10	; 16
    1e46:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1e4a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e4e:	80 62       	ori	r24, 0x20	; 32
    1e50:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1e54:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e56:	85 e0       	ldi	r24, 0x05	; 5
    1e58:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1e5c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1e60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e64:	84 ff       	sbrs	r24, 4
    1e66:	29 c0       	rjmp	.+82     	; 0x1eba <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    1e68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e6c:	84 ff       	sbrs	r24, 4
    1e6e:	25 c0       	rjmp	.+74     	; 0x1eba <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    1e70:	80 e1       	ldi	r24, 0x10	; 16
    1e72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e74:	82 e1       	ldi	r24, 0x12	; 18
    1e76:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e78:	09 b4       	in	r0, 0x29	; 41
    1e7a:	00 fe       	sbrs	r0, 0
    1e7c:	fd cf       	rjmp	.-6      	; 0x1e78 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1e7e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e82:	8f 7d       	andi	r24, 0xDF	; 223
    1e84:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1e88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1e8c:	8f 7e       	andi	r24, 0xEF	; 239
    1e8e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1e92:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e96:	8f 7e       	andi	r24, 0xEF	; 239
    1e98:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1e9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ea0:	81 60       	ori	r24, 0x01	; 1
    1ea2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ea6:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
    1eaa:	88 23       	and	r24, r24
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <__vector_10+0x104>
    1eae:	49 c0       	rjmp	.+146    	; 0x1f42 <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1eb0:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1eb2:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1eb6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1eba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ebe:	83 ff       	sbrs	r24, 3
    1ec0:	29 c0       	rjmp	.+82     	; 0x1f14 <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    1ec2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ec6:	83 ff       	sbrs	r24, 3
    1ec8:	25 c0       	rjmp	.+74     	; 0x1f14 <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    1eca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ece:	87 7f       	andi	r24, 0xF7	; 247
    1ed0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1eda:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1ede:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ee2:	8e 7f       	andi	r24, 0xFE	; 254
    1ee4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1ee8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1eec:	8e 7f       	andi	r24, 0xFE	; 254
    1eee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1ef2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ef6:	80 61       	ori	r24, 0x10	; 16
    1ef8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1efc:	42 e0       	ldi	r20, 0x02	; 2
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1f06:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f0a:	88 60       	ori	r24, 0x08	; 8
    1f0c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f10:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti
				PLLCSR = 0;
    1f36:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1f38:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1f3c:	0e 94 df 0a 	call	0x15be	; 0x15be <EVENT_USB_Device_Disconnect>
    1f40:	72 cf       	rjmp	.-284    	; 0x1e26 <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f42:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f46:	87 fd       	sbrc	r24, 7
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <__vector_10+0x1a2>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	b2 cf       	rjmp	.-156    	; 0x1eb2 <__vector_10+0x106>
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	b0 cf       	rjmp	.-160    	; 0x1eb2 <__vector_10+0x106>

00001f52 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	4f 93       	push	r20
    1f62:	5f 93       	push	r21
    1f64:	6f 93       	push	r22
    1f66:	7f 93       	push	r23
    1f68:	8f 93       	push	r24
    1f6a:	9f 93       	push	r25
    1f6c:	af 93       	push	r26
    1f6e:	bf 93       	push	r27
    1f70:	cf 93       	push	r28
    1f72:	ef 93       	push	r30
    1f74:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f76:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f7a:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f7c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f80:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1f84:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f88:	87 7f       	andi	r24, 0xF7	; 247
    1f8a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f8e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f90:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <USB_Device_ProcessControlRequest>
    1f94:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1f98:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f9c:	88 60       	ori	r24, 0x08	; 8
    1f9e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fa2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1fa6:	ff 91       	pop	r31
    1fa8:	ef 91       	pop	r30
    1faa:	cf 91       	pop	r28
    1fac:	bf 91       	pop	r27
    1fae:	af 91       	pop	r26
    1fb0:	9f 91       	pop	r25
    1fb2:	8f 91       	pop	r24
    1fb4:	7f 91       	pop	r23
    1fb6:	6f 91       	pop	r22
    1fb8:	5f 91       	pop	r21
    1fba:	4f 91       	pop	r20
    1fbc:	3f 91       	pop	r19
    1fbe:	2f 91       	pop	r18
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	0f 90       	pop	r0
    1fc6:	1f 90       	pop	r1
    1fc8:	18 95       	reti

00001fca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	aa 97       	sbiw	r28, 0x2a	; 42
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	eb e4       	ldi	r30, 0x4B	; 75
    1fe2:	f2 e0       	ldi	r31, 0x02	; 2
				return UEDATX;
    1fe4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1fe8:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1fea:	22 e0       	ldi	r18, 0x02	; 2
    1fec:	e3 35       	cpi	r30, 0x53	; 83
    1fee:	f2 07       	cpc	r31, r18
    1ff0:	c9 f7       	brne	.-14     	; 0x1fe4 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1ff2:	0e 94 42 0b 	call	0x1684	; 0x1684 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ff6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1ffa:	83 ff       	sbrs	r24, 3
    1ffc:	42 c0       	rjmp	.+132    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1ffe:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    2002:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <USB_ControlRequest+0x1>
    2006:	9a 30       	cpi	r25, 0x0A	; 10
    2008:	08 f0       	brcs	.+2      	; 0x200c <USB_Device_ProcessControlRequest+0x42>
    200a:	3b c0       	rjmp	.+118    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
    200c:	e9 2f       	mov	r30, r25
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	e4 5f       	subi	r30, 0xF4	; 244
    2012:	ff 4e       	sbci	r31, 0xEF	; 239
    2014:	0c 94 d5 2b 	jmp	0x57aa	; 0x57aa <__tablejump2__>
    2018:	16 10       	cpse	r1, r6
    201a:	3a 10       	cpse	r3, r10
    201c:	41 10       	cpse	r4, r1
    201e:	3a 10       	cpse	r3, r10
    2020:	41 10       	cpse	r4, r1
    2022:	95 10       	cpse	r9, r5
    2024:	b7 10       	cpse	r11, r7
    2026:	41 10       	cpse	r4, r1
    2028:	0c 11       	cpse	r16, r12
    202a:	19 11       	cpse	r17, r9
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    202c:	80 38       	cpi	r24, 0x80	; 128
    202e:	79 f0       	breq	.+30     	; 0x204e <USB_Device_ProcessControlRequest+0x84>
    2030:	82 38       	cpi	r24, 0x82	; 130
    2032:	39 f5       	brne	.+78     	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2034:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    2038:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    203a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    203e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2042:	85 fb       	bst	r24, 5
    2044:	88 27       	eor	r24, r24
    2046:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2048:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    204c:	06 c0       	rjmp	.+12     	; 0x205a <USB_Device_ProcessControlRequest+0x90>
	uint8_t CurrentStatus = 0;
    204e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    2052:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <USB_Device_RemoteWakeupEnabled>
    2056:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2058:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    205a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    205e:	97 7f       	andi	r25, 0xF7	; 247
    2060:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2064:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    2068:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    206c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2070:	8e 77       	andi	r24, 0x7E	; 126
    2072:	2d c0       	rjmp	.+90     	; 0x20ce <USB_Device_ProcessControlRequest+0x104>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2074:	28 2f       	mov	r18, r24
    2076:	2d 7f       	andi	r18, 0xFD	; 253
    2078:	21 f4       	brne	.+8      	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    207a:	88 23       	and	r24, r24
    207c:	d1 f0       	breq	.+52     	; 0x20b2 <USB_Device_ProcessControlRequest+0xe8>
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	59 f1       	breq	.+86     	; 0x20d8 <USB_Device_ProcessControlRequest+0x10e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2082:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    2086:	83 ff       	sbrs	r24, 3
    2088:	0a c0       	rjmp	.+20     	; 0x209e <USB_Device_ProcessControlRequest+0xd4>
				UEINTX &= ~(1 << RXSTPI);
    208a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    208e:	87 7f       	andi	r24, 0xF7	; 247
    2090:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    2094:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2098:	80 62       	ori	r24, 0x20	; 32
    209a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    209e:	aa 96       	adiw	r28, 0x2a	; 42
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    20b2:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	21 f7       	brne	.-56     	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    20ba:	93 30       	cpi	r25, 0x03	; 3
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <USB_Device_ProcessControlRequest+0xf6>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20c4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    20c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20cc:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    20d2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
    20d6:	d5 cf       	rjmp	.-86     	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    20d8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    20dc:	81 11       	cpse	r24, r1
    20de:	f2 cf       	rjmp	.-28     	; 0x20c4 <USB_Device_ProcessControlRequest+0xfa>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    20e0:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    20e4:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    20e6:	69 f2       	breq	.-102    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    20ec:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    20f0:	20 ff       	sbrs	r18, 0
    20f2:	e8 cf       	rjmp	.-48     	; 0x20c4 <USB_Device_ProcessControlRequest+0xfa>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    20f4:	93 30       	cpi	r25, 0x03	; 3
    20f6:	31 f4       	brne	.+12     	; 0x2104 <USB_Device_ProcessControlRequest+0x13a>
				UECONX |= (1 << STALLRQ);
    20f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    20fc:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    20fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2102:	e0 cf       	rjmp	.-64     	; 0x20c4 <USB_Device_ProcessControlRequest+0xfa>
				UECONX |= (1 << STALLRQC);
    2104:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2108:	90 61       	ori	r25, 0x10	; 16
    210a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    210e:	21 e0       	ldi	r18, 0x01	; 1
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <USB_Device_ProcessControlRequest+0x14c>
    2114:	22 0f       	add	r18, r18
    2116:	8a 95       	dec	r24
    2118:	ea f7       	brpl	.-6      	; 0x2114 <USB_Device_ProcessControlRequest+0x14a>
    211a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    211e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    2122:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2126:	88 60       	ori	r24, 0x08	; 8
    2128:	ea cf       	rjmp	.-44     	; 0x20fe <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    212a:	81 11       	cpse	r24, r1
    212c:	aa cf       	rjmp	.-172    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    212e:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    2132:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2134:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2138:	80 78       	andi	r24, 0x80	; 128
    213a:	81 2b       	or	r24, r17
    213c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    2140:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2144:	87 7f       	andi	r24, 0xF7	; 247
    2146:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    214a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    214e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    2152:	80 ff       	sbrs	r24, 0
    2154:	fc cf       	rjmp	.-8      	; 0x214e <USB_Device_ProcessControlRequest+0x184>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2156:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    215a:	80 68       	ori	r24, 0x80	; 128
    215c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	11 11       	cpse	r17, r1
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <USB_Device_ProcessControlRequest+0x19e>
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
    216c:	8a cf       	rjmp	.-236    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    216e:	80 58       	subi	r24, 0x80	; 128
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	08 f0       	brcs	.+2      	; 0x2176 <USB_Device_ProcessControlRequest+0x1ac>
    2174:	86 cf       	rjmp	.-244    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2176:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    217a:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <USB_ControlRequest+0x3>
    217e:	8c 3d       	cpi	r24, 0xDC	; 220
    2180:	23 e0       	ldi	r18, 0x03	; 3
    2182:	92 07       	cpc	r25, r18
    2184:	a1 f5       	brne	.+104    	; 0x21ee <USB_Device_ProcessControlRequest+0x224>
	SignatureDescriptor.Header.Type = DTYPE_String;
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    218a:	8a e2       	ldi	r24, 0x2A	; 42
    218c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    218e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2190:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2192:	de 01       	movw	r26, r28
    2194:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2196:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2198:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    219a:	51 e2       	ldi	r21, 0x21	; 33
    219c:	e3 2f       	mov	r30, r19
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    21a4:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    21a6:	20 ff       	sbrs	r18, 0
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <USB_Device_ProcessControlRequest+0x1e6>
					{
						SerialByte >>= 4;
    21aa:	e2 95       	swap	r30
    21ac:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    21ae:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    21b0:	ef 70       	andi	r30, 0x0F	; 15
    21b2:	8e 2f       	mov	r24, r30
    21b4:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    21b6:	ea 30       	cpi	r30, 0x0A	; 10
    21b8:	c0 f0       	brcs	.+48     	; 0x21ea <USB_Device_ProcessControlRequest+0x220>
    21ba:	c7 96       	adiw	r24, 0x37	; 55
    21bc:	8d 93       	st	X+, r24
    21be:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21c0:	2f 5f       	subi	r18, 0xFF	; 255
    21c2:	24 31       	cpi	r18, 0x14	; 20
    21c4:	59 f7       	brne	.-42     	; 0x219c <USB_Device_ProcessControlRequest+0x1d2>
				SREG = GlobalIntState;
    21c6:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    21c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21cc:	87 7f       	andi	r24, 0xF7	; 247
    21ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    21d2:	6a e2       	ldi	r22, 0x2A	; 42
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	ce 01       	movw	r24, r28
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    21de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21e2:	8b 77       	andi	r24, 0x7B	; 123
    21e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21e8:	4c cf       	rjmp	.-360    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    21ea:	c0 96       	adiw	r24, 0x30	; 48
    21ec:	e7 cf       	rjmp	.-50     	; 0x21bc <USB_Device_ProcessControlRequest+0x1f2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    21ee:	ae 01       	movw	r20, r28
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    21f8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <CALLBACK_USB_GetDescriptor>
    21fc:	bc 01       	movw	r22, r24
    21fe:	89 2b       	or	r24, r25
    2200:	09 f4       	brne	.+2      	; 0x2204 <USB_Device_ProcessControlRequest+0x23a>
    2202:	3f cf       	rjmp	.-386    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    2204:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2208:	97 7f       	andi	r25, 0xF7	; 247
    220a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <Endpoint_Write_Control_PStream_LE>
    2216:	e3 cf       	rjmp	.-58     	; 0x21de <USB_Device_ProcessControlRequest+0x214>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2218:	80 38       	cpi	r24, 0x80	; 128
    221a:	09 f0       	breq	.+2      	; 0x221e <USB_Device_ProcessControlRequest+0x254>
    221c:	32 cf       	rjmp	.-412    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
    221e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2222:	87 7f       	andi	r24, 0xF7	; 247
    2224:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2228:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    222c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2230:	1d cf       	rjmp	.-454    	; 0x206c <USB_Device_ProcessControlRequest+0xa2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2232:	81 11       	cpse	r24, r1
    2234:	26 cf       	rjmp	.-436    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2236:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    223a:	92 30       	cpi	r25, 0x02	; 2
    223c:	08 f0       	brcs	.+2      	; 0x2240 <USB_Device_ProcessControlRequest+0x276>
    223e:	21 cf       	rjmp	.-446    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    2240:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2244:	87 7f       	andi	r24, 0xF7	; 247
    2246:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    224a:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    224e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    2252:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
    2256:	88 23       	and	r24, r24
    2258:	31 f0       	breq	.+12     	; 0x2266 <USB_Device_ProcessControlRequest+0x29c>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    225a:	84 e0       	ldi	r24, 0x04	; 4
    225c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    2260:	0e 94 29 0b 	call	0x1652	; 0x1652 <EVENT_USB_Device_ConfigurationChanged>
    2264:	0e cf       	rjmp	.-484    	; 0x2082 <USB_Device_ProcessControlRequest+0xb8>
				return (UDADDR & (1 << ADDEN));
    2266:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    226a:	87 fd       	sbrc	r24, 7
    226c:	f6 cf       	rjmp	.-20     	; 0x225a <USB_Device_ProcessControlRequest+0x290>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	f5 cf       	rjmp	.-22     	; 0x225c <USB_Device_ProcessControlRequest+0x292>

00002272 <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    2272:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <driver+0x1>
    2276:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <driver>
    227a:	08 95       	ret

0000227c <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    227c:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    2280:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2284:	30 97       	sbiw	r30, 0x00	; 0
    2286:	21 f0       	breq	.+8      	; 0x2290 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2288:	01 90       	ld	r0, Z+
    228a:	f0 81       	ld	r31, Z
    228c:	e0 2d       	mov	r30, r0
    228e:	09 94       	ijmp
}
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	08 95       	ret

00002294 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	8c 01       	movw	r16, r24
    if (!driver) return;
    22a2:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    22a6:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    22aa:	30 97       	sbiw	r30, 0x00	; 0
    22ac:	c1 f1       	breq	.+112    	; 0x231e <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    22ae:	02 80       	ldd	r0, Z+2	; 0x02
    22b0:	f3 81       	ldd	r31, Z+3	; 0x03
    22b2:	e0 2d       	mov	r30, r0
    22b4:	09 95       	icall

    if (debug_keyboard) {
    22b6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    22ba:	82 ff       	sbrs	r24, 2
    22bc:	30 c0       	rjmp	.+96     	; 0x231e <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    22be:	80 ff       	sbrs	r24, 0
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <host_keyboard_send+0x36>
    22c2:	8a e6       	ldi	r24, 0x6A	; 106
    22c4:	95 e0       	ldi	r25, 0x05	; 5
    22c6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
{
    22ca:	d0 e0       	ldi	r29, 0x00	; 0
    22cc:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    22ce:	84 e6       	ldi	r24, 0x64	; 100
    22d0:	e8 2e       	mov	r14, r24
    22d2:	85 e0       	ldi	r24, 0x05	; 5
    22d4:	f8 2e       	mov	r15, r24
    22d6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    22da:	80 ff       	sbrs	r24, 0
    22dc:	0e c0       	rjmp	.+28     	; 0x22fa <host_keyboard_send+0x66>
    22de:	f8 01       	movw	r30, r16
    22e0:	ec 0f       	add	r30, r28
    22e2:	fd 1f       	adc	r31, r29
    22e4:	80 81       	ld	r24, Z
    22e6:	1f 92       	push	r1
    22e8:	8f 93       	push	r24
    22ea:	ff 92       	push	r15
    22ec:	ef 92       	push	r14
    22ee:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    22fc:	c0 32       	cpi	r28, 0x20	; 32
    22fe:	d1 05       	cpc	r29, r1
    2300:	51 f7       	brne	.-44     	; 0x22d6 <host_keyboard_send+0x42>
        }
        dprint("\n");
    2302:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2306:	80 ff       	sbrs	r24, 0
    2308:	0a c0       	rjmp	.+20     	; 0x231e <host_keyboard_send+0x8a>
    230a:	82 e6       	ldi	r24, 0x62	; 98
    230c:	95 e0       	ldi	r25, 0x05	; 5
    }
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
        dprint("\n");
    231a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <xputs>
}
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	08 95       	ret

0000232c <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    232c:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    2330:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2334:	30 97       	sbiw	r30, 0x00	; 0
    2336:	21 f0       	breq	.+8      	; 0x2340 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2338:	04 80       	ldd	r0, Z+4	; 0x04
    233a:	f5 81       	ldd	r31, Z+5	; 0x05
    233c:	e0 2d       	mov	r30, r0
    233e:	09 94       	ijmp
}
    2340:	08 95       	ret

00002342 <host_system_send>:

void host_system_send(uint16_t report)
{
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2348:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <last_system_report>
    234c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <last_system_report+0x1>
    2350:	8c 17       	cp	r24, r28
    2352:	9d 07       	cpc	r25, r29
    2354:	01 f1       	breq	.+64     	; 0x2396 <host_system_send+0x54>
    last_system_report = report;
    2356:	d0 93 79 01 	sts	0x0179, r29	; 0x800179 <last_system_report+0x1>
    235a:	c0 93 78 01 	sts	0x0178, r28	; 0x800178 <last_system_report>

    if (!driver) return;
    235e:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    2362:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2366:	30 97       	sbiw	r30, 0x00	; 0
    2368:	b1 f0       	breq	.+44     	; 0x2396 <host_system_send+0x54>
    (*driver->send_system)(report);
    236a:	06 80       	ldd	r0, Z+6	; 0x06
    236c:	f7 81       	ldd	r31, Z+7	; 0x07
    236e:	e0 2d       	mov	r30, r0
    2370:	ce 01       	movw	r24, r28
    2372:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    2374:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2378:	85 70       	andi	r24, 0x05	; 5
    237a:	85 30       	cpi	r24, 0x05	; 5
    237c:	61 f4       	brne	.+24     	; 0x2396 <host_system_send+0x54>
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	84 e5       	ldi	r24, 0x54	; 84
    2384:	95 e0       	ldi	r25, 0x05	; 5
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    }
}
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	08 95       	ret

0000239c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    23a2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <last_consumer_report>
    23a6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <last_consumer_report+0x1>
    23aa:	8c 17       	cp	r24, r28
    23ac:	9d 07       	cpc	r25, r29
    23ae:	01 f1       	breq	.+64     	; 0x23f0 <host_consumer_send+0x54>
    last_consumer_report = report;
    23b0:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <last_consumer_report+0x1>
    23b4:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <last_consumer_report>

    if (!driver) return;
    23b8:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    23bc:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    23c0:	30 97       	sbiw	r30, 0x00	; 0
    23c2:	b1 f0       	breq	.+44     	; 0x23f0 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    23c4:	00 84       	ldd	r0, Z+8	; 0x08
    23c6:	f1 85       	ldd	r31, Z+9	; 0x09
    23c8:	e0 2d       	mov	r30, r0
    23ca:	ce 01       	movw	r24, r28
    23cc:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    23ce:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    23d2:	85 70       	andi	r24, 0x05	; 5
    23d4:	85 30       	cpi	r24, 0x05	; 5
    23d6:	61 f4       	brne	.+24     	; 0x23f0 <host_consumer_send+0x54>
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	84 e4       	ldi	r24, 0x44	; 68
    23de:	95 e0       	ldi	r25, 0x05	; 5
    23e0:	9f 93       	push	r25
    23e2:	8f 93       	push	r24
    23e4:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    }
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    23f6:	0c 94 cf 12 	jmp	0x259e	; 0x259e <matrix_setup>

000023fa <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    23fa:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <timer_init>
    matrix_init();
    23fe:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2402:	0c 94 6f 21 	jmp	0x42de	; 0x42de <bootmagic>

00002406 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2406:	5f 92       	push	r5
    2408:	6f 92       	push	r6
    240a:	7f 92       	push	r7
    240c:	8f 92       	push	r8
    240e:	9f 92       	push	r9
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	00 d0       	rcall	.+0      	; 0x2426 <keyboard_task+0x20>
    2426:	00 d0       	rcall	.+0      	; 0x2428 <keyboard_task+0x22>
    2428:	1f 92       	push	r1
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    242e:	0e 94 1a 08 	call	0x1034	; 0x1034 <matrix_scan>
    2432:	0d e7       	ldi	r16, 0x7D	; 125
    2434:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2436:	51 2c       	mov	r5, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2438:	66 24       	eor	r6, r6
    243a:	63 94       	inc	r6
    243c:	71 2c       	mov	r7, r1
        matrix_row = matrix_get_row(r);
    243e:	85 2d       	mov	r24, r5
    2440:	0e 94 79 09 	call	0x12f2	; 0x12f2 <matrix_get_row>
    2444:	5c 01       	movw	r10, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2446:	f8 01       	movw	r30, r16
    2448:	c0 80       	ld	r12, Z
    244a:	d1 80       	ldd	r13, Z+1	; 0x01
        if (matrix_change) {
    244c:	c8 16       	cp	r12, r24
    244e:	d9 06       	cpc	r13, r25
    2450:	09 f4       	brne	.+2      	; 0x2454 <keyboard_task+0x4e>
    2452:	40 c0       	rjmp	.+128    	; 0x24d4 <keyboard_task+0xce>
            if (debug_matrix) matrix_print();
    2454:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2458:	81 fd       	sbrc	r24, 1
    245a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    245e:	f1 2c       	mov	r15, r1
    2460:	e1 2c       	mov	r14, r1
        matrix_change = matrix_row ^ matrix_prev[r];
    2462:	ca 24       	eor	r12, r10
    2464:	db 24       	eor	r13, r11
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2466:	43 01       	movw	r8, r6
    2468:	0e 2c       	mov	r0, r14
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <keyboard_task+0x6a>
    246c:	88 0c       	add	r8, r8
    246e:	99 1c       	adc	r9, r9
    2470:	0a 94       	dec	r0
    2472:	e2 f7       	brpl	.-8      	; 0x246c <keyboard_task+0x66>
    2474:	c6 01       	movw	r24, r12
    2476:	88 21       	and	r24, r8
    2478:	99 21       	and	r25, r9
    247a:	89 2b       	or	r24, r25
    247c:	21 f1       	breq	.+72     	; 0x24c6 <keyboard_task+0xc0>
                    keyevent_t e = (keyevent_t){
    247e:	e9 82       	std	Y+1, r14	; 0x01
    2480:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2482:	21 e0       	ldi	r18, 0x01	; 1
    2484:	c4 01       	movw	r24, r8
    2486:	8a 21       	and	r24, r10
    2488:	9b 21       	and	r25, r11
    248a:	89 2b       	or	r24, r25
    248c:	09 f4       	brne	.+2      	; 0x2490 <keyboard_task+0x8a>
    248e:	20 e0       	ldi	r18, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2490:	2b 83       	std	Y+3, r18	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2492:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <timer_read>
    2496:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2498:	78 2f       	mov	r23, r24
    249a:	9d 83       	std	Y+5, r25	; 0x05
    249c:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    249e:	49 81       	ldd	r20, Y+1	; 0x01
    24a0:	5a 81       	ldd	r21, Y+2	; 0x02
    24a2:	6b 81       	ldd	r22, Y+3	; 0x03
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	0e 94 06 13 	call	0x260c	; 0x260c <action_exec>
                    hook_matrix_change(e);
    24aa:	49 81       	ldd	r20, Y+1	; 0x01
    24ac:	5a 81       	ldd	r21, Y+2	; 0x02
    24ae:	6b 81       	ldd	r22, Y+3	; 0x03
    24b0:	7c 81       	ldd	r23, Y+4	; 0x04
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    24b8:	f8 01       	movw	r30, r16
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	88 26       	eor	r8, r24
    24c0:	99 26       	eor	r9, r25
    24c2:	91 82       	std	Z+1, r9	; 0x01
    24c4:	80 82       	st	Z, r8
    24c6:	ff ef       	ldi	r31, 0xFF	; 255
    24c8:	ef 1a       	sub	r14, r31
    24ca:	ff 0a       	sbc	r15, r31
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    24cc:	8f e0       	ldi	r24, 0x0F	; 15
    24ce:	e8 16       	cp	r14, r24
    24d0:	f1 04       	cpc	r15, r1
    24d2:	49 f6       	brne	.-110    	; 0x2466 <keyboard_task+0x60>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    24d4:	53 94       	inc	r5
    24d6:	0e 5f       	subi	r16, 0xFE	; 254
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	e5 e0       	ldi	r30, 0x05	; 5
    24dc:	5e 12       	cpse	r5, r30
    24de:	af cf       	rjmp	.-162    	; 0x243e <keyboard_task+0x38>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	89 83       	std	Y+1, r24	; 0x01
    24e4:	8a 83       	std	Y+2, r24	; 0x02
    24e6:	1b 82       	std	Y+3, r1	; 0x03
    24e8:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <timer_read>
    24ec:	81 60       	ori	r24, 0x01	; 1
    24ee:	78 2f       	mov	r23, r24
    24f0:	9d 83       	std	Y+5, r25	; 0x05
    24f2:	8c 83       	std	Y+4, r24	; 0x04
    24f4:	49 81       	ldd	r20, Y+1	; 0x01
    24f6:	5a 81       	ldd	r21, Y+2	; 0x02
    24f8:	6b 81       	ldd	r22, Y+3	; 0x03
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	0e 94 06 13 	call	0x260c	; 0x260c <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    2500:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2504:	0e 94 da 24 	call	0x49b4	; 0x49b4 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2508:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    250c:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <led_status.4871>
    2510:	89 17       	cp	r24, r25
    2512:	69 f1       	breq	.+90     	; 0x256e <keyboard_task+0x168>
        led_status = host_keyboard_leds();
    2514:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    2518:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <led_status.4871>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    251c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    2520:	95 70       	andi	r25, 0x05	; 5
    2522:	95 30       	cpi	r25, 0x05	; 5
    2524:	61 f4       	brne	.+24     	; 0x253e <keyboard_task+0x138>
    2526:	1f 92       	push	r1
    2528:	8f 93       	push	r24
    252a:	85 e7       	ldi	r24, 0x75	; 117
    252c:	95 e0       	ldi	r25, 0x05	; 5
    252e:	9f 93       	push	r25
    2530:	8f 93       	push	r24
    2532:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    253e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <led_status.4871>
    }
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	df 90       	pop	r13
    255a:	cf 90       	pop	r12
    255c:	bf 90       	pop	r11
    255e:	af 90       	pop	r10
    2560:	9f 90       	pop	r9
    2562:	8f 90       	pop	r8
    2564:	7f 90       	pop	r7
    2566:	6f 90       	pop	r6
    2568:	5f 90       	pop	r5
        hook_keyboard_leds_change(led_status);
    256a:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <hook_keyboard_leds_change>
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	ff 90       	pop	r15
    2582:	ef 90       	pop	r14
    2584:	df 90       	pop	r13
    2586:	cf 90       	pop	r12
    2588:	bf 90       	pop	r11
    258a:	af 90       	pop	r10
    258c:	9f 90       	pop	r9
    258e:	8f 90       	pop	r8
    2590:	7f 90       	pop	r7
    2592:	6f 90       	pop	r6
    2594:	5f 90       	pop	r5
    2596:	08 95       	ret

00002598 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2598:	0c 94 82 09 	jmp	0x1304	; 0x1304 <led_set>

0000259c <matrix_clear>:
    259c:	08 95       	ret

0000259e <matrix_setup>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix_get_row(row) & (1<<col));
}
    259e:	08 95       	ret

000025a0 <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
    25ac:	8f e8       	ldi	r24, 0x8F	; 143
    25ae:	95 e0       	ldi	r25, 0x05	; 5
    25b0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    25b4:	d0 e0       	ldi	r29, 0x00	; 0
    25b6:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
    25b8:	8e e2       	ldi	r24, 0x2E	; 46
    25ba:	e8 2e       	mov	r14, r24
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	f8 2e       	mov	r15, r24
    25c0:	00 e8       	ldi	r16, 0x80	; 128
    25c2:	15 e0       	ldi	r17, 0x05	; 5
    25c4:	8c 2f       	mov	r24, r28
    25c6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <matrix_get_row>
    25ca:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <bitrev16>
    25ce:	ff 92       	push	r15
    25d0:	ef 92       	push	r14
    25d2:	9f 93       	push	r25
    25d4:	8f 93       	push	r24
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	1f 93       	push	r17
    25dc:	0f 93       	push	r16
    25de:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    25e2:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    25e4:	8d b7       	in	r24, 0x3d	; 61
    25e6:	9e b7       	in	r25, 0x3e	; 62
    25e8:	08 96       	adiw	r24, 0x08	; 8
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	9e bf       	out	0x3e, r25	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	8d bf       	out	0x3d, r24	; 61
    25f4:	c5 30       	cpi	r28, 0x05	; 5
    25f6:	d1 05       	cpc	r29, r1
    25f8:	29 f7       	brne	.-54     	; 0x25c4 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	08 95       	ret

00002608 <matrix_power_up>:
    2608:	08 95       	ret

0000260a <matrix_power_down>:
    260a:	08 95       	ret

0000260c <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	2b 97       	sbiw	r28, 0x0b	; 11
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	94 2f       	mov	r25, r20
    2622:	4f 83       	std	Y+7, r20	; 0x07
    2624:	25 2f       	mov	r18, r21
    2626:	58 87       	std	Y+8, r21	; 0x08
    2628:	69 87       	std	Y+9, r22	; 0x09
    262a:	7a 87       	std	Y+10, r23	; 0x0a
    262c:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    262e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2630:	5b 85       	ldd	r21, Y+11	; 0x0b
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	45 2b       	or	r20, r21
    2636:	31 f0       	breq	.+12     	; 0x2644 <action_exec+0x38>
    2638:	2f 3f       	cpi	r18, 0xFF	; 255
    263a:	19 f4       	brne	.+6      	; 0x2642 <action_exec+0x36>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	9f 3f       	cpi	r25, 0xFF	; 255
    2640:	09 f0       	breq	.+2      	; 0x2644 <action_exec+0x38>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    2644:	80 fd       	sbrc	r24, 0
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <action_exec+0x4a>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2648:	4f 81       	ldd	r20, Y+7	; 0x07
    264a:	58 85       	ldd	r21, Y+8	; 0x08
    264c:	69 85       	ldd	r22, Y+9	; 0x09
    264e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2650:	8b 85       	ldd	r24, Y+11	; 0x0b
    2652:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2656:	1e 82       	std	Y+6, r1	; 0x06
    2658:	1d 82       	std	Y+5, r1	; 0x05
    265a:	85 e0       	ldi	r24, 0x05	; 5
    265c:	fe 01       	movw	r30, r28
    265e:	37 96       	adiw	r30, 0x07	; 7
    2660:	de 01       	movw	r26, r28
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	01 90       	ld	r0, Z+
    2666:	0d 92       	st	X+, r0
    2668:	8a 95       	dec	r24
    266a:	e1 f7       	brne	.-8      	; 0x2664 <action_exec+0x58>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    266c:	49 81       	ldd	r20, Y+1	; 0x01
    266e:	5a 81       	ldd	r21, Y+2	; 0x02
    2670:	6b 81       	ldd	r22, Y+3	; 0x03
    2672:	7c 81       	ldd	r23, Y+4	; 0x04
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2678:	2b 96       	adiw	r28, 0x0b	; 11
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    action_tapping_process(record);
    2688:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <action_tapping_process>

0000268c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    268c:	cf 93       	push	r28
    268e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2690:	88 23       	and	r24, r24
    2692:	09 f4       	brne	.+2      	; 0x2696 <register_code+0xa>
    2694:	d4 c0       	rjmp	.+424    	; 0x283e <register_code+0x1b2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2696:	82 38       	cpi	r24, 0x82	; 130
    2698:	c1 f4       	brne	.+48     	; 0x26ca <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    269a:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    269e:	81 fd       	sbrc	r24, 1
    26a0:	ce c0       	rjmp	.+412    	; 0x283e <register_code+0x1b2>
#endif
        add_key(KC_CAPSLOCK);
    26a2:	89 e3       	ldi	r24, 0x39	; 57
    26a4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    26a8:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    26ac:	2f ef       	ldi	r18, 0xFF	; 255
    26ae:	81 ee       	ldi	r24, 0xE1	; 225
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	21 50       	subi	r18, 0x01	; 1
    26b4:	80 40       	sbci	r24, 0x00	; 0
    26b6:	90 40       	sbci	r25, 0x00	; 0
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <register_code+0x26>
    26ba:	00 c0       	rjmp	.+0      	; 0x26bc <register_code+0x30>
    26bc:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    26be:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    26c0:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    26c4:	cf 91       	pop	r28
        send_keyboard_report();
    26c6:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    26ca:	83 38       	cpi	r24, 0x83	; 131
    26cc:	a1 f4       	brne	.+40     	; 0x26f6 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    26ce:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    26d2:	80 fd       	sbrc	r24, 0
    26d4:	b4 c0       	rjmp	.+360    	; 0x283e <register_code+0x1b2>
        add_key(KC_NUMLOCK);
    26d6:	83 e5       	ldi	r24, 0x53	; 83
    26d8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    26dc:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    26e0:	2f ef       	ldi	r18, 0xFF	; 255
    26e2:	81 ee       	ldi	r24, 0xE1	; 225
    26e4:	94 e0       	ldi	r25, 0x04	; 4
    26e6:	21 50       	subi	r18, 0x01	; 1
    26e8:	80 40       	sbci	r24, 0x00	; 0
    26ea:	90 40       	sbci	r25, 0x00	; 0
    26ec:	e1 f7       	brne	.-8      	; 0x26e6 <register_code+0x5a>
    26ee:	00 c0       	rjmp	.+0      	; 0x26f0 <register_code+0x64>
    26f0:	00 00       	nop
        del_key(KC_NUMLOCK);
    26f2:	83 e5       	ldi	r24, 0x53	; 83
    26f4:	e5 cf       	rjmp	.-54     	; 0x26c0 <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    26f6:	84 38       	cpi	r24, 0x84	; 132
    26f8:	a1 f4       	brne	.+40     	; 0x2722 <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    26fa:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    26fe:	82 fd       	sbrc	r24, 2
    2700:	9e c0       	rjmp	.+316    	; 0x283e <register_code+0x1b2>
        add_key(KC_SCROLLLOCK);
    2702:	87 e4       	ldi	r24, 0x47	; 71
    2704:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    2708:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    270c:	2f ef       	ldi	r18, 0xFF	; 255
    270e:	81 ee       	ldi	r24, 0xE1	; 225
    2710:	94 e0       	ldi	r25, 0x04	; 4
    2712:	21 50       	subi	r18, 0x01	; 1
    2714:	80 40       	sbci	r24, 0x00	; 0
    2716:	90 40       	sbci	r25, 0x00	; 0
    2718:	e1 f7       	brne	.-8      	; 0x2712 <register_code+0x86>
    271a:	00 c0       	rjmp	.+0      	; 0x271c <register_code+0x90>
    271c:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    271e:	87 e4       	ldi	r24, 0x47	; 71
    2720:	cf cf       	rjmp	.-98     	; 0x26c0 <register_code+0x34>
    else if IS_KEY(code) {
    2722:	8c ef       	ldi	r24, 0xFC	; 252
    2724:	8c 0f       	add	r24, r28
    2726:	81 3a       	cpi	r24, 0xA1	; 161
    2728:	48 f4       	brcc	.+18     	; 0x273c <register_code+0xb0>
        if (command_proc(code)) return;
    272a:	8c 2f       	mov	r24, r28
    272c:	0e 94 39 29 	call	0x5272	; 0x5272 <command_proc>
    2730:	81 11       	cpse	r24, r1
    2732:	85 c0       	rjmp	.+266    	; 0x283e <register_code+0x1b2>
            add_key(code);
    2734:	8c 2f       	mov	r24, r28
    2736:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
    273a:	c4 cf       	rjmp	.-120    	; 0x26c4 <register_code+0x38>
    else if IS_MOD(code) {
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	8c 0f       	add	r24, r28
    2740:	88 30       	cpi	r24, 0x08	; 8
    2742:	48 f4       	brcc	.+18     	; 0x2756 <register_code+0xca>
        add_mods(MOD_BIT(code));
    2744:	c7 70       	andi	r28, 0x07	; 7
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	01 c0       	rjmp	.+2      	; 0x274c <register_code+0xc0>
    274a:	88 0f       	add	r24, r24
    274c:	ca 95       	dec	r28
    274e:	ea f7       	brpl	.-6      	; 0x274a <register_code+0xbe>
    2750:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <add_mods>
    2754:	b7 cf       	rjmp	.-146    	; 0x26c4 <register_code+0x38>
    else if IS_SYSTEM(code) {
    2756:	8b e5       	ldi	r24, 0x5B	; 91
    2758:	8c 0f       	add	r24, r28
    275a:	83 30       	cpi	r24, 0x03	; 3
    275c:	68 f4       	brcc	.+26     	; 0x2778 <register_code+0xec>
        host_system_send(KEYCODE2SYSTEM(code));
    275e:	81 e8       	ldi	r24, 0x81	; 129
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	c5 3a       	cpi	r28, 0xA5	; 165
    2764:	31 f0       	breq	.+12     	; 0x2772 <register_code+0xe6>
    2766:	83 e8       	ldi	r24, 0x83	; 131
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	c6 3a       	cpi	r28, 0xA6	; 166
    276c:	11 f4       	brne	.+4      	; 0x2772 <register_code+0xe6>
    276e:	82 e8       	ldi	r24, 0x82	; 130
    2770:	90 e0       	ldi	r25, 0x00	; 0
}
    2772:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2774:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <host_system_send>
    else if IS_CONSUMER(code) {
    2778:	88 e5       	ldi	r24, 0x58	; 88
    277a:	8c 0f       	add	r24, r28
    277c:	85 31       	cpi	r24, 0x15	; 21
    277e:	08 f0       	brcs	.+2      	; 0x2782 <register_code+0xf6>
    2780:	5e c0       	rjmp	.+188    	; 0x283e <register_code+0x1b2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2782:	82 ee       	ldi	r24, 0xE2	; 226
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	c8 3a       	cpi	r28, 0xA8	; 168
    2788:	09 f4       	brne	.+2      	; 0x278c <register_code+0x100>
    278a:	56 c0       	rjmp	.+172    	; 0x2838 <register_code+0x1ac>
    278c:	89 ee       	ldi	r24, 0xE9	; 233
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	c9 3a       	cpi	r28, 0xA9	; 169
    2792:	09 f4       	brne	.+2      	; 0x2796 <register_code+0x10a>
    2794:	51 c0       	rjmp	.+162    	; 0x2838 <register_code+0x1ac>
    2796:	8a ee       	ldi	r24, 0xEA	; 234
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	ca 3a       	cpi	r28, 0xAA	; 170
    279c:	09 f4       	brne	.+2      	; 0x27a0 <register_code+0x114>
    279e:	4c c0       	rjmp	.+152    	; 0x2838 <register_code+0x1ac>
    27a0:	85 eb       	ldi	r24, 0xB5	; 181
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	cb 3a       	cpi	r28, 0xAB	; 171
    27a6:	09 f4       	brne	.+2      	; 0x27aa <register_code+0x11e>
    27a8:	47 c0       	rjmp	.+142    	; 0x2838 <register_code+0x1ac>
    27aa:	86 eb       	ldi	r24, 0xB6	; 182
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	cc 3a       	cpi	r28, 0xAC	; 172
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <register_code+0x128>
    27b2:	42 c0       	rjmp	.+132    	; 0x2838 <register_code+0x1ac>
    27b4:	83 eb       	ldi	r24, 0xB3	; 179
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	cd 3a       	cpi	r28, 0xAD	; 173
    27ba:	f1 f1       	breq	.+124    	; 0x2838 <register_code+0x1ac>
    27bc:	84 eb       	ldi	r24, 0xB4	; 180
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	ce 3a       	cpi	r28, 0xAE	; 174
    27c2:	d1 f1       	breq	.+116    	; 0x2838 <register_code+0x1ac>
    27c4:	87 eb       	ldi	r24, 0xB7	; 183
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	cf 3a       	cpi	r28, 0xAF	; 175
    27ca:	b1 f1       	breq	.+108    	; 0x2838 <register_code+0x1ac>
    27cc:	8c ec       	ldi	r24, 0xCC	; 204
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	c1 3b       	cpi	r28, 0xB1	; 177
    27d2:	91 f1       	breq	.+100    	; 0x2838 <register_code+0x1ac>
    27d4:	8d ec       	ldi	r24, 0xCD	; 205
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	c0 3b       	cpi	r28, 0xB0	; 176
    27da:	71 f1       	breq	.+92     	; 0x2838 <register_code+0x1ac>
    27dc:	83 e8       	ldi	r24, 0x83	; 131
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	c2 3b       	cpi	r28, 0xB2	; 178
    27e2:	51 f1       	breq	.+84     	; 0x2838 <register_code+0x1ac>
    27e4:	8a e8       	ldi	r24, 0x8A	; 138
    27e6:	91 e0       	ldi	r25, 0x01	; 1
    27e8:	c3 3b       	cpi	r28, 0xB3	; 179
    27ea:	31 f1       	breq	.+76     	; 0x2838 <register_code+0x1ac>
    27ec:	82 e9       	ldi	r24, 0x92	; 146
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	c4 3b       	cpi	r28, 0xB4	; 180
    27f2:	11 f1       	breq	.+68     	; 0x2838 <register_code+0x1ac>
    27f4:	84 e9       	ldi	r24, 0x94	; 148
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	c5 3b       	cpi	r28, 0xB5	; 181
    27fa:	f1 f0       	breq	.+60     	; 0x2838 <register_code+0x1ac>
    27fc:	81 e2       	ldi	r24, 0x21	; 33
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    2800:	c6 3b       	cpi	r28, 0xB6	; 182
    2802:	d1 f0       	breq	.+52     	; 0x2838 <register_code+0x1ac>
    2804:	83 e2       	ldi	r24, 0x23	; 35
    2806:	92 e0       	ldi	r25, 0x02	; 2
    2808:	c7 3b       	cpi	r28, 0xB7	; 183
    280a:	b1 f0       	breq	.+44     	; 0x2838 <register_code+0x1ac>
    280c:	84 e2       	ldi	r24, 0x24	; 36
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	c8 3b       	cpi	r28, 0xB8	; 184
    2812:	91 f0       	breq	.+36     	; 0x2838 <register_code+0x1ac>
    2814:	85 e2       	ldi	r24, 0x25	; 37
    2816:	92 e0       	ldi	r25, 0x02	; 2
    2818:	c9 3b       	cpi	r28, 0xB9	; 185
    281a:	71 f0       	breq	.+28     	; 0x2838 <register_code+0x1ac>
    281c:	86 e2       	ldi	r24, 0x26	; 38
    281e:	92 e0       	ldi	r25, 0x02	; 2
    2820:	ca 3b       	cpi	r28, 0xBA	; 186
    2822:	51 f0       	breq	.+20     	; 0x2838 <register_code+0x1ac>
    2824:	87 e2       	ldi	r24, 0x27	; 39
    2826:	92 e0       	ldi	r25, 0x02	; 2
    2828:	cb 3b       	cpi	r28, 0xBB	; 187
    282a:	31 f0       	breq	.+12     	; 0x2838 <register_code+0x1ac>
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	cc 3b       	cpi	r28, 0xBC	; 188
    2832:	11 f4       	brne	.+4      	; 0x2838 <register_code+0x1ac>
    2834:	8a e2       	ldi	r24, 0x2A	; 42
    2836:	92 e0       	ldi	r25, 0x02	; 2
}
    2838:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    283a:	0c 94 ce 11 	jmp	0x239c	; 0x239c <host_consumer_send>
}
    283e:	cf 91       	pop	r28
    2840:	08 95       	ret

00002842 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2842:	88 23       	and	r24, r24
    2844:	09 f4       	brne	.+2      	; 0x2848 <unregister_code+0x6>
    2846:	66 c0       	rjmp	.+204    	; 0x2914 <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2848:	82 38       	cpi	r24, 0x82	; 130
    284a:	b9 f4       	brne	.+46     	; 0x287a <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    284c:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    2850:	81 ff       	sbrs	r24, 1
    2852:	60 c0       	rjmp	.+192    	; 0x2914 <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    2854:	89 e3       	ldi	r24, 0x39	; 57
    2856:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    285a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    285e:	2f ef       	ldi	r18, 0xFF	; 255
    2860:	81 ee       	ldi	r24, 0xE1	; 225
    2862:	94 e0       	ldi	r25, 0x04	; 4
    2864:	21 50       	subi	r18, 0x01	; 1
    2866:	80 40       	sbci	r24, 0x00	; 0
    2868:	90 40       	sbci	r25, 0x00	; 0
    286a:	e1 f7       	brne	.-8      	; 0x2864 <unregister_code+0x22>
    286c:	00 c0       	rjmp	.+0      	; 0x286e <unregister_code+0x2c>
    286e:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2870:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2872:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <del_key>
        send_keyboard_report();
    2876:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    287a:	83 38       	cpi	r24, 0x83	; 131
    287c:	a1 f4       	brne	.+40     	; 0x28a6 <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    287e:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    2882:	80 ff       	sbrs	r24, 0
    2884:	47 c0       	rjmp	.+142    	; 0x2914 <unregister_code+0xd2>
        add_key(KC_NUMLOCK);
    2886:	83 e5       	ldi	r24, 0x53	; 83
    2888:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    288c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    2890:	2f ef       	ldi	r18, 0xFF	; 255
    2892:	81 ee       	ldi	r24, 0xE1	; 225
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	21 50       	subi	r18, 0x01	; 1
    2898:	80 40       	sbci	r24, 0x00	; 0
    289a:	90 40       	sbci	r25, 0x00	; 0
    289c:	e1 f7       	brne	.-8      	; 0x2896 <unregister_code+0x54>
    289e:	00 c0       	rjmp	.+0      	; 0x28a0 <unregister_code+0x5e>
    28a0:	00 00       	nop
        del_key(KC_NUMLOCK);
    28a2:	83 e5       	ldi	r24, 0x53	; 83
    28a4:	e6 cf       	rjmp	.-52     	; 0x2872 <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28a6:	84 38       	cpi	r24, 0x84	; 132
    28a8:	a1 f4       	brne	.+40     	; 0x28d2 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    28aa:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    28ae:	82 ff       	sbrs	r24, 2
    28b0:	31 c0       	rjmp	.+98     	; 0x2914 <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    28b2:	87 e4       	ldi	r24, 0x47	; 71
    28b4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_key>
        send_keyboard_report();
    28b8:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    28bc:	2f ef       	ldi	r18, 0xFF	; 255
    28be:	81 ee       	ldi	r24, 0xE1	; 225
    28c0:	94 e0       	ldi	r25, 0x04	; 4
    28c2:	21 50       	subi	r18, 0x01	; 1
    28c4:	80 40       	sbci	r24, 0x00	; 0
    28c6:	90 40       	sbci	r25, 0x00	; 0
    28c8:	e1 f7       	brne	.-8      	; 0x28c2 <unregister_code+0x80>
    28ca:	00 c0       	rjmp	.+0      	; 0x28cc <unregister_code+0x8a>
    28cc:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    28ce:	87 e4       	ldi	r24, 0x47	; 71
    28d0:	d0 cf       	rjmp	.-96     	; 0x2872 <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28d2:	9c ef       	ldi	r25, 0xFC	; 252
    28d4:	98 0f       	add	r25, r24
    28d6:	91 3a       	cpi	r25, 0xA1	; 161
    28d8:	60 f2       	brcs	.-104    	; 0x2872 <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    28da:	90 e2       	ldi	r25, 0x20	; 32
    28dc:	98 0f       	add	r25, r24
    28de:	98 30       	cpi	r25, 0x08	; 8
    28e0:	50 f4       	brcc	.+20     	; 0x28f6 <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    28e2:	87 70       	andi	r24, 0x07	; 7
    28e4:	91 e0       	ldi	r25, 0x01	; 1
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <unregister_code+0xa8>
    28e8:	99 0f       	add	r25, r25
    28ea:	8a 95       	dec	r24
    28ec:	ea f7       	brpl	.-6      	; 0x28e8 <unregister_code+0xa6>
    28ee:	89 2f       	mov	r24, r25
    28f0:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <del_mods>
    28f4:	c0 cf       	rjmp	.-128    	; 0x2876 <unregister_code+0x34>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    28f6:	9b e5       	ldi	r25, 0x5B	; 91
    28f8:	98 0f       	add	r25, r24
    28fa:	93 30       	cpi	r25, 0x03	; 3
    28fc:	20 f4       	brcc	.+8      	; 0x2906 <unregister_code+0xc4>
        host_system_send(0);
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2906:	88 5a       	subi	r24, 0xA8	; 168
    2908:	85 31       	cpi	r24, 0x15	; 21
    290a:	20 f4       	brcc	.+8      	; 0x2914 <unregister_code+0xd2>
        host_consumer_send(0);
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	80 e0       	ldi	r24, 0x00	; 0
    2910:	0c 94 ce 11 	jmp	0x239c	; 0x239c <host_consumer_send>
    }
}
    2914:	08 95       	ret

00002916 <register_mods>:

void register_mods(uint8_t mods)
{
    if (mods) {
    2916:	88 23       	and	r24, r24
    2918:	21 f0       	breq	.+8      	; 0x2922 <register_mods+0xc>
        add_mods(mods);
    291a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <add_mods>
        send_keyboard_report();
    291e:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <send_keyboard_report>
    }
}
    2922:	08 95       	ret

00002924 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2924:	88 23       	and	r24, r24
    2926:	21 f0       	breq	.+8      	; 0x2930 <unregister_mods+0xc>
        del_mods(mods);
    2928:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <del_mods>
        send_keyboard_report();
    292c:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <send_keyboard_report>
    }
}
    2930:	08 95       	ret

00002932 <process_action>:
{
    2932:	af 92       	push	r10
    2934:	bf 92       	push	r11
    2936:	cf 92       	push	r12
    2938:	df 92       	push	r13
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	00 d0       	rcall	.+0      	; 0x2948 <process_action+0x16>
    2948:	00 d0       	rcall	.+0      	; 0x294a <process_action+0x18>
    294a:	1f 92       	push	r1
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2952:	85 e0       	ldi	r24, 0x05	; 5
    2954:	f5 01       	movw	r30, r10
    2956:	de 01       	movw	r26, r28
    2958:	11 96       	adiw	r26, 0x01	; 1
    295a:	01 90       	ld	r0, Z+
    295c:	0d 92       	st	X+, r0
    295e:	8a 95       	dec	r24
    2960:	e1 f7       	brne	.-8      	; 0x295a <process_action+0x28>
    2962:	f5 01       	movw	r30, r10
    2964:	40 81       	ld	r20, Z
    2966:	51 81       	ldd	r21, Z+1	; 0x01
    2968:	23 81       	ldd	r18, Z+3	; 0x03
    296a:	34 81       	ldd	r19, Z+4	; 0x04
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	21 15       	cp	r18, r1
    2970:	31 05       	cpc	r19, r1
    2972:	31 f0       	breq	.+12     	; 0x2980 <process_action+0x4e>
    2974:	5f 3f       	cpi	r21, 0xFF	; 255
    2976:	19 f4       	brne	.+6      	; 0x297e <process_action+0x4c>
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	4f 3f       	cpi	r20, 0xFF	; 255
    297c:	09 f0       	breq	.+2      	; 0x2980 <process_action+0x4e>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return; }
    2980:	80 fd       	sbrc	r24, 0
    2982:	c5 c0       	rjmp	.+394    	; 0x2b0e <process_action+0x1dc>
    keyevent_t event = record->event;
    2984:	f5 01       	movw	r30, r10
    2986:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2988:	e5 80       	ldd	r14, Z+5	; 0x05
    298a:	e2 94       	swap	r14
    298c:	6f e0       	ldi	r22, 0x0F	; 15
    298e:	e6 22       	and	r14, r22
    action_t action = layer_switch_get_action(event);
    2990:	72 2f       	mov	r23, r18
    2992:	3d 83       	std	Y+5, r19	; 0x05
    2994:	2c 83       	std	Y+4, r18	; 0x04
    2996:	6f 2d       	mov	r22, r15
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <layer_switch_get_action>
    299e:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    29a0:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    29a4:	0e 94 0e 1c 	call	0x381c	; 0x381c <default_layer_debug>
    switch (action.kind.id) {
    29a8:	e1 2f       	mov	r30, r17
    29aa:	e2 95       	swap	r30
    29ac:	ef 70       	andi	r30, 0x0F	; 15
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	e4 52       	subi	r30, 0x24	; 36
    29b2:	fb 4e       	sbci	r31, 0xEB	; 235
    29b4:	0c 94 d5 2b 	jmp	0x57aa	; 0x57aa <__tablejump2__>
    29b8:	ec 14       	cp	r14, r12
    29ba:	ec 14       	cp	r14, r12
    29bc:	29 15       	cp	r18, r9
    29be:	29 15       	cp	r18, r9
    29c0:	ba 15       	cp	r27, r10
    29c2:	ef 15       	cp	r30, r15
    29c4:	87 15       	cp	r24, r7
    29c6:	87 15       	cp	r24, r7
    29c8:	08 16       	cp	r0, r24
    29ca:	87 15       	cp	r24, r7
    29cc:	f4 16       	cp	r15, r20
    29ce:	f4 16       	cp	r15, r20
    29d0:	9a 17       	cp	r25, r26
    29d2:	87 15       	cp	r24, r7
    29d4:	87 15       	cp	r24, r7
    29d6:	b1 17       	cp	r27, r17
    29d8:	f1 2f       	mov	r31, r17
    29da:	ff 70       	andi	r31, 0x0F	; 15
    29dc:	ef 2e       	mov	r14, r31
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    29de:	10 7f       	andi	r17, 0xF0	; 240
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <process_action+0xb6>
    29e2:	e2 94       	swap	r14
    29e4:	90 ef       	ldi	r25, 0xF0	; 240
    29e6:	e9 22       	and	r14, r25
                if (event.pressed) {
    29e8:	ff 20       	and	r15, r15
    29ea:	c9 f0       	breq	.+50     	; 0x2a1e <process_action+0xec>
                    if (mods) {
    29ec:	ee 20       	and	r14, r14
    29ee:	29 f0       	breq	.+10     	; 0x29fa <process_action+0xc8>
                        add_weak_mods(mods);
    29f0:	8e 2d       	mov	r24, r14
    29f2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <add_weak_mods>
                        send_keyboard_report();
    29f6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
                            register_code(action.layer_tap.code);
    29fa:	80 2f       	mov	r24, r16
}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
    2a16:	bf 90       	pop	r11
    2a18:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    2a1a:	0c 94 46 13 	jmp	0x268c	; 0x268c <register_code>
                    unregister_code(action.key.code);
    2a1e:	80 2f       	mov	r24, r16
    2a20:	0e 94 21 14 	call	0x2842	; 0x2842 <unregister_code>
                    if (mods) {
    2a24:	ee 20       	and	r14, r14
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <process_action+0xf8>
    2a28:	72 c0       	rjmp	.+228    	; 0x2b0e <process_action+0x1dc>
                        del_weak_mods(mods);
    2a2a:	8e 2d       	mov	r24, r14
    2a2c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <del_weak_mods>
}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	1f 91       	pop	r17
    2a40:	0f 91       	pop	r16
    2a42:	ff 90       	pop	r15
    2a44:	ef 90       	pop	r14
    2a46:	df 90       	pop	r13
    2a48:	cf 90       	pop	r12
    2a4a:	bf 90       	pop	r11
    2a4c:	af 90       	pop	r10
                        send_keyboard_report();
    2a4e:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <send_keyboard_report>
    2a52:	81 2f       	mov	r24, r17
    2a54:	8f 70       	andi	r24, 0x0F	; 15
    2a56:	d8 2e       	mov	r13, r24
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2a58:	10 7f       	andi	r17, 0xF0	; 240
    2a5a:	10 32       	cpi	r17, 0x20	; 32
    2a5c:	19 f0       	breq	.+6      	; 0x2a64 <process_action+0x132>
    2a5e:	d2 94       	swap	r13
    2a60:	80 ef       	ldi	r24, 0xF0	; 240
    2a62:	d8 22       	and	r13, r24
                switch (action.key.code) {
    2a64:	00 23       	and	r16, r16
    2a66:	79 f0       	breq	.+30     	; 0x2a86 <process_action+0x154>
    2a68:	01 30       	cpi	r16, 0x01	; 1
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <process_action+0x13c>
    2a6c:	60 c0       	rjmp	.+192    	; 0x2b2e <process_action+0x1fc>
                        if (event.pressed) {
    2a6e:	ff 20       	and	r15, r15
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <process_action+0x142>
    2a72:	6c c0       	rjmp	.+216    	; 0x2b4c <process_action+0x21a>
                            if (tap_count > 0) {
    2a74:	ee 20       	and	r14, r14
    2a76:	59 f0       	breq	.+22     	; 0x2a8e <process_action+0x15c>
                                if (record->tap.interrupted) {
    2a78:	f5 01       	movw	r30, r10
    2a7a:	85 81       	ldd	r24, Z+5	; 0x05
    2a7c:	80 ff       	sbrs	r24, 0
    2a7e:	bd cf       	rjmp	.-134    	; 0x29fa <process_action+0xc8>
                                    record->tap.count = 0;
    2a80:	8f 70       	andi	r24, 0x0F	; 15
    2a82:	85 83       	std	Z+5, r24	; 0x05
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <process_action+0x15c>
                        if (event.pressed) {
    2a86:	ff 20       	and	r15, r15
    2a88:	49 f1       	breq	.+82     	; 0x2adc <process_action+0x1aa>
                            if (tap_count == 0) {
    2a8a:	e1 10       	cpse	r14, r1
    2a8c:	12 c0       	rjmp	.+36     	; 0x2ab2 <process_action+0x180>
                                    register_mods(mods);
    2a8e:	8d 2d       	mov	r24, r13
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
                                    register_mods(mods);
    2aae:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <register_mods>
                            else if (tap_count == 1) {
    2ab2:	e1 e0       	ldi	r30, 0x01	; 1
                                set_oneshot_mods(mods);
    2ab4:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    2ab6:	ee 12       	cpse	r14, r30
    2ab8:	eb cf       	rjmp	.-42     	; 0x2a90 <process_action+0x15e>
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	bf 90       	pop	r11
    2ad6:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    2ad8:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <set_oneshot_mods>
                            if (tap_count == 0) {
    2adc:	e1 10       	cpse	r14, r1
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <process_action+0x1d6>
                                clear_oneshot_mods();
    2ae0:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <clear_oneshot_mods>
                                unregister_mods(mods);
    2ae4:	8d 2d       	mov	r24, r13
}
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
    2b00:	bf 90       	pop	r11
    2b02:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2b04:	0c 94 92 14 	jmp	0x2924	; 0x2924 <unregister_mods>
                            else if (tap_count == 1) {
    2b08:	f1 e0       	ldi	r31, 0x01	; 1
    2b0a:	ef 12       	cpse	r14, r31
    2b0c:	e9 cf       	rjmp	.-46     	; 0x2ae0 <process_action+0x1ae>
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	ff 90       	pop	r15
    2b22:	ef 90       	pop	r14
    2b24:	df 90       	pop	r13
    2b26:	cf 90       	pop	r12
    2b28:	bf 90       	pop	r11
    2b2a:	af 90       	pop	r10
    2b2c:	08 95       	ret
                        if (event.pressed) {
    2b2e:	ff 20       	and	r15, r15
    2b30:	49 f0       	breq	.+18     	; 0x2b44 <process_action+0x212>
                            if (tap_count <= TAPPING_TOGGLE) {
    2b32:	85 e0       	ldi	r24, 0x05	; 5
    2b34:	8e 15       	cp	r24, r14
    2b36:	58 f3       	brcs	.-42     	; 0x2b0e <process_action+0x1dc>
                                if (mods & get_mods()) {
    2b38:	0e 94 65 1e 	call	0x3cca	; 0x3cca <get_mods>
    2b3c:	8d 21       	and	r24, r13
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <process_action+0x210>
    2b40:	a6 cf       	rjmp	.-180    	; 0x2a8e <process_action+0x15c>
    2b42:	d0 cf       	rjmp	.-96     	; 0x2ae4 <process_action+0x1b2>
                            if (tap_count < TAPPING_TOGGLE) {
    2b44:	e4 e0       	ldi	r30, 0x04	; 4
    2b46:	ee 15       	cp	r30, r14
    2b48:	10 f3       	brcs	.-60     	; 0x2b0e <process_action+0x1dc>
    2b4a:	cc cf       	rjmp	.-104    	; 0x2ae4 <process_action+0x1b2>
                            if (tap_count > 0) {
    2b4c:	ee 20       	and	r14, r14
    2b4e:	51 f2       	breq	.-108    	; 0x2ae4 <process_action+0x1b2>
                            unregister_code(action.layer_tap.code);
    2b50:	80 2f       	mov	r24, r16
}
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	ef 90       	pop	r14
    2b68:	df 90       	pop	r13
    2b6a:	cf 90       	pop	r12
    2b6c:	bf 90       	pop	r11
    2b6e:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    2b70:	0c 94 21 14 	jmp	0x2842	; 0x2842 <unregister_code>
            switch (action.usage.page) {
    2b74:	81 2f       	mov	r24, r17
    2b76:	86 95       	lsr	r24
    2b78:	86 95       	lsr	r24
    2b7a:	83 70       	andi	r24, 0x03	; 3
    2b7c:	c9 f0       	breq	.+50     	; 0x2bb0 <process_action+0x27e>
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	31 f6       	brne	.-116    	; 0x2b0e <process_action+0x1dc>
                        host_consumer_send(action.usage.code);
    2b82:	c8 01       	movw	r24, r16
    2b84:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2b86:	f1 10       	cpse	r15, r1
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <process_action+0x25c>
                        host_consumer_send(0);
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	bf 90       	pop	r11
    2baa:	af 90       	pop	r10
                        host_consumer_send(0);
    2bac:	0c 94 ce 11 	jmp	0x239c	; 0x239c <host_consumer_send>
                        host_system_send(action.usage.code);
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2bb4:	f1 10       	cpse	r15, r1
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <process_action+0x28a>
                        host_system_send(0);
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	80 e0       	ldi	r24, 0x00	; 0
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
                        host_system_send(0);
    2bda:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <host_system_send>
                mousekey_on(action.key.code);
    2bde:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2be0:	ff 20       	and	r15, r15
    2be2:	99 f0       	breq	.+38     	; 0x2c0a <process_action+0x2d8>
                mousekey_on(action.key.code);
    2be4:	0e 94 61 23 	call	0x46c2	; 0x46c2 <mousekey_on>
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	ef 90       	pop	r14
    2bfe:	df 90       	pop	r13
    2c00:	cf 90       	pop	r12
    2c02:	bf 90       	pop	r11
    2c04:	af 90       	pop	r10
                mousekey_send();
    2c06:	0c 94 4d 24 	jmp	0x489a	; 0x489a <mousekey_send>
                mousekey_off(action.key.code);
    2c0a:	0e 94 c9 23 	call	0x4792	; 0x4792 <mousekey_off>
    2c0e:	ec cf       	rjmp	.-40     	; 0x2be8 <process_action+0x2b6>
            if (action.layer_bitop.on == 0) {
    2c10:	81 2f       	mov	r24, r17
    2c12:	83 70       	andi	r24, 0x03	; 3
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <process_action+0x2e6>
    2c16:	71 c0       	rjmp	.+226    	; 0x2cfa <process_action+0x3c8>
                if (!event.pressed) {
    2c18:	f1 10       	cpse	r15, r1
    2c1a:	79 cf       	rjmp	.-270    	; 0x2b0e <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    2c1c:	20 2f       	mov	r18, r16
    2c1e:	22 95       	swap	r18
    2c20:	26 95       	lsr	r18
    2c22:	27 70       	andi	r18, 0x07	; 7
    2c24:	22 0f       	add	r18, r18
    2c26:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c28:	60 2f       	mov	r22, r16
    2c2a:	6f 70       	andi	r22, 0x0F	; 15
    2c2c:	c6 2e       	mov	r12, r22
    2c2e:	d1 2c       	mov	r13, r1
    2c30:	f1 2c       	mov	r15, r1
    2c32:	e1 2c       	mov	r14, r1
    2c34:	02 2e       	mov	r0, r18
    2c36:	04 c0       	rjmp	.+8      	; 0x2c40 <process_action+0x30e>
    2c38:	cc 0c       	add	r12, r12
    2c3a:	dd 1c       	adc	r13, r13
    2c3c:	ee 1c       	adc	r14, r14
    2c3e:	ff 1c       	adc	r15, r15
    2c40:	0a 94       	dec	r0
    2c42:	d2 f7       	brpl	.-12     	; 0x2c38 <process_action+0x306>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2c44:	60 e0       	ldi	r22, 0x00	; 0
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	cb 01       	movw	r24, r22
    2c4a:	04 ff       	sbrs	r16, 4
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <process_action+0x33a>
    2c4e:	6f e0       	ldi	r22, 0x0F	; 15
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	04 c0       	rjmp	.+8      	; 0x2c60 <process_action+0x32e>
    2c58:	66 0f       	add	r22, r22
    2c5a:	77 1f       	adc	r23, r23
    2c5c:	88 1f       	adc	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	2a 95       	dec	r18
    2c62:	d2 f7       	brpl	.-12     	; 0x2c58 <process_action+0x326>
    2c64:	60 95       	com	r22
    2c66:	70 95       	com	r23
    2c68:	80 95       	com	r24
    2c6a:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2c6c:	16 95       	lsr	r17
    2c6e:	16 95       	lsr	r17
    2c70:	13 70       	andi	r17, 0x03	; 3
    2c72:	12 30       	cpi	r17, 0x02	; 2
    2c74:	c1 f0       	breq	.+48     	; 0x2ca6 <process_action+0x374>
    2c76:	60 f5       	brcc	.+88     	; 0x2cd0 <process_action+0x39e>
    2c78:	6c 29       	or	r22, r12
    2c7a:	7d 29       	or	r23, r13
    2c7c:	8e 29       	or	r24, r14
    2c7e:	9f 29       	or	r25, r15
    2c80:	11 30       	cpi	r17, 0x01	; 1
    2c82:	51 f1       	breq	.+84     	; 0x2cd8 <process_action+0x3a6>
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2ca2:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2ca6:	6c 29       	or	r22, r12
    2ca8:	7d 29       	or	r23, r13
    2caa:	8e 29       	or	r24, r14
    2cac:	9f 29       	or	r25, r15
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	ff 90       	pop	r15
    2cc2:	ef 90       	pop	r14
    2cc4:	df 90       	pop	r13
    2cc6:	cf 90       	pop	r12
    2cc8:	bf 90       	pop	r11
    2cca:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2ccc:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2cd0:	0e 94 33 1c 	call	0x3866	; 0x3866 <default_layer_and>
    2cd4:	c7 01       	movw	r24, r14
    2cd6:	b6 01       	movw	r22, r12
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	ff 90       	pop	r15
    2cec:	ef 90       	pop	r14
    2cee:	df 90       	pop	r13
    2cf0:	cf 90       	pop	r12
    2cf2:	bf 90       	pop	r11
    2cf4:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2cf6:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2cfa:	86 95       	lsr	r24
    2cfc:	ff 20       	and	r15, r15
    2cfe:	11 f0       	breq	.+4      	; 0x2d04 <process_action+0x3d2>
    2d00:	81 2f       	mov	r24, r17
    2d02:	81 70       	andi	r24, 0x01	; 1
    2d04:	88 23       	and	r24, r24
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <process_action+0x3d8>
    2d08:	02 cf       	rjmp	.-508    	; 0x2b0e <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    2d0a:	20 2f       	mov	r18, r16
    2d0c:	22 95       	swap	r18
    2d0e:	26 95       	lsr	r18
    2d10:	27 70       	andi	r18, 0x07	; 7
    2d12:	22 0f       	add	r18, r18
    2d14:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2d16:	60 2f       	mov	r22, r16
    2d18:	6f 70       	andi	r22, 0x0F	; 15
    2d1a:	c6 2e       	mov	r12, r22
    2d1c:	d1 2c       	mov	r13, r1
    2d1e:	f1 2c       	mov	r15, r1
    2d20:	e1 2c       	mov	r14, r1
    2d22:	02 2e       	mov	r0, r18
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <process_action+0x3fc>
    2d26:	cc 0c       	add	r12, r12
    2d28:	dd 1c       	adc	r13, r13
    2d2a:	ee 1c       	adc	r14, r14
    2d2c:	ff 1c       	adc	r15, r15
    2d2e:	0a 94       	dec	r0
    2d30:	d2 f7       	brpl	.-12     	; 0x2d26 <process_action+0x3f4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	cb 01       	movw	r24, r22
    2d38:	04 ff       	sbrs	r16, 4
    2d3a:	0f c0       	rjmp	.+30     	; 0x2d5a <process_action+0x428>
    2d3c:	6f e0       	ldi	r22, 0x0F	; 15
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <process_action+0x41c>
    2d46:	66 0f       	add	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	88 1f       	adc	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	2a 95       	dec	r18
    2d50:	d2 f7       	brpl	.-12     	; 0x2d46 <process_action+0x414>
    2d52:	60 95       	com	r22
    2d54:	70 95       	com	r23
    2d56:	80 95       	com	r24
    2d58:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2d5a:	16 95       	lsr	r17
    2d5c:	16 95       	lsr	r17
    2d5e:	13 70       	andi	r17, 0x03	; 3
    2d60:	12 30       	cpi	r17, 0x02	; 2
    2d62:	c1 f0       	breq	.+48     	; 0x2d94 <process_action+0x462>
    2d64:	60 f5       	brcc	.+88     	; 0x2dbe <process_action+0x48c>
    2d66:	6c 29       	or	r22, r12
    2d68:	7d 29       	or	r23, r13
    2d6a:	8e 29       	or	r24, r14
    2d6c:	9f 29       	or	r25, r15
    2d6e:	11 30       	cpi	r17, 0x01	; 1
    2d70:	51 f1       	breq	.+84     	; 0x2dc6 <process_action+0x494>
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	ff 90       	pop	r15
    2d86:	ef 90       	pop	r14
    2d88:	df 90       	pop	r13
    2d8a:	cf 90       	pop	r12
    2d8c:	bf 90       	pop	r11
    2d8e:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2d90:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d94:	6c 29       	or	r22, r12
    2d96:	7d 29       	or	r23, r13
    2d98:	8e 29       	or	r24, r14
    2d9a:	9f 29       	or	r25, r15
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	0f 91       	pop	r16
    2dae:	ff 90       	pop	r15
    2db0:	ef 90       	pop	r14
    2db2:	df 90       	pop	r13
    2db4:	cf 90       	pop	r12
    2db6:	bf 90       	pop	r11
    2db8:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2dba:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2dbe:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <layer_and>
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	b6 01       	movw	r22, r12
}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	1f 91       	pop	r17
    2dd6:	0f 91       	pop	r16
    2dd8:	ff 90       	pop	r15
    2dda:	ef 90       	pop	r14
    2ddc:	df 90       	pop	r13
    2dde:	cf 90       	pop	r12
    2de0:	bf 90       	pop	r11
    2de2:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2de4:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <layer_or>
            switch (action.layer_tap.code) {
    2de8:	00 3f       	cpi	r16, 0xF0	; 240
    2dea:	09 f4       	brne	.+2      	; 0x2dee <process_action+0x4bc>
    2dec:	45 c0       	rjmp	.+138    	; 0x2e78 <process_action+0x546>
    2dee:	60 f4       	brcc	.+24     	; 0x2e08 <process_action+0x4d6>
    2df0:	80 e4       	ldi	r24, 0x40	; 64
    2df2:	80 0f       	add	r24, r16
    2df4:	80 32       	cpi	r24, 0x20	; 32
    2df6:	28 f1       	brcs	.+74     	; 0x2e42 <process_action+0x510>
                    if (event.pressed) {
    2df8:	ff 20       	and	r15, r15
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <process_action+0x4cc>
    2dfc:	96 c0       	rjmp	.+300    	; 0x2f2a <process_action+0x5f8>
                        if (tap_count > 0) {
    2dfe:	e1 10       	cpse	r14, r1
    2e00:	fc cd       	rjmp	.-1032   	; 0x29fa <process_action+0xc8>
                            layer_on(action.layer_tap.val);
    2e02:	81 2f       	mov	r24, r17
    2e04:	8f 71       	andi	r24, 0x1F	; 31
    2e06:	5a c0       	rjmp	.+180    	; 0x2ebc <process_action+0x58a>
            switch (action.layer_tap.code) {
    2e08:	02 3f       	cpi	r16, 0xF2	; 242
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <process_action+0x4dc>
    2e0c:	68 c0       	rjmp	.+208    	; 0x2ede <process_action+0x5ac>
    2e0e:	08 f4       	brcc	.+2      	; 0x2e12 <process_action+0x4e0>
    2e10:	51 c0       	rjmp	.+162    	; 0x2eb4 <process_action+0x582>
    2e12:	03 3f       	cpi	r16, 0xF3	; 243
    2e14:	89 f7       	brne	.-30     	; 0x2df8 <process_action+0x4c6>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e16:	ff 20       	and	r15, r15
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <process_action+0x4ea>
    2e1a:	76 c0       	rjmp	.+236    	; 0x2f08 <process_action+0x5d6>
    2e1c:	81 2f       	mov	r24, r17
    2e1e:	8f 71       	andi	r24, 0x1F	; 31
}
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e3e:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <layer_move>
            switch (action.layer_tap.code) {
    2e42:	c0 2e       	mov	r12, r16
    2e44:	81 2f       	mov	r24, r17
    2e46:	8f 71       	andi	r24, 0x1F	; 31
    2e48:	10 2f       	mov	r17, r16
    2e4a:	10 71       	andi	r17, 0x10	; 16
                    if (event.pressed) {
    2e4c:	ff 20       	and	r15, r15
    2e4e:	51 f0       	breq	.+20     	; 0x2e64 <process_action+0x532>
                        layer_on(action.layer_tap.val);
    2e50:	0e 94 81 1c 	call	0x3902	; 0x3902 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2e54:	8c 2d       	mov	r24, r12
    2e56:	82 95       	swap	r24
    2e58:	80 7f       	andi	r24, 0xF0	; 240
    2e5a:	11 11       	cpse	r17, r1
    2e5c:	19 ce       	rjmp	.-974    	; 0x2a90 <process_action+0x15e>
    2e5e:	80 2f       	mov	r24, r16
    2e60:	8f 70       	andi	r24, 0x0F	; 15
    2e62:	16 ce       	rjmp	.-980    	; 0x2a90 <process_action+0x15e>
                        layer_off(action.layer_tap.val);
    2e64:	0e 94 a2 1c 	call	0x3944	; 0x3944 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2e68:	8c 2d       	mov	r24, r12
    2e6a:	82 95       	swap	r24
    2e6c:	80 7f       	andi	r24, 0xF0	; 240
    2e6e:	11 11       	cpse	r17, r1
    2e70:	3a ce       	rjmp	.-908    	; 0x2ae6 <process_action+0x1b4>
    2e72:	80 2f       	mov	r24, r16
    2e74:	8f 70       	andi	r24, 0x0F	; 15
    2e76:	37 ce       	rjmp	.-914    	; 0x2ae6 <process_action+0x1b4>
                    if (event.pressed) {
    2e78:	ff 20       	and	r15, r15
    2e7a:	b9 f0       	breq	.+46     	; 0x2eaa <process_action+0x578>
                        if (tap_count < TAPPING_TOGGLE) {
    2e7c:	f4 e0       	ldi	r31, 0x04	; 4
    2e7e:	fe 15       	cp	r31, r14
    2e80:	08 f4       	brcc	.+2      	; 0x2e84 <process_action+0x552>
    2e82:	45 ce       	rjmp	.-886    	; 0x2b0e <process_action+0x1dc>
                            layer_invert(action.layer_tap.val);
    2e84:	81 2f       	mov	r24, r17
    2e86:	8f 71       	andi	r24, 0x1F	; 31
}
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	cf 90       	pop	r12
    2ea2:	bf 90       	pop	r11
    2ea4:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2ea6:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2eaa:	85 e0       	ldi	r24, 0x05	; 5
    2eac:	8e 15       	cp	r24, r14
    2eae:	08 f4       	brcc	.+2      	; 0x2eb2 <process_action+0x580>
    2eb0:	2e ce       	rjmp	.-932    	; 0x2b0e <process_action+0x1dc>
    2eb2:	e8 cf       	rjmp	.-48     	; 0x2e84 <process_action+0x552>
    2eb4:	81 2f       	mov	r24, r17
    2eb6:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_on(action.layer_tap.val) :
    2eb8:	ff 20       	and	r15, r15
    2eba:	a9 f0       	breq	.+42     	; 0x2ee6 <process_action+0x5b4>
}
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	ff 90       	pop	r15
    2ed0:	ef 90       	pop	r14
    2ed2:	df 90       	pop	r13
    2ed4:	cf 90       	pop	r12
    2ed6:	bf 90       	pop	r11
    2ed8:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2eda:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <layer_on>
    2ede:	81 2f       	mov	r24, r17
    2ee0:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_off(action.layer_tap.val) :
    2ee2:	ff 20       	and	r15, r15
    2ee4:	59 f3       	breq	.-42     	; 0x2ebc <process_action+0x58a>
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	0f 91       	pop	r16
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
    2f00:	bf 90       	pop	r11
    2f02:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2f04:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <layer_off>
}
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	ff 90       	pop	r15
    2f1c:	ef 90       	pop	r14
    2f1e:	df 90       	pop	r13
    2f20:	cf 90       	pop	r12
    2f22:	bf 90       	pop	r11
    2f24:	af 90       	pop	r10
                                    layer_clear();
    2f26:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <layer_clear>
                        if (tap_count > 0) {
    2f2a:	e1 10       	cpse	r14, r1
    2f2c:	11 ce       	rjmp	.-990    	; 0x2b50 <process_action+0x21e>
                            layer_off(action.layer_tap.val);
    2f2e:	81 2f       	mov	r24, r17
    2f30:	8f 71       	andi	r24, 0x1F	; 31
    2f32:	d9 cf       	rjmp	.-78     	; 0x2ee6 <process_action+0x5b4>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f34:	41 2f       	mov	r20, r17
    2f36:	4f 70       	andi	r20, 0x0F	; 15
    2f38:	60 2f       	mov	r22, r16
    2f3a:	c5 01       	movw	r24, r10
    2f3c:	0e 94 b9 07 	call	0xf72	; 0xf72 <action_get_macro>
}
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	cf 90       	pop	r12
    2f5a:	bf 90       	pop	r11
    2f5c:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f5e:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    2f62:	41 2f       	mov	r20, r17
    2f64:	4f 70       	andi	r20, 0x0F	; 15
    2f66:	60 2f       	mov	r22, r16
    2f68:	c5 01       	movw	r24, r10
}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
    2f84:	bf 90       	pop	r11
    2f86:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2f88:	0c 94 94 20 	jmp	0x4128	; 0x4128 <action_function>

00002f8c <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2f8c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <clear_weak_mods>
    clear_keys();
    2f90:	0e 94 57 1e 	call	0x3cae	; 0x3cae <clear_keys>
    send_keyboard_report();
    2f94:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2f98:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <mousekey_clear>
    mousekey_send();
    2f9c:	0e 94 4d 24 	call	0x489a	; 0x489a <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	0e 94 a1 11 	call	0x2342	; 0x2342 <host_system_send>
    host_consumer_send(0);
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	0c 94 ce 11 	jmp	0x239c	; 0x239c <host_consumer_send>

00002fb0 <clear_keyboard>:
    clear_mods();
    2fb0:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <clear_mods>
    clear_keyboard_but_mods();
    2fb4:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <clear_keyboard_but_mods>

00002fb8 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <is_tap_key+0x8>
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <is_tap_key+0xa>
    2fc2:	1f 92       	push	r1
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	94 2f       	mov	r25, r20
    2fca:	49 83       	std	Y+1, r20	; 0x01
    2fcc:	25 2f       	mov	r18, r21
    2fce:	5a 83       	std	Y+2, r21	; 0x02
    2fd0:	6b 83       	std	Y+3, r22	; 0x03
    2fd2:	7c 83       	std	Y+4, r23	; 0x04
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	4c 81       	ldd	r20, Y+4	; 0x04
    2fd8:	5d 81       	ldd	r21, Y+5	; 0x05
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	45 2b       	or	r20, r21
    2fde:	31 f0       	breq	.+12     	; 0x2fec <is_tap_key+0x34>
    2fe0:	2f 3f       	cpi	r18, 0xFF	; 255
    2fe2:	19 f4       	brne	.+6      	; 0x2fea <is_tap_key+0x32>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <is_tap_key+0x34>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    2fec:	18 2f       	mov	r17, r24
    2fee:	11 70       	andi	r17, 0x01	; 1
    2ff0:	80 fd       	sbrc	r24, 0
    2ff2:	3a c0       	rjmp	.+116    	; 0x3068 <is_tap_key+0xb0>

    action_t action = layer_switch_get_action(event);
    2ff4:	49 81       	ldd	r20, Y+1	; 0x01
    2ff6:	5a 81       	ldd	r21, Y+2	; 0x02
    2ff8:	6b 81       	ldd	r22, Y+3	; 0x03
    2ffa:	7c 81       	ldd	r23, Y+4	; 0x04
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <layer_switch_get_action>

    switch (action.kind.id) {
    3002:	29 2f       	mov	r18, r25
    3004:	22 95       	swap	r18
    3006:	2f 70       	andi	r18, 0x0F	; 15
    3008:	2c 30       	cpi	r18, 0x0C	; 12
    300a:	78 f4       	brcc	.+30     	; 0x302a <is_tap_key+0x72>
    300c:	2a 30       	cpi	r18, 0x0A	; 10
    300e:	08 f5       	brcc	.+66     	; 0x3052 <is_tap_key+0x9a>
    3010:	22 50       	subi	r18, 0x02	; 2
    3012:	22 30       	cpi	r18, 0x02	; 2
    3014:	90 f0       	brcs	.+36     	; 0x303a <is_tap_key+0x82>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3016:	81 2f       	mov	r24, r17
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	08 95       	ret
    switch (action.kind.id) {
    302a:	2c 30       	cpi	r18, 0x0C	; 12
    302c:	11 f0       	breq	.+4      	; 0x3032 <is_tap_key+0x7a>
    302e:	2f 30       	cpi	r18, 0x0F	; 15
    3030:	91 f7       	brne	.-28     	; 0x3016 <is_tap_key+0x5e>
            if (action.func.opt & FUNC_TAP) { return true; }
    3032:	93 fb       	bst	r25, 3
    3034:	11 27       	eor	r17, r17
    3036:	10 f9       	bld	r17, 0
    3038:	ee cf       	rjmp	.-36     	; 0x3016 <is_tap_key+0x5e>
            switch (action.key.code) {
    303a:	85 3a       	cpi	r24, 0xA5	; 165
    303c:	30 f4       	brcc	.+12     	; 0x304a <is_tap_key+0x92>
    303e:	84 30       	cpi	r24, 0x04	; 4
    3040:	10 f4       	brcc	.+4      	; 0x3046 <is_tap_key+0x8e>
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	30 f4       	brcc	.+12     	; 0x3052 <is_tap_key+0x9a>
                    return true;
    3046:	11 e0       	ldi	r17, 0x01	; 1
    3048:	e6 cf       	rjmp	.-52     	; 0x3016 <is_tap_key+0x5e>
            switch (action.key.code) {
    304a:	90 e2       	ldi	r25, 0x20	; 32
    304c:	98 0f       	add	r25, r24
    304e:	98 30       	cpi	r25, 0x08	; 8
    3050:	d0 f3       	brcs	.-12     	; 0x3046 <is_tap_key+0x8e>
            switch (action.layer_tap.code) {
    3052:	88 3e       	cpi	r24, 0xE8	; 232
    3054:	30 f4       	brcc	.+12     	; 0x3062 <is_tap_key+0xaa>
    3056:	80 3e       	cpi	r24, 0xE0	; 224
    3058:	b0 f7       	brcc	.-20     	; 0x3046 <is_tap_key+0x8e>
    305a:	84 50       	subi	r24, 0x04	; 4
    305c:	81 3a       	cpi	r24, 0xA1	; 161
    305e:	d8 f6       	brcc	.-74     	; 0x3016 <is_tap_key+0x5e>
    3060:	f2 cf       	rjmp	.-28     	; 0x3046 <is_tap_key+0x8e>
    3062:	80 3f       	cpi	r24, 0xF0	; 240
    3064:	c1 f6       	brne	.-80     	; 0x3016 <is_tap_key+0x5e>
    3066:	ef cf       	rjmp	.-34     	; 0x3046 <is_tap_key+0x8e>
    if (IS_NOEVENT(event)) { return false; }
    3068:	10 e0       	ldi	r17, 0x00	; 0
    306a:	d5 cf       	rjmp	.-86     	; 0x3016 <is_tap_key+0x5e>

0000306c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	00 d0       	rcall	.+0      	; 0x3072 <debug_event+0x6>
    3072:	00 d0       	rcall	.+0      	; 0x3074 <debug_event+0x8>
    3074:	1f 92       	push	r1
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	08 95       	ret

0000308a <debug_record>:

void debug_record(keyrecord_t record)
{
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	00 d0       	rcall	.+0      	; 0x3090 <debug_record+0x6>
    3090:	00 d0       	rcall	.+0      	; 0x3092 <debug_record+0x8>
    3092:	00 d0       	rcall	.+0      	; 0x3094 <debug_record+0xa>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3098:	26 96       	adiw	r28, 0x06	; 6
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    30aa:	1f 93       	push	r17
    30ac:	cf 93       	push	r28
    30ae:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30b0:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    30b4:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30b6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <waiting_buffer_head>
    30ba:	8c 13       	cpse	r24, r28
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    30c6:	d0 e0       	ldi	r29, 0x00	; 0
    30c8:	1c 9f       	mul	r17, r28
    30ca:	f0 01       	movw	r30, r0
    30cc:	1d 9f       	mul	r17, r29
    30ce:	f0 0d       	add	r31, r0
    30d0:	11 24       	eor	r1, r1
    30d2:	e7 57       	subi	r30, 0x77	; 119
    30d4:	fe 4f       	sbci	r31, 0xFE	; 254
    30d6:	40 81       	ld	r20, Z
    30d8:	51 81       	ldd	r21, Z+1	; 0x01
    30da:	62 81       	ldd	r22, Z+2	; 0x02
    30dc:	73 81       	ldd	r23, Z+3	; 0x03
    30de:	84 81       	ldd	r24, Z+4	; 0x04
    30e0:	95 81       	ldd	r25, Z+5	; 0x05
    30e2:	0e 94 45 18 	call	0x308a	; 0x308a <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30e6:	21 96       	adiw	r28, 0x01	; 1
    30e8:	c7 70       	andi	r28, 0x07	; 7
    30ea:	e5 cf       	rjmp	.-54     	; 0x30b6 <debug_waiting_buffer+0xc>

000030ec <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    30ec:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <tapping_key>
    30f0:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <tapping_key+0x1>
    30f4:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <tapping_key+0x2>
    30f8:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <tapping_key+0x3>
    30fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tapping_key+0x4>
    3100:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <tapping_key+0x5>
    3104:	0c 94 45 18 	jmp	0x308a	; 0x308a <debug_record>

00003108 <waiting_buffer_scan_tap>:
{
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    310e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3112:	80 7f       	andi	r24, 0xF0	; 240
    3114:	d1 f4       	brne	.+52     	; 0x314a <waiting_buffer_scan_tap+0x42>
    if (!tapping_key.event.pressed) return;
    3116:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x2>
    311a:	88 23       	and	r24, r24
    311c:	b1 f0       	breq	.+44     	; 0x314a <waiting_buffer_scan_tap+0x42>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    311e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    3122:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <waiting_buffer_head>
    3126:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <tapping_key>
    312a:	c0 91 ba 01 	lds	r28, 0x01BA	; 0x8001ba <tapping_key+0x1>
    312e:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <tapping_key+0x3>
    3132:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <tapping_key+0x4>
    3136:	a1 e0       	ldi	r26, 0x01	; 1
    3138:	bf 3f       	cpi	r27, 0xFF	; 255
    313a:	09 f0       	breq	.+2      	; 0x313e <waiting_buffer_scan_tap+0x36>
    313c:	a0 e0       	ldi	r26, 0x00	; 0
    313e:	ba 01       	movw	r22, r20
    3140:	60 95       	com	r22
    3142:	70 95       	com	r23
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3144:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3146:	d8 13       	cpse	r29, r24
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <waiting_buffer_scan_tap+0x4a>
}
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	08 95       	ret
    3152:	21 e0       	ldi	r18, 0x01	; 1
    3154:	41 15       	cp	r20, r1
    3156:	51 05       	cpc	r21, r1
    3158:	21 f0       	breq	.+8      	; 0x3162 <waiting_buffer_scan_tap+0x5a>
    315a:	2a 2f       	mov	r18, r26
    315c:	cf 3f       	cpi	r28, 0xFF	; 255
    315e:	09 f0       	breq	.+2      	; 0x3162 <waiting_buffer_scan_tap+0x5a>
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3164:	20 fd       	sbrc	r18, 0
    3166:	38 c0       	rjmp	.+112    	; 0x31d8 <waiting_buffer_scan_tap+0xd0>
    3168:	18 9f       	mul	r17, r24
    316a:	f0 01       	movw	r30, r0
    316c:	19 9f       	mul	r17, r25
    316e:	f0 0d       	add	r31, r0
    3170:	11 24       	eor	r1, r1
    3172:	e7 57       	subi	r30, 0x77	; 119
    3174:	fe 4f       	sbci	r31, 0xFE	; 254
    3176:	21 81       	ldd	r18, Z+1	; 0x01
    3178:	2c 13       	cpse	r18, r28
    317a:	2e c0       	rjmp	.+92     	; 0x31d8 <waiting_buffer_scan_tap+0xd0>
    317c:	20 81       	ld	r18, Z
    317e:	2b 13       	cpse	r18, r27
    3180:	2b c0       	rjmp	.+86     	; 0x31d8 <waiting_buffer_scan_tap+0xd0>
    3182:	22 81       	ldd	r18, Z+2	; 0x02
    3184:	21 11       	cpse	r18, r1
    3186:	28 c0       	rjmp	.+80     	; 0x31d8 <waiting_buffer_scan_tap+0xd0>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3188:	23 81       	ldd	r18, Z+3	; 0x03
    318a:	34 81       	ldd	r19, Z+4	; 0x04
    318c:	24 17       	cp	r18, r20
    318e:	35 07       	cpc	r19, r21
    3190:	00 f1       	brcs	.+64     	; 0x31d2 <waiting_buffer_scan_tap+0xca>
    3192:	24 1b       	sub	r18, r20
    3194:	35 0b       	sbc	r19, r21
    3196:	28 3c       	cpi	r18, 0xC8	; 200
    3198:	31 05       	cpc	r19, r1
    319a:	f0 f4       	brcc	.+60     	; 0x31d8 <waiting_buffer_scan_tap+0xd0>
            tapping_key.tap.count = 1;
    319c:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
    31a0:	2f 70       	andi	r18, 0x0F	; 15
    31a2:	20 61       	ori	r18, 0x10	; 16
    31a4:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    31a8:	26 e0       	ldi	r18, 0x06	; 6
    31aa:	28 9f       	mul	r18, r24
    31ac:	f0 01       	movw	r30, r0
    31ae:	29 9f       	mul	r18, r25
    31b0:	f0 0d       	add	r31, r0
    31b2:	11 24       	eor	r1, r1
    31b4:	e2 57       	subi	r30, 0x72	; 114
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	80 81       	ld	r24, Z
    31ba:	8f 70       	andi	r24, 0x0F	; 15
    31bc:	80 61       	ori	r24, 0x10	; 16
    31be:	80 83       	st	Z, r24
            process_action(&tapping_key);
    31c0:	89 eb       	ldi	r24, 0xB9	; 185
    31c2:	91 e0       	ldi	r25, 0x01	; 1
    31c4:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
}
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	1f 91       	pop	r17
            debug_waiting_buffer();
    31ce:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <debug_waiting_buffer>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    31d2:	26 0f       	add	r18, r22
    31d4:	37 1f       	adc	r19, r23
    31d6:	df cf       	rjmp	.-66     	; 0x3196 <waiting_buffer_scan_tap+0x8e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	87 70       	andi	r24, 0x07	; 7
    31dc:	b4 cf       	rjmp	.-152    	; 0x3146 <waiting_buffer_scan_tap+0x3e>

000031de <process_tapping>:
{
    31de:	af 92       	push	r10
    31e0:	bf 92       	push	r11
    31e2:	cf 92       	push	r12
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	61 97       	sbiw	r28, 0x11	; 17
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    3204:	85 e0       	ldi	r24, 0x05	; 5
    3206:	f7 01       	movw	r30, r14
    3208:	de 01       	movw	r26, r28
    320a:	1d 96       	adiw	r26, 0x0d	; 13
    320c:	01 90       	ld	r0, Z+
    320e:	0d 92       	st	X+, r0
    3210:	8a 95       	dec	r24
    3212:	e1 f7       	brne	.-8      	; 0x320c <process_tapping+0x2e>
    3214:	d7 01       	movw	r26, r14
    3216:	4c 91       	ld	r20, X
    3218:	11 96       	adiw	r26, 0x01	; 1
    321a:	5c 91       	ld	r21, X
    321c:	11 97       	sbiw	r26, 0x01	; 1
    321e:	12 96       	adiw	r26, 0x02	; 2
    3220:	dc 90       	ld	r13, X
    3222:	12 97       	sbiw	r26, 0x02	; 2
    3224:	13 96       	adiw	r26, 0x03	; 3
    3226:	0d 91       	ld	r16, X+
    3228:	1c 91       	ld	r17, X
    322a:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <tapping_key>
    322e:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tapping_key+0x1>
    3232:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <tapping_key+0x3>
    3236:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <tapping_key+0x4>
    323a:	21 e0       	ldi	r18, 0x01	; 1
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	31 f0       	breq	.+12     	; 0x324c <process_tapping+0x6e>
    3240:	6f 3f       	cpi	r22, 0xFF	; 255
    3242:	19 f4       	brne	.+6      	; 0x324a <process_tapping+0x6c>
    3244:	21 e0       	ldi	r18, 0x01	; 1
    3246:	3f 3f       	cpi	r19, 0xFF	; 255
    3248:	09 f0       	breq	.+2      	; 0x324c <process_tapping+0x6e>
    324a:	20 e0       	ldi	r18, 0x00	; 0
    if (IS_TAPPING_PRESSED()) {
    324c:	b2 2f       	mov	r27, r18
    324e:	b1 70       	andi	r27, 0x01	; 1
    3250:	bb 2e       	mov	r11, r27
    3252:	20 fd       	sbrc	r18, 0
    3254:	89 c1       	rjmp	.+786    	; 0x3568 <process_tapping+0x38a>
    3256:	a0 90 bb 01 	lds	r10, 0x01BB	; 0x8001bb <tapping_key+0x2>
    325a:	aa 20       	and	r10, r10
    325c:	09 f4       	brne	.+2      	; 0x3260 <process_tapping+0x82>
    325e:	25 c1       	rjmp	.+586    	; 0x34aa <process_tapping+0x2cc>
        if (WITHIN_TAPPING_TERM(event)) {
    3260:	08 17       	cp	r16, r24
    3262:	19 07       	cpc	r17, r25
    3264:	d8 f1       	brcs	.+118    	; 0x32dc <process_tapping+0xfe>
    3266:	f8 01       	movw	r30, r16
    3268:	e8 1b       	sub	r30, r24
    326a:	f9 0b       	sbc	r31, r25
    326c:	cf 01       	movw	r24, r30
    326e:	cc 24       	eor	r12, r12
    3270:	c3 94       	inc	r12
    3272:	88 3c       	cpi	r24, 0xC8	; 200
    3274:	91 05       	cpc	r25, r1
    3276:	08 f0       	brcs	.+2      	; 0x327a <process_tapping+0x9c>
    3278:	c1 2c       	mov	r12, r1
    327a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    327e:	98 2f       	mov	r25, r24
    3280:	90 7f       	andi	r25, 0xF0	; 240
    3282:	cc 20       	and	r12, r12
    3284:	09 f4       	brne	.+2      	; 0x3288 <process_tapping+0xaa>
    3286:	c4 c0       	rjmp	.+392    	; 0x3410 <process_tapping+0x232>
            if (tapping_key.tap.count == 0) {
    3288:	91 11       	cpse	r25, r1
    328a:	89 c0       	rjmp	.+274    	; 0x339e <process_tapping+0x1c0>
    328c:	cd 2c       	mov	r12, r13
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    328e:	65 13       	cpse	r22, r21
    3290:	2a c0       	rjmp	.+84     	; 0x32e6 <process_tapping+0x108>
    3292:	34 13       	cpse	r19, r20
    3294:	28 c0       	rjmp	.+80     	; 0x32e6 <process_tapping+0x108>
    3296:	d1 10       	cpse	r13, r1
    3298:	26 c0       	rjmp	.+76     	; 0x32e6 <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    329a:	8f 70       	andi	r24, 0x0F	; 15
    329c:	80 61       	ori	r24, 0x10	; 16
    329e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    debug_tapping_key();
    32a2:	0e 94 76 18 	call	0x30ec	; 0x30ec <debug_tapping_key>
                    process_action(&tapping_key);
    32a6:	89 eb       	ldi	r24, 0xB9	; 185
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                    keyp->tap = tapping_key.tap;
    32ae:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    32b2:	d7 01       	movw	r26, r14
    32b4:	15 96       	adiw	r26, 0x05	; 5
    32b6:	8c 93       	st	X, r24
}
    32b8:	8c 2d       	mov	r24, r12
    32ba:	61 96       	adiw	r28, 0x11	; 17
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	ff 90       	pop	r15
    32d0:	ef 90       	pop	r14
    32d2:	df 90       	pop	r13
    32d4:	cf 90       	pop	r12
    32d6:	bf 90       	pop	r11
    32d8:	af 90       	pop	r10
    32da:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    32dc:	80 95       	com	r24
    32de:	90 95       	com	r25
    32e0:	80 0f       	add	r24, r16
    32e2:	91 1f       	adc	r25, r17
    32e4:	c4 cf       	rjmp	.-120    	; 0x326e <process_tapping+0x90>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	01 15       	cp	r16, r1
    32ea:	11 05       	cpc	r17, r1
    32ec:	31 f0       	breq	.+12     	; 0x32fa <process_tapping+0x11c>
    32ee:	5f 3f       	cpi	r21, 0xFF	; 255
    32f0:	19 f4       	brne	.+6      	; 0x32f8 <process_tapping+0x11a>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	4f 3f       	cpi	r20, 0xFF	; 255
    32f6:	09 f0       	breq	.+2      	; 0x32fa <process_tapping+0x11c>
    32f8:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    32fa:	80 fd       	sbrc	r24, 0
    32fc:	24 c0       	rjmp	.+72     	; 0x3346 <process_tapping+0x168>
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	8d 25       	eor	r24, r13
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3302:	b8 2f       	mov	r27, r24
    3304:	b1 70       	andi	r27, 0x01	; 1
    3306:	ab 2e       	mov	r10, r27
    3308:	80 ff       	sbrs	r24, 0
    330a:	3f c0       	rjmp	.+126    	; 0x338a <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    330c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    3310:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3314:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3316:	82 13       	cpse	r24, r18
    3318:	18 c0       	rjmp	.+48     	; 0x334a <process_tapping+0x16c>
                    action_t action = layer_switch_get_action(event);
    331a:	70 2f       	mov	r23, r16
    331c:	19 8b       	std	Y+17, r17	; 0x11
    331e:	08 8b       	std	Y+16, r16	; 0x10
    3320:	6d 2d       	mov	r22, r13
    3322:	89 89       	ldd	r24, Y+17	; 0x11
    3324:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <layer_switch_get_action>
                    switch (action.kind.id) {
    3328:	29 2f       	mov	r18, r25
    332a:	22 95       	swap	r18
    332c:	2f 70       	andi	r18, 0x0F	; 15
    332e:	22 30       	cpi	r18, 0x02	; 2
    3330:	00 f1       	brcs	.+64     	; 0x3372 <process_tapping+0x194>
    3332:	24 30       	cpi	r18, 0x04	; 4
    3334:	28 f5       	brcc	.+74     	; 0x3380 <process_tapping+0x1a2>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3336:	9f 70       	andi	r25, 0x0F	; 15
    3338:	01 f1       	breq	.+64     	; 0x337a <process_tapping+0x19c>
    333a:	f7 01       	movw	r30, r14
    333c:	95 81       	ldd	r25, Z+5	; 0x05
    333e:	90 7f       	andi	r25, 0xF0	; 240
    3340:	e1 f4       	brne	.+56     	; 0x337a <process_tapping+0x19c>
    3342:	cb 2c       	mov	r12, r11
    3344:	b9 cf       	rjmp	.-142    	; 0x32b8 <process_tapping+0xda>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	dc cf       	rjmp	.-72     	; 0x3302 <process_tapping+0x124>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	38 9f       	mul	r19, r24
    334e:	f0 01       	movw	r30, r0
    3350:	39 9f       	mul	r19, r25
    3352:	f0 0d       	add	r31, r0
    3354:	11 24       	eor	r1, r1
    3356:	e7 57       	subi	r30, 0x77	; 119
    3358:	fe 4f       	sbci	r31, 0xFE	; 254
    335a:	61 81       	ldd	r22, Z+1	; 0x01
    335c:	56 13       	cpse	r21, r22
    335e:	06 c0       	rjmp	.+12     	; 0x336c <process_tapping+0x18e>
    3360:	60 81       	ld	r22, Z
    3362:	46 13       	cpse	r20, r22
    3364:	03 c0       	rjmp	.+6      	; 0x336c <process_tapping+0x18e>
    3366:	62 81       	ldd	r22, Z+2	; 0x02
    3368:	6d 11       	cpse	r22, r13
    336a:	0f c0       	rjmp	.+30     	; 0x338a <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	87 70       	andi	r24, 0x07	; 7
    3370:	d2 cf       	rjmp	.-92     	; 0x3316 <process_tapping+0x138>
                            if (action.key.mods && !action.key.code) return false;
    3372:	9f 70       	andi	r25, 0x0F	; 15
    3374:	11 f0       	breq	.+4      	; 0x337a <process_tapping+0x19c>
    3376:	88 23       	and	r24, r24
    3378:	21 f3       	breq	.-56     	; 0x3342 <process_tapping+0x164>
                            if (IS_MOD(action.key.code)) return false;
    337a:	80 5e       	subi	r24, 0xE0	; 224
    337c:	88 30       	cpi	r24, 0x08	; 8
    337e:	08 f3       	brcs	.-62     	; 0x3342 <process_tapping+0x164>
                    process_action(keyp);
    3380:	c7 01       	movw	r24, r14
    3382:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                    return true;
    3386:	ba 2c       	mov	r11, r10
    3388:	dc cf       	rjmp	.-72     	; 0x3342 <process_tapping+0x164>
                    if (event.pressed) {
    338a:	dd 20       	and	r13, r13
    338c:	09 f4       	brne	.+2      	; 0x3390 <process_tapping+0x1b2>
    338e:	94 cf       	rjmp	.-216    	; 0x32b8 <process_tapping+0xda>
                        tapping_key.tap.interrupted = true;
    3390:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3394:	81 60       	ori	r24, 0x01	; 1
    3396:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    return false;
    339a:	c1 2c       	mov	r12, r1
    339c:	8d cf       	rjmp	.-230    	; 0x32b8 <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    339e:	65 13       	cpse	r22, r21
    33a0:	06 c0       	rjmp	.+12     	; 0x33ae <process_tapping+0x1d0>
    33a2:	34 13       	cpse	r19, r20
    33a4:	04 c0       	rjmp	.+8      	; 0x33ae <process_tapping+0x1d0>
                    keyp->tap = tapping_key.tap;
    33a6:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    33a8:	dd 20       	and	r13, r13
    33aa:	09 f4       	brne	.+2      	; 0x33ae <process_tapping+0x1d0>
    33ac:	a4 c0       	rjmp	.+328    	; 0x34f6 <process_tapping+0x318>
                else if (is_tap_key(event) && event.pressed) {
    33ae:	4d 87       	std	Y+13, r20	; 0x0d
    33b0:	5e 87       	std	Y+14, r21	; 0x0e
    33b2:	df 86       	std	Y+15, r13	; 0x0f
    33b4:	70 2f       	mov	r23, r16
    33b6:	19 8b       	std	Y+17, r17	; 0x11
    33b8:	08 8b       	std	Y+16, r16	; 0x10
    33ba:	6d 2d       	mov	r22, r13
    33bc:	89 89       	ldd	r24, Y+17	; 0x11
    33be:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <is_tap_key>
    33c2:	88 23       	and	r24, r24
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <process_tapping+0x1ea>
    33c6:	de c0       	rjmp	.+444    	; 0x3584 <process_tapping+0x3a6>
    33c8:	dd 20       	and	r13, r13
    33ca:	09 f4       	brne	.+2      	; 0x33ce <process_tapping+0x1f0>
    33cc:	db c0       	rjmp	.+438    	; 0x3584 <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    33ce:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    33d2:	80 32       	cpi	r24, 0x20	; 32
    33d4:	70 f0       	brcs	.+28     	; 0x33f2 <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    33d6:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <tapping_key>
    33da:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <tapping_key+0x1>
    33de:	38 87       	std	Y+8, r19	; 0x08
    33e0:	2f 83       	std	Y+7, r18	; 0x07
    33e2:	19 86       	std	Y+9, r1	; 0x09
    33e4:	1b 87       	std	Y+11, r17	; 0x0b
    33e6:	0a 87       	std	Y+10, r16	; 0x0a
    33e8:	8c 87       	std	Y+12, r24	; 0x0c
    33ea:	ce 01       	movw	r24, r28
    33ec:	07 96       	adiw	r24, 0x07	; 7
    33ee:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                    tapping_key = *keyp;
    33f2:	86 e0       	ldi	r24, 0x06	; 6
    33f4:	f7 01       	movw	r30, r14
    33f6:	a9 eb       	ldi	r26, 0xB9	; 185
    33f8:	b1 e0       	ldi	r27, 0x01	; 1
    33fa:	01 90       	ld	r0, Z+
    33fc:	0d 92       	st	X+, r0
    33fe:	8a 95       	dec	r24
    3400:	e1 f7       	brne	.-8      	; 0x33fa <process_tapping+0x21c>
                    waiting_buffer_scan_tap();
    3402:	0e 94 84 18 	call	0x3108	; 0x3108 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3406:	0e 94 76 18 	call	0x30ec	; 0x30ec <debug_tapping_key>
                    return true;
    340a:	cc 24       	eor	r12, r12
    340c:	c3 94       	inc	r12
    340e:	54 cf       	rjmp	.-344    	; 0x32b8 <process_tapping+0xda>
            if (tapping_key.tap.count == 0) {
    3410:	91 11       	cpse	r25, r1
    3412:	15 c0       	rjmp	.+42     	; 0x343e <process_tapping+0x260>
                debug_event(event); debug("\n");
    3414:	70 2f       	mov	r23, r16
    3416:	19 8b       	std	Y+17, r17	; 0x11
    3418:	08 8b       	std	Y+16, r16	; 0x10
    341a:	6d 2d       	mov	r22, r13
    341c:	89 89       	ldd	r24, Y+17	; 0x11
    341e:	0e 94 36 18 	call	0x306c	; 0x306c <debug_event>
                process_action(&tapping_key);
    3422:	89 eb       	ldi	r24, 0xB9	; 185
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                tapping_key = (keyrecord_t){};
    342a:	86 e0       	ldi	r24, 0x06	; 6
    342c:	e9 eb       	ldi	r30, 0xB9	; 185
    342e:	f1 e0       	ldi	r31, 0x01	; 1
    3430:	df 01       	movw	r26, r30
    3432:	1d 92       	st	X+, r1
    3434:	8a 95       	dec	r24
    3436:	e9 f7       	brne	.-6      	; 0x3432 <process_tapping+0x254>
                debug_tapping_key();
    3438:	0e 94 76 18 	call	0x30ec	; 0x30ec <debug_tapping_key>
                return false;
    343c:	3d cf       	rjmp	.-390    	; 0x32b8 <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    343e:	65 13       	cpse	r22, r21
    3440:	12 c0       	rjmp	.+36     	; 0x3466 <process_tapping+0x288>
    3442:	34 13       	cpse	r19, r20
    3444:	10 c0       	rjmp	.+32     	; 0x3466 <process_tapping+0x288>
    3446:	d1 10       	cpse	r13, r1
    3448:	0e c0       	rjmp	.+28     	; 0x3466 <process_tapping+0x288>
                    keyp->tap = tapping_key.tap;
    344a:	f7 01       	movw	r30, r14
    344c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    344e:	c7 01       	movw	r24, r14
    3450:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                    tapping_key = (keyrecord_t){};
    3454:	e9 eb       	ldi	r30, 0xB9	; 185
    3456:	f1 e0       	ldi	r31, 0x01	; 1
    3458:	86 e0       	ldi	r24, 0x06	; 6
    345a:	df 01       	movw	r26, r30
    345c:	1d 92       	st	X+, r1
    345e:	8a 95       	dec	r24
    3460:	e9 f7       	brne	.-6      	; 0x345c <process_tapping+0x27e>
                    return true;
    3462:	ca 2c       	mov	r12, r10
    3464:	29 cf       	rjmp	.-430    	; 0x32b8 <process_tapping+0xda>
                else if (is_tap_key(event) && event.pressed) {
    3466:	4d 87       	std	Y+13, r20	; 0x0d
    3468:	5e 87       	std	Y+14, r21	; 0x0e
    346a:	df 86       	std	Y+15, r13	; 0x0f
    346c:	70 2f       	mov	r23, r16
    346e:	19 8b       	std	Y+17, r17	; 0x11
    3470:	08 8b       	std	Y+16, r16	; 0x10
    3472:	6d 2d       	mov	r22, r13
    3474:	89 89       	ldd	r24, Y+17	; 0x11
    3476:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <is_tap_key>
    347a:	88 23       	and	r24, r24
    347c:	09 f4       	brne	.+2      	; 0x3480 <process_tapping+0x2a2>
    347e:	82 c0       	rjmp	.+260    	; 0x3584 <process_tapping+0x3a6>
    3480:	dd 20       	and	r13, r13
    3482:	09 f4       	brne	.+2      	; 0x3486 <process_tapping+0x2a8>
    3484:	7f c0       	rjmp	.+254    	; 0x3584 <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    3486:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    348a:	80 32       	cpi	r24, 0x20	; 32
    348c:	08 f4       	brcc	.+2      	; 0x3490 <process_tapping+0x2b2>
    348e:	b1 cf       	rjmp	.-158    	; 0x33f2 <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    3490:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <tapping_key>
    3494:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <tapping_key+0x1>
    3498:	3a 83       	std	Y+2, r19	; 0x02
    349a:	29 83       	std	Y+1, r18	; 0x01
    349c:	1b 82       	std	Y+3, r1	; 0x03
    349e:	1d 83       	std	Y+5, r17	; 0x05
    34a0:	0c 83       	std	Y+4, r16	; 0x04
    34a2:	8e 83       	std	Y+6, r24	; 0x06
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	a2 cf       	rjmp	.-188    	; 0x33ee <process_tapping+0x210>
        if (WITHIN_TAPPING_TERM(event)) {
    34aa:	08 17       	cp	r16, r24
    34ac:	19 07       	cpc	r17, r25
    34ae:	88 f1       	brcs	.+98     	; 0x3512 <process_tapping+0x334>
    34b0:	f8 01       	movw	r30, r16
    34b2:	e8 1b       	sub	r30, r24
    34b4:	f9 0b       	sbc	r31, r25
    34b6:	cf 01       	movw	r24, r30
    34b8:	c1 2c       	mov	r12, r1
    34ba:	88 3c       	cpi	r24, 0xC8	; 200
    34bc:	91 05       	cpc	r25, r1
    34be:	08 f0       	brcs	.+2      	; 0x34c2 <process_tapping+0x2e4>
    34c0:	4b c0       	rjmp	.+150    	; 0x3558 <process_tapping+0x37a>
            if (event.pressed) {
    34c2:	cd 2c       	mov	r12, r13
    34c4:	dd 20       	and	r13, r13
    34c6:	09 f4       	brne	.+2      	; 0x34ca <process_tapping+0x2ec>
    34c8:	5d c0       	rjmp	.+186    	; 0x3584 <process_tapping+0x3a6>
                if (IS_TAPPING_KEY(event.key)) {
    34ca:	65 13       	cpse	r22, r21
    34cc:	30 c0       	rjmp	.+96     	; 0x352e <process_tapping+0x350>
    34ce:	34 13       	cpse	r19, r20
    34d0:	2e c0       	rjmp	.+92     	; 0x352e <process_tapping+0x350>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    34d2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    34d6:	80 fd       	sbrc	r24, 0
    34d8:	21 c0       	rjmp	.+66     	; 0x351c <process_tapping+0x33e>
    34da:	98 2f       	mov	r25, r24
    34dc:	90 7f       	andi	r25, 0xF0	; 240
    34de:	f1 f0       	breq	.+60     	; 0x351c <process_tapping+0x33e>
                        keyp->tap = tapping_key.tap;
    34e0:	d7 01       	movw	r26, r14
    34e2:	15 96       	adiw	r26, 0x05	; 5
    34e4:	8c 93       	st	X, r24
    34e6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    34e8:	90 3f       	cpi	r25, 0xF0	; 240
    34ea:	39 f0       	breq	.+14     	; 0x34fa <process_tapping+0x31c>
    34ec:	98 2f       	mov	r25, r24
    34ee:	90 7f       	andi	r25, 0xF0	; 240
    34f0:	90 5f       	subi	r25, 0xF0	; 240
    34f2:	8f 70       	andi	r24, 0x0F	; 15
    34f4:	89 2b       	or	r24, r25
    34f6:	15 96       	adiw	r26, 0x05	; 5
    34f8:	8c 93       	st	X, r24
                        process_action(keyp);
    34fa:	c7 01       	movw	r24, r14
    34fc:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                        tapping_key = *keyp;
    3500:	86 e0       	ldi	r24, 0x06	; 6
    3502:	f7 01       	movw	r30, r14
    3504:	a9 eb       	ldi	r26, 0xB9	; 185
    3506:	b1 e0       	ldi	r27, 0x01	; 1
    3508:	01 90       	ld	r0, Z+
    350a:	0d 92       	st	X+, r0
    350c:	8a 95       	dec	r24
    350e:	e1 f7       	brne	.-8      	; 0x3508 <process_tapping+0x32a>
    3510:	93 cf       	rjmp	.-218    	; 0x3438 <process_tapping+0x25a>
        if (WITHIN_TAPPING_TERM(event)) {
    3512:	80 95       	com	r24
    3514:	90 95       	com	r25
    3516:	80 0f       	add	r24, r16
    3518:	91 1f       	adc	r25, r17
    351a:	ce cf       	rjmp	.-100    	; 0x34b8 <process_tapping+0x2da>
                        tapping_key = *keyp;
    351c:	86 e0       	ldi	r24, 0x06	; 6
    351e:	f7 01       	movw	r30, r14
    3520:	a9 eb       	ldi	r26, 0xB9	; 185
    3522:	b1 e0       	ldi	r27, 0x01	; 1
    3524:	01 90       	ld	r0, Z+
    3526:	0d 92       	st	X+, r0
    3528:	8a 95       	dec	r24
    352a:	e1 f7       	brne	.-8      	; 0x3524 <process_tapping+0x346>
                        return true;
    352c:	c5 ce       	rjmp	.-630    	; 0x32b8 <process_tapping+0xda>
                } else if (is_tap_key(event)) {
    352e:	4d 87       	std	Y+13, r20	; 0x0d
    3530:	5e 87       	std	Y+14, r21	; 0x0e
    3532:	df 86       	std	Y+15, r13	; 0x0f
    3534:	70 2f       	mov	r23, r16
    3536:	19 8b       	std	Y+17, r17	; 0x11
    3538:	08 8b       	std	Y+16, r16	; 0x10
    353a:	6d 2d       	mov	r22, r13
    353c:	89 89       	ldd	r24, Y+17	; 0x11
    353e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <is_tap_key>
    3542:	81 11       	cpse	r24, r1
    3544:	56 cf       	rjmp	.-340    	; 0x33f2 <process_tapping+0x214>
                    tapping_key.tap.interrupted = true;
    3546:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    354a:	81 60       	ori	r24, 0x01	; 1
    354c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    process_action(keyp);
    3550:	c7 01       	movw	r24, r14
    3552:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
                    return true;
    3556:	b0 ce       	rjmp	.-672    	; 0x32b8 <process_tapping+0xda>
            debug_event(event); debug("\n");
    3558:	70 2f       	mov	r23, r16
    355a:	19 8b       	std	Y+17, r17	; 0x11
    355c:	08 8b       	std	Y+16, r16	; 0x10
    355e:	6d 2d       	mov	r22, r13
    3560:	89 89       	ldd	r24, Y+17	; 0x11
    3562:	0e 94 36 18 	call	0x306c	; 0x306c <debug_event>
    3566:	61 cf       	rjmp	.-318    	; 0x342a <process_tapping+0x24c>
        if (event.pressed && is_tap_key(event)) {
    3568:	dd 20       	and	r13, r13
    356a:	61 f0       	breq	.+24     	; 0x3584 <process_tapping+0x3a6>
    356c:	4d 87       	std	Y+13, r20	; 0x0d
    356e:	5e 87       	std	Y+14, r21	; 0x0e
    3570:	df 86       	std	Y+15, r13	; 0x0f
    3572:	70 2f       	mov	r23, r16
    3574:	19 8b       	std	Y+17, r17	; 0x11
    3576:	08 8b       	std	Y+16, r16	; 0x10
    3578:	6d 2d       	mov	r22, r13
    357a:	89 89       	ldd	r24, Y+17	; 0x11
    357c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <is_tap_key>
    3580:	81 11       	cpse	r24, r1
    3582:	37 cf       	rjmp	.-402    	; 0x33f2 <process_tapping+0x214>
                    process_action(keyp);
    3584:	c7 01       	movw	r24, r14
    3586:	0e 94 99 14 	call	0x2932	; 0x2932 <process_action>
    358a:	3f cf       	rjmp	.-386    	; 0x340a <process_tapping+0x22c>

0000358c <action_tapping_process>:
{
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	2c 97       	sbiw	r28, 0x0c	; 12
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	4f 83       	std	Y+7, r20	; 0x07
    35a4:	58 87       	std	Y+8, r21	; 0x08
    35a6:	69 87       	std	Y+9, r22	; 0x09
    35a8:	7a 87       	std	Y+10, r23	; 0x0a
    35aa:	8b 87       	std	Y+11, r24	; 0x0b
    35ac:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    35ae:	ce 01       	movw	r24, r28
    35b0:	07 96       	adiw	r24, 0x07	; 7
    35b2:	0e 94 ef 18 	call	0x31de	; 0x31de <process_tapping>
    35b6:	88 23       	and	r24, r24
    35b8:	09 f4       	brne	.+2      	; 0x35bc <action_tapping_process+0x30>
    35ba:	42 c0       	rjmp	.+132    	; 0x3640 <action_tapping_process+0xb4>
    35bc:	9f 81       	ldd	r25, Y+7	; 0x07
    35be:	88 85       	ldd	r24, Y+8	; 0x08
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    35c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    35c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    35c4:	23 2b       	or	r18, r19
    35c6:	39 f0       	breq	.+14     	; 0x35d6 <action_tapping_process+0x4a>
    35c8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <action_tapping_process+0x46>
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	9f 3f       	cpi	r25, 0xFF	; 255
    35d0:	19 f0       	breq	.+6      	; 0x35d8 <action_tapping_process+0x4c>
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	01 c0       	rjmp	.+2      	; 0x35d8 <action_tapping_process+0x4c>
    35d6:	81 e0       	ldi	r24, 0x01	; 1
        if (!IS_NOEVENT(record.event)) {
    35d8:	80 fd       	sbrc	r24, 0
    35da:	08 c0       	rjmp	.+16     	; 0x35ec <action_tapping_process+0x60>
            debug("processed: "); debug_record(record); debug("\n");
    35dc:	4f 81       	ldd	r20, Y+7	; 0x07
    35de:	58 85       	ldd	r21, Y+8	; 0x08
    35e0:	69 85       	ldd	r22, Y+9	; 0x09
    35e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    35e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    35e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    35e8:	0e 94 45 18 	call	0x308a	; 0x308a <debug_record>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35ec:	16 e0       	ldi	r17, 0x06	; 6
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35ee:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    35f2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <waiting_buffer_head>
    35f6:	89 17       	cp	r24, r25
    35f8:	09 f4       	brne	.+2      	; 0x35fc <action_tapping_process+0x70>
    35fa:	67 c0       	rjmp	.+206    	; 0x36ca <action_tapping_process+0x13e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35fc:	81 9f       	mul	r24, r17
    35fe:	c0 01       	movw	r24, r0
    3600:	11 24       	eor	r1, r1
    3602:	87 57       	subi	r24, 0x77	; 119
    3604:	9e 4f       	sbci	r25, 0xFE	; 254
    3606:	0e 94 ef 18 	call	0x31de	; 0x31de <process_tapping>
    360a:	88 23       	and	r24, r24
    360c:	09 f4       	brne	.+2      	; 0x3610 <action_tapping_process+0x84>
    360e:	5d c0       	rjmp	.+186    	; 0x36ca <action_tapping_process+0x13e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3610:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <waiting_buffer_tail>
    3614:	1e 9f       	mul	r17, r30
    3616:	f0 01       	movw	r30, r0
    3618:	11 24       	eor	r1, r1
    361a:	e7 57       	subi	r30, 0x77	; 119
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	40 81       	ld	r20, Z
    3620:	51 81       	ldd	r21, Z+1	; 0x01
    3622:	62 81       	ldd	r22, Z+2	; 0x02
    3624:	73 81       	ldd	r23, Z+3	; 0x03
    3626:	84 81       	ldd	r24, Z+4	; 0x04
    3628:	95 81       	ldd	r25, Z+5	; 0x05
    362a:	0e 94 45 18 	call	0x308a	; 0x308a <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    362e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	87 70       	andi	r24, 0x07	; 7
    3638:	99 27       	eor	r25, r25
    363a:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <waiting_buffer_tail>
    363e:	d7 cf       	rjmp	.-82     	; 0x35ee <action_tapping_process+0x62>
    3640:	86 e0       	ldi	r24, 0x06	; 6
    3642:	fe 01       	movw	r30, r28
    3644:	37 96       	adiw	r30, 0x07	; 7
    3646:	de 01       	movw	r26, r28
    3648:	11 96       	adiw	r26, 0x01	; 1
    364a:	01 90       	ld	r0, Z+
    364c:	0d 92       	st	X+, r0
    364e:	8a 95       	dec	r24
    3650:	e1 f7       	brne	.-8      	; 0x364a <action_tapping_process+0xbe>
    3652:	9f 81       	ldd	r25, Y+7	; 0x07
    3654:	88 85       	ldd	r24, Y+8	; 0x08
    3656:	2a 85       	ldd	r18, Y+10	; 0x0a
    3658:	3b 85       	ldd	r19, Y+11	; 0x0b
    365a:	23 2b       	or	r18, r19
    365c:	39 f0       	breq	.+14     	; 0x366c <action_tapping_process+0xe0>
    365e:	8f 3f       	cpi	r24, 0xFF	; 255
    3660:	19 f4       	brne	.+6      	; 0x3668 <action_tapping_process+0xdc>
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	9f 3f       	cpi	r25, 0xFF	; 255
    3666:	19 f0       	breq	.+6      	; 0x366e <action_tapping_process+0xe2>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	01 c0       	rjmp	.+2      	; 0x366e <action_tapping_process+0xe2>
    366c:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(record.event)) {
    366e:	80 fd       	sbrc	r24, 0
    3670:	bd cf       	rjmp	.-134    	; 0x35ec <action_tapping_process+0x60>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3672:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	c9 01       	movw	r24, r18
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	87 70       	andi	r24, 0x07	; 7
    367e:	99 27       	eor	r25, r25
    3680:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <waiting_buffer_tail>
    3684:	48 17       	cp	r20, r24
    3686:	19 06       	cpc	r1, r25
    3688:	99 f0       	breq	.+38     	; 0x36b0 <action_tapping_process+0x124>
    waiting_buffer[waiting_buffer_head] = record;
    368a:	96 e0       	ldi	r25, 0x06	; 6
    368c:	92 9f       	mul	r25, r18
    368e:	d0 01       	movw	r26, r0
    3690:	93 9f       	mul	r25, r19
    3692:	b0 0d       	add	r27, r0
    3694:	11 24       	eor	r1, r1
    3696:	a7 57       	subi	r26, 0x77	; 119
    3698:	be 4f       	sbci	r27, 0xFE	; 254
    369a:	fe 01       	movw	r30, r28
    369c:	31 96       	adiw	r30, 0x01	; 1
    369e:	01 90       	ld	r0, Z+
    36a0:	0d 92       	st	X+, r0
    36a2:	9a 95       	dec	r25
    36a4:	e1 f7       	brne	.-8      	; 0x369e <action_tapping_process+0x112>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    36a6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    36aa:	0e 94 55 18 	call	0x30aa	; 0x30aa <debug_waiting_buffer>
    36ae:	9e cf       	rjmp	.-196    	; 0x35ec <action_tapping_process+0x60>
            clear_keyboard();
    36b0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_keyboard>
    waiting_buffer_head = 0;
    36b4:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    36b8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    36bc:	86 e0       	ldi	r24, 0x06	; 6
    36be:	e9 eb       	ldi	r30, 0xB9	; 185
    36c0:	f1 e0       	ldi	r31, 0x01	; 1
    36c2:	df 01       	movw	r26, r30
    36c4:	1d 92       	st	X+, r1
    36c6:	8a 95       	dec	r24
    36c8:	e9 f7       	brne	.-6      	; 0x36c4 <action_tapping_process+0x138>
}
    36ca:	2c 96       	adiw	r28, 0x0c	; 12
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	1f 91       	pop	r17
    36dc:	08 95       	ret

000036de <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    36de:	df 92       	push	r13
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    36ee:	89 2b       	or	r24, r25
    36f0:	b9 f0       	breq	.+46     	; 0x3720 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    36f2:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    36f4:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    36f6:	dd 24       	eor	r13, r13
    36f8:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    36fa:	e8 01       	movw	r28, r16
    36fc:	21 96       	adiw	r28, 0x01	; 1
    36fe:	f8 01       	movw	r30, r16
    3700:	84 91       	lpm	r24, Z
    3702:	85 37       	cpi	r24, 0x75	; 117
    3704:	09 f4       	brne	.+2      	; 0x3708 <action_macro_play+0x2a>
    3706:	6a c0       	rjmp	.+212    	; 0x37dc <action_macro_play+0xfe>
    3708:	98 f4       	brcc	.+38     	; 0x3730 <action_macro_play+0x52>
    370a:	84 37       	cpi	r24, 0x74	; 116
    370c:	08 f0       	brcs	.+2      	; 0x3710 <action_macro_play+0x32>
    370e:	59 c0       	rjmp	.+178    	; 0x37c2 <action_macro_play+0xe4>
    3710:	84 30       	cpi	r24, 0x04	; 4
    3712:	08 f0       	brcs	.+2      	; 0x3716 <action_macro_play+0x38>
    3714:	6f c0       	rjmp	.+222    	; 0x37f4 <action_macro_play+0x116>
    3716:	81 30       	cpi	r24, 0x01	; 1
    3718:	11 f1       	breq	.+68     	; 0x375e <action_macro_play+0x80>
    371a:	82 30       	cpi	r24, 0x02	; 2
    371c:	09 f4       	brne	.+2      	; 0x3720 <action_macro_play+0x42>
    371e:	3c c0       	rjmp	.+120    	; 0x3798 <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	ff 90       	pop	r15
    372a:	ef 90       	pop	r14
    372c:	df 90       	pop	r13
    372e:	08 95       	ret
        switch (MACRO_READ()) {
    3730:	88 37       	cpi	r24, 0x78	; 120
    3732:	09 f4       	brne	.+2      	; 0x3736 <action_macro_play+0x58>
    3734:	5c c0       	rjmp	.+184    	; 0x37ee <action_macro_play+0x110>
    3736:	58 f4       	brcc	.+22     	; 0x374e <action_macro_play+0x70>
    3738:	86 37       	cpi	r24, 0x76	; 118
    373a:	09 f4       	brne	.+2      	; 0x373e <action_macro_play+0x60>
    373c:	54 c0       	rjmp	.+168    	; 0x37e6 <action_macro_play+0x108>
    373e:	87 37       	cpi	r24, 0x77	; 119
    3740:	79 f7       	brne	.-34     	; 0x3720 <action_macro_play+0x42>
                set_mods(mod_storage);
    3742:	8e 2d       	mov	r24, r14
    3744:	0e 94 76 1e 	call	0x3cec	; 0x3cec <set_mods>
                send_keyboard_report();
    3748:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
                break;
    374c:	1f c0       	rjmp	.+62     	; 0x378c <action_macro_play+0xae>
        switch (MACRO_READ()) {
    374e:	9c e7       	ldi	r25, 0x7C	; 124
    3750:	98 0f       	add	r25, r24
    3752:	90 37       	cpi	r25, 0x70	; 112
    3754:	28 f7       	brcc	.-54     	; 0x3720 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    3756:	8f 77       	andi	r24, 0x7F	; 127
    3758:	0e 94 21 14 	call	0x2842	; 0x2842 <unregister_code>
                break;
    375c:	17 c0       	rjmp	.+46     	; 0x378c <action_macro_play+0xae>
                MACRO_READ();
    375e:	0e 5f       	subi	r16, 0xFE	; 254
    3760:	1f 4f       	sbci	r17, 0xFF	; 255
    3762:	fe 01       	movw	r30, r28
    3764:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3766:	90 e2       	ldi	r25, 0x20	; 32
    3768:	98 0f       	add	r25, r24
    376a:	98 30       	cpi	r25, 0x08	; 8
    376c:	60 f4       	brcc	.+24     	; 0x3786 <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    376e:	87 70       	andi	r24, 0x07	; 7
    3770:	fd 2d       	mov	r31, r13
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <action_macro_play+0x98>
    3774:	ff 0f       	add	r31, r31
    3776:	8a 95       	dec	r24
    3778:	ea f7       	brpl	.-6      	; 0x3774 <action_macro_play+0x96>
    377a:	8f 2f       	mov	r24, r31
    377c:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <add_weak_mods>
                    send_keyboard_report();
    3780:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <send_keyboard_report>
    3784:	02 c0       	rjmp	.+4      	; 0x378a <action_macro_play+0xac>
                    register_code(macro);
    3786:	0e 94 46 13 	call	0x268c	; 0x268c <register_code>
                MACRO_READ();
    378a:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    378c:	8f 2d       	mov	r24, r15
    378e:	81 50       	subi	r24, 0x01	; 1
    3790:	08 f0       	brcs	.+2      	; 0x3794 <action_macro_play+0xb6>
    3792:	33 c0       	rjmp	.+102    	; 0x37fa <action_macro_play+0x11c>
    3794:	8e 01       	movw	r16, r28
    3796:	b1 cf       	rjmp	.-158    	; 0x36fa <action_macro_play+0x1c>
                MACRO_READ();
    3798:	0e 5f       	subi	r16, 0xFE	; 254
    379a:	1f 4f       	sbci	r17, 0xFF	; 255
    379c:	fe 01       	movw	r30, r28
    379e:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    37a0:	90 e2       	ldi	r25, 0x20	; 32
    37a2:	98 0f       	add	r25, r24
    37a4:	98 30       	cpi	r25, 0x08	; 8
    37a6:	50 f4       	brcc	.+20     	; 0x37bc <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    37a8:	87 70       	andi	r24, 0x07	; 7
    37aa:	fd 2d       	mov	r31, r13
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <action_macro_play+0xd2>
    37ae:	ff 0f       	add	r31, r31
    37b0:	8a 95       	dec	r24
    37b2:	ea f7       	brpl	.-6      	; 0x37ae <action_macro_play+0xd0>
    37b4:	8f 2f       	mov	r24, r31
    37b6:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <del_weak_mods>
    37ba:	e2 cf       	rjmp	.-60     	; 0x3780 <action_macro_play+0xa2>
                    unregister_code(macro);
    37bc:	0e 94 21 14 	call	0x2842	; 0x2842 <unregister_code>
    37c0:	e4 cf       	rjmp	.-56     	; 0x378a <action_macro_play+0xac>
                MACRO_READ();
    37c2:	0e 5f       	subi	r16, 0xFE	; 254
    37c4:	1f 4f       	sbci	r17, 0xFF	; 255
    37c6:	fe 01       	movw	r30, r28
    37c8:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    37ca:	c1 50       	subi	r28, 0x01	; 1
    37cc:	f0 f2       	brcs	.-68     	; 0x378a <action_macro_play+0xac>
    37ce:	8f e9       	ldi	r24, 0x9F	; 159
    37d0:	9f e0       	ldi	r25, 0x0F	; 15
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <action_macro_play+0xf4>
    37d6:	00 c0       	rjmp	.+0      	; 0x37d8 <action_macro_play+0xfa>
    37d8:	00 00       	nop
    37da:	f7 cf       	rjmp	.-18     	; 0x37ca <action_macro_play+0xec>
                interval = MACRO_READ();
    37dc:	0e 5f       	subi	r16, 0xFE	; 254
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	f4 90       	lpm	r15, Z
    37e4:	d2 cf       	rjmp	.-92     	; 0x378a <action_macro_play+0xac>
                mod_storage = get_mods();
    37e6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <get_mods>
    37ea:	e8 2e       	mov	r14, r24
                break;
    37ec:	cf cf       	rjmp	.-98     	; 0x378c <action_macro_play+0xae>
                clear_mods();
    37ee:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <clear_mods>
    37f2:	aa cf       	rjmp	.-172    	; 0x3748 <action_macro_play+0x6a>
                register_code(macro);
    37f4:	0e 94 46 13 	call	0x268c	; 0x268c <register_code>
                break;
    37f8:	c9 cf       	rjmp	.-110    	; 0x378c <action_macro_play+0xae>
    37fa:	ef e9       	ldi	r30, 0x9F	; 159
    37fc:	ff e0       	ldi	r31, 0x0F	; 15
    37fe:	31 97       	sbiw	r30, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <action_macro_play+0x120>
    3802:	00 c0       	rjmp	.+0      	; 0x3804 <action_macro_play+0x126>
    3804:	00 00       	nop
    3806:	c3 cf       	rjmp	.-122    	; 0x378e <action_macro_play+0xb0>

00003808 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3808:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <layer_state>
    380c:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <layer_state+0x1>
    3810:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <layer_state+0x2>
    3814:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <layer_state+0x3>
    hook_layer_change(layer_state);
    3818:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <hook_layer_change>

0000381c <default_layer_debug>:
}
    381c:	08 95       	ret

0000381e <default_layer_set>:
    default_layer_state = state;
    381e:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    3822:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    3826:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    382a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    382e:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <hook_default_layer_change>

00003832 <default_layer_or>:
{
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3836:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    383a:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    383e:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    3842:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    3846:	60 2b       	or	r22, r16
    3848:	71 2b       	or	r23, r17
    384a:	82 2b       	or	r24, r18
    384c:	93 2b       	or	r25, r19
    default_layer_state = state;
    384e:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    3852:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    3856:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    385a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    385e:	1f 91       	pop	r17
    3860:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3862:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <hook_default_layer_change>

00003866 <default_layer_and>:
{
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    386a:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    386e:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    3872:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    3876:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    387a:	60 23       	and	r22, r16
    387c:	71 23       	and	r23, r17
    387e:	82 23       	and	r24, r18
    3880:	93 23       	and	r25, r19
    default_layer_state = state;
    3882:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    3886:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    388a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    388e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3896:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <hook_default_layer_change>

0000389a <default_layer_xor>:
{
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    389e:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    38a2:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    38a6:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    38aa:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    38ae:	60 27       	eor	r22, r16
    38b0:	71 27       	eor	r23, r17
    38b2:	82 27       	eor	r24, r18
    38b4:	93 27       	eor	r25, r19
    default_layer_state = state;
    38b6:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    38ba:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    38be:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    38c2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    38ca:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <hook_default_layer_change>

000038ce <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	cb 01       	movw	r24, r22
    38d4:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

000038d8 <layer_move>:
}

void layer_move(uint8_t layer)
{
    38d8:	0f 93       	push	r16
    38da:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	8a 01       	movw	r16, r20
    38e6:	9b 01       	movw	r18, r22
    38e8:	04 c0       	rjmp	.+8      	; 0x38f2 <layer_move+0x1a>
    38ea:	00 0f       	add	r16, r16
    38ec:	11 1f       	adc	r17, r17
    38ee:	22 1f       	adc	r18, r18
    38f0:	33 1f       	adc	r19, r19
    38f2:	8a 95       	dec	r24
    38f4:	d2 f7       	brpl	.-12     	; 0x38ea <layer_move+0x12>
    38f6:	c9 01       	movw	r24, r18
    38f8:	b8 01       	movw	r22, r16
}
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    38fe:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

00003902 <layer_on>:

void layer_on(uint8_t layer)
{
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3906:	41 e0       	ldi	r20, 0x01	; 1
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	04 c0       	rjmp	.+8      	; 0x3918 <layer_on+0x16>
    3910:	44 0f       	add	r20, r20
    3912:	55 1f       	adc	r21, r21
    3914:	66 1f       	adc	r22, r22
    3916:	77 1f       	adc	r23, r23
    3918:	8a 95       	dec	r24
    391a:	d2 f7       	brpl	.-12     	; 0x3910 <layer_on+0xe>
    391c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <layer_state>
    3920:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <layer_state+0x1>
    3924:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <layer_state+0x2>
    3928:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <layer_state+0x3>
    392c:	8a 01       	movw	r16, r20
    392e:	9b 01       	movw	r18, r22
    3930:	08 2b       	or	r16, r24
    3932:	19 2b       	or	r17, r25
    3934:	2a 2b       	or	r18, r26
    3936:	3b 2b       	or	r19, r27
    3938:	c9 01       	movw	r24, r18
    393a:	b8 01       	movw	r22, r16
}
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    3940:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

00003944 <layer_off>:

void layer_off(uint8_t layer)
{
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	04 c0       	rjmp	.+8      	; 0x395a <layer_off+0x16>
    3952:	44 0f       	add	r20, r20
    3954:	55 1f       	adc	r21, r21
    3956:	66 1f       	adc	r22, r22
    3958:	77 1f       	adc	r23, r23
    395a:	8a 95       	dec	r24
    395c:	d2 f7       	brpl	.-12     	; 0x3952 <layer_off+0xe>
    395e:	cb 01       	movw	r24, r22
    3960:	ba 01       	movw	r22, r20
    3962:	60 95       	com	r22
    3964:	70 95       	com	r23
    3966:	80 95       	com	r24
    3968:	90 95       	com	r25
    396a:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    396e:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    3972:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    3976:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    397a:	60 23       	and	r22, r16
    397c:	71 23       	and	r23, r17
    397e:	82 23       	and	r24, r18
    3980:	93 23       	and	r25, r19
}
    3982:	1f 91       	pop	r17
    3984:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    3986:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

0000398a <layer_invert>:

void layer_invert(uint8_t layer)
{
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	60 e0       	ldi	r22, 0x00	; 0
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	04 c0       	rjmp	.+8      	; 0x39a0 <layer_invert+0x16>
    3998:	44 0f       	add	r20, r20
    399a:	55 1f       	adc	r21, r21
    399c:	66 1f       	adc	r22, r22
    399e:	77 1f       	adc	r23, r23
    39a0:	8a 95       	dec	r24
    39a2:	d2 f7       	brpl	.-12     	; 0x3998 <layer_invert+0xe>
    39a4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <layer_state>
    39a8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <layer_state+0x1>
    39ac:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <layer_state+0x2>
    39b0:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <layer_state+0x3>
    39b4:	8a 01       	movw	r16, r20
    39b6:	9b 01       	movw	r18, r22
    39b8:	08 27       	eor	r16, r24
    39ba:	19 27       	eor	r17, r25
    39bc:	2a 27       	eor	r18, r26
    39be:	3b 27       	eor	r19, r27
    39c0:	c9 01       	movw	r24, r18
    39c2:	b8 01       	movw	r22, r16
}
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    39c8:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

000039cc <layer_or>:

void layer_or(uint32_t state)
{
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    39d0:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    39d4:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    39d8:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    39dc:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    39e0:	60 2b       	or	r22, r16
    39e2:	71 2b       	or	r23, r17
    39e4:	82 2b       	or	r24, r18
    39e6:	93 2b       	or	r25, r19
}
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    39ec:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

000039f0 <layer_and>:
void layer_and(uint32_t state)
{
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    39f4:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    39f8:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    39fc:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    3a00:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    3a04:	60 23       	and	r22, r16
    3a06:	71 23       	and	r23, r17
    3a08:	82 23       	and	r24, r18
    3a0a:	93 23       	and	r25, r19
}
    3a0c:	1f 91       	pop	r17
    3a0e:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    3a10:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

00003a14 <layer_xor>:
void layer_xor(uint32_t state)
{
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3a18:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    3a1c:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    3a20:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    3a24:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    3a28:	60 27       	eor	r22, r16
    3a2a:	71 27       	eor	r23, r17
    3a2c:	82 27       	eor	r24, r18
    3a2e:	93 27       	eor	r25, r19
}
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    3a34:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <layer_state_set>

00003a38 <layer_debug>:
    3a38:	08 95       	ret

00003a3a <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    3a3a:	4f 92       	push	r4
    3a3c:	5f 92       	push	r5
    3a3e:	6f 92       	push	r6
    3a40:	7f 92       	push	r7
    3a42:	9f 92       	push	r9
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <layer_switch_get_action+0x20>
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <layer_switch_get_action+0x22>
    3a5c:	1f 92       	push	r1
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	6b 83       	std	Y+3, r22	; 0x03
    3a64:	7c 83       	std	Y+4, r23	; 0x04
    3a66:	8d 83       	std	Y+5, r24	; 0x05
    3a68:	8a 01       	movw	r16, r20
    3a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a6e:	89 2b       	or	r24, r25
    3a70:	39 f0       	breq	.+14     	; 0x3a80 <layer_switch_get_action+0x46>
    3a72:	1f 3f       	cpi	r17, 0xFF	; 255
    3a74:	19 f4       	brne	.+6      	; 0x3a7c <layer_switch_get_action+0x42>
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	4f 3f       	cpi	r20, 0xFF	; 255
    3a7a:	19 f0       	breq	.+6      	; 0x3a82 <layer_switch_get_action+0x48>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <layer_switch_get_action+0x48>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    3a82:	80 fd       	sbrc	r24, 0
    3a84:	6a c0       	rjmp	.+212    	; 0x3b5a <layer_switch_get_action+0x120>
    3a86:	a1 2e       	mov	r10, r17
    3a88:	b1 2c       	mov	r11, r1
    3a8a:	c0 2e       	mov	r12, r16
    3a8c:	d1 2c       	mov	r13, r1

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    3a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a90:	88 23       	and	r24, r24
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <layer_switch_get_action+0x5c>
    3a94:	56 c0       	rjmp	.+172    	; 0x3b42 <layer_switch_get_action+0x108>
    uint32_t layers = layer_state | default_layer_state;
    3a96:	40 90 0a 02 	lds	r4, 0x020A	; 0x80020a <layer_state>
    3a9a:	50 90 0b 02 	lds	r5, 0x020B	; 0x80020b <layer_state+0x1>
    3a9e:	60 90 0c 02 	lds	r6, 0x020C	; 0x80020c <layer_state+0x2>
    3aa2:	70 90 0d 02 	lds	r7, 0x020D	; 0x80020d <layer_state+0x3>
    3aa6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <default_layer_state>
    3aaa:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <default_layer_state+0x1>
    3aae:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <default_layer_state+0x2>
    3ab2:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <default_layer_state+0x3>
    3ab6:	48 2a       	or	r4, r24
    3ab8:	59 2a       	or	r5, r25
    3aba:	6a 2a       	or	r6, r26
    3abc:	7b 2a       	or	r7, r27
    3abe:	8f e1       	ldi	r24, 0x1F	; 31
    3ac0:	e8 2e       	mov	r14, r24
    3ac2:	f1 2c       	mov	r15, r1
    3ac4:	9e 2c       	mov	r9, r14
        if (layers & (1UL<<i)) {
    3ac6:	d3 01       	movw	r26, r6
    3ac8:	c2 01       	movw	r24, r4
    3aca:	0e 2c       	mov	r0, r14
    3acc:	04 c0       	rjmp	.+8      	; 0x3ad6 <layer_switch_get_action+0x9c>
    3ace:	b6 95       	lsr	r27
    3ad0:	a7 95       	ror	r26
    3ad2:	97 95       	ror	r25
    3ad4:	87 95       	ror	r24
    3ad6:	0a 94       	dec	r0
    3ad8:	d2 f7       	brpl	.-12     	; 0x3ace <layer_switch_get_action+0x94>
    3ada:	80 fd       	sbrc	r24, 0
    3adc:	2b c0       	rjmp	.+86     	; 0x3b34 <layer_switch_get_action+0xfa>
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	e8 1a       	sub	r14, r24
    3ae2:	f1 08       	sbc	r15, r1
    3ae4:	78 f7       	brcc	.-34     	; 0x3ac4 <layer_switch_get_action+0x8a>
    return 0;
    3ae6:	91 2c       	mov	r9, r1
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    3ae8:	8f e0       	ldi	r24, 0x0F	; 15
    3aea:	8a 9d       	mul	r24, r10
    3aec:	f0 01       	movw	r30, r0
    3aee:	8b 9d       	mul	r24, r11
    3af0:	f0 0d       	add	r31, r0
    3af2:	11 24       	eor	r1, r1
    3af4:	e1 54       	subi	r30, 0x41	; 65
    3af6:	fe 4f       	sbci	r31, 0xFE	; 254
    3af8:	ec 0d       	add	r30, r12
    3afa:	fd 1d       	adc	r31, r13
    3afc:	90 82       	st	Z, r9
        layer = layer_pressed[event.key.row][event.key.col];
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    3afe:	09 83       	std	Y+1, r16	; 0x01
    3b00:	1a 83       	std	Y+2, r17	; 0x02
    3b02:	69 81       	ldd	r22, Y+1	; 0x01
    3b04:	7a 81       	ldd	r23, Y+2	; 0x02
    3b06:	89 2d       	mov	r24, r9
}
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	df 90       	pop	r13
    3b20:	cf 90       	pop	r12
    3b22:	bf 90       	pop	r11
    3b24:	af 90       	pop	r10
    3b26:	9f 90       	pop	r9
    3b28:	7f 90       	pop	r7
    3b2a:	6f 90       	pop	r6
    3b2c:	5f 90       	pop	r5
    3b2e:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    3b30:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <action_for_key>
            action = action_for_key(i, key);
    3b34:	b8 01       	movw	r22, r16
    3b36:	8e 2d       	mov	r24, r14
    3b38:	0e 94 b0 20 	call	0x4160	; 0x4160 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	79 f2       	breq	.-98     	; 0x3ade <layer_switch_get_action+0xa4>
    3b40:	d3 cf       	rjmp	.-90     	; 0x3ae8 <layer_switch_get_action+0xae>
        layer = layer_pressed[event.key.row][event.key.col];
    3b42:	8f e0       	ldi	r24, 0x0F	; 15
    3b44:	8a 9d       	mul	r24, r10
    3b46:	f0 01       	movw	r30, r0
    3b48:	8b 9d       	mul	r24, r11
    3b4a:	f0 0d       	add	r31, r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	e1 54       	subi	r30, 0x41	; 65
    3b50:	fe 4f       	sbci	r31, 0xFE	; 254
    3b52:	ec 0d       	add	r30, r12
    3b54:	fd 1d       	adc	r31, r13
    3b56:	90 80       	ld	r9, Z
    3b58:	d2 cf       	rjmp	.-92     	; 0x3afe <layer_switch_get_action+0xc4>
}
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	ff 90       	pop	r15
    3b72:	ef 90       	pop	r14
    3b74:	df 90       	pop	r13
    3b76:	cf 90       	pop	r12
    3b78:	bf 90       	pop	r11
    3b7a:	af 90       	pop	r10
    3b7c:	9f 90       	pop	r9
    3b7e:	7f 90       	pop	r7
    3b80:	6f 90       	pop	r6
    3b82:	5f 90       	pop	r5
    3b84:	4f 90       	pop	r4
    3b86:	08 95       	ret

00003b88 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    3b88:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    3b8c:	99 23       	and	r25, r25
    3b8e:	69 f1       	breq	.+90     	; 0x3bea <add_key+0x62>
    3b90:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    3b94:	99 23       	and	r25, r25
    3b96:	49 f1       	breq	.+82     	; 0x3bea <add_key+0x62>
    3b98:	e8 2f       	mov	r30, r24
    3b9a:	e6 95       	lsr	r30
    3b9c:	e6 95       	lsr	r30
    3b9e:	e6 95       	lsr	r30
    3ba0:	ef 31       	cpi	r30, 0x1F	; 31
    3ba2:	91 f0       	breq	.+36     	; 0x3bc8 <add_key+0x40>
    3ba4:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3ba8:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3bac:	e2 0f       	add	r30, r18
    3bae:	f3 2f       	mov	r31, r19
    3bb0:	f1 1d       	adc	r31, r1
    3bb2:	87 70       	andi	r24, 0x07	; 7
    3bb4:	21 e0       	ldi	r18, 0x01	; 1
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	01 c0       	rjmp	.+2      	; 0x3bbc <add_key+0x34>
    3bba:	22 0f       	add	r18, r18
    3bbc:	8a 95       	dec	r24
    3bbe:	ea f7       	brpl	.-6      	; 0x3bba <add_key+0x32>
    3bc0:	81 81       	ldd	r24, Z+1	; 0x01
    3bc2:	82 2b       	or	r24, r18
    3bc4:	81 83       	std	Z+1, r24	; 0x01
    3bc6:	08 95       	ret
    3bc8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    3bcc:	90 ff       	sbrs	r25, 0
    3bce:	22 c0       	rjmp	.+68     	; 0x3c14 <add_key+0x8c>
    3bd0:	1f 92       	push	r1
    3bd2:	8f 93       	push	r24
    3bd4:	83 ec       	ldi	r24, 0xC3	; 195
    3bd6:	95 e0       	ldi	r25, 0x05	; 5
    3bd8:	9f 93       	push	r25
    3bda:	8f 93       	push	r24
    3bdc:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	08 95       	ret
    3bea:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3bee:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3bf2:	f9 01       	movw	r30, r18
    3bf4:	32 96       	adiw	r30, 0x02	; 2
    3bf6:	9f ef       	ldi	r25, 0xFF	; 255
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	51 91       	ld	r21, Z+
    3bfc:	85 17       	cp	r24, r21
    3bfe:	51 f0       	breq	.+20     	; 0x3c14 <add_key+0x8c>
    3c00:	9f 3f       	cpi	r25, 0xFF	; 255
    3c02:	19 f4       	brne	.+6      	; 0x3c0a <add_key+0x82>
    3c04:	51 11       	cpse	r21, r1
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <add_key+0x82>
    3c08:	94 2f       	mov	r25, r20
    3c0a:	4f 5f       	subi	r20, 0xFF	; 255
    3c0c:	4e 31       	cpi	r20, 0x1E	; 30
    3c0e:	a9 f7       	brne	.-22     	; 0x3bfa <add_key+0x72>
    3c10:	9f 3f       	cpi	r25, 0xFF	; 255
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <add_key+0x8e>
    3c14:	08 95       	ret
    3c16:	29 0f       	add	r18, r25
    3c18:	31 1d       	adc	r19, r1
    3c1a:	97 fd       	sbrc	r25, 7
    3c1c:	3a 95       	dec	r19
    3c1e:	f9 01       	movw	r30, r18
    3c20:	82 83       	std	Z+2, r24	; 0x02
    3c22:	08 95       	ret

00003c24 <del_key>:
    3c24:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    3c28:	99 23       	and	r25, r25
    3c2a:	79 f1       	breq	.+94     	; 0x3c8a <del_key+0x66>
    3c2c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    3c30:	99 23       	and	r25, r25
    3c32:	59 f1       	breq	.+86     	; 0x3c8a <del_key+0x66>
    3c34:	e8 2f       	mov	r30, r24
    3c36:	e6 95       	lsr	r30
    3c38:	e6 95       	lsr	r30
    3c3a:	e6 95       	lsr	r30
    3c3c:	ef 31       	cpi	r30, 0x1F	; 31
    3c3e:	a1 f0       	breq	.+40     	; 0x3c68 <del_key+0x44>
    3c40:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3c44:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c48:	e2 0f       	add	r30, r18
    3c4a:	f3 2f       	mov	r31, r19
    3c4c:	f1 1d       	adc	r31, r1
    3c4e:	28 2f       	mov	r18, r24
    3c50:	27 70       	andi	r18, 0x07	; 7
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	01 c0       	rjmp	.+2      	; 0x3c5a <del_key+0x36>
    3c58:	88 0f       	add	r24, r24
    3c5a:	2a 95       	dec	r18
    3c5c:	ea f7       	brpl	.-6      	; 0x3c58 <del_key+0x34>
    3c5e:	80 95       	com	r24
    3c60:	91 81       	ldd	r25, Z+1	; 0x01
    3c62:	89 23       	and	r24, r25
    3c64:	81 83       	std	Z+1, r24	; 0x01
    3c66:	08 95       	ret
    3c68:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    3c6c:	90 ff       	sbrs	r25, 0
    3c6e:	1e c0       	rjmp	.+60     	; 0x3cac <del_key+0x88>
    3c70:	1f 92       	push	r1
    3c72:	8f 93       	push	r24
    3c74:	85 ea       	ldi	r24, 0xA5	; 165
    3c76:	95 e0       	ldi	r25, 0x05	; 5
    3c78:	9f 93       	push	r25
    3c7a:	8f 93       	push	r24
    3c7c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    3c80:	0f 90       	pop	r0
    3c82:	0f 90       	pop	r0
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	08 95       	ret
    3c8a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3c8e:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c92:	f9 01       	movw	r30, r18
    3c94:	32 96       	adiw	r30, 0x02	; 2
    3c96:	20 5e       	subi	r18, 0xE0	; 224
    3c98:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9a:	91 91       	ld	r25, Z+
    3c9c:	89 13       	cpse	r24, r25
    3c9e:	03 c0       	rjmp	.+6      	; 0x3ca6 <del_key+0x82>
    3ca0:	df 01       	movw	r26, r30
    3ca2:	11 97       	sbiw	r26, 0x01	; 1
    3ca4:	1c 92       	st	X, r1
    3ca6:	e2 17       	cp	r30, r18
    3ca8:	f3 07       	cpc	r31, r19
    3caa:	b9 f7       	brne	.-18     	; 0x3c9a <del_key+0x76>
    3cac:	08 95       	ret

00003cae <clear_keys>:
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3cb6:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3cba:	e8 0f       	add	r30, r24
    3cbc:	f9 1f       	adc	r31, r25
    3cbe:	10 82       	st	Z, r1
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	80 32       	cpi	r24, 0x20	; 32
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	a9 f7       	brne	.-22     	; 0x3cb2 <clear_keys+0x4>
    3cc8:	08 95       	ret

00003cca <get_mods>:
    3cca:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3cce:	08 95       	ret

00003cd0 <add_mods>:
    3cd0:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <real_mods>
    3cd4:	89 2b       	or	r24, r25
    3cd6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3cda:	08 95       	ret

00003cdc <del_mods>:
    3cdc:	98 2f       	mov	r25, r24
    3cde:	90 95       	com	r25
    3ce0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3ce4:	89 23       	and	r24, r25
    3ce6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3cea:	08 95       	ret

00003cec <set_mods>:
    3cec:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3cf0:	08 95       	ret

00003cf2 <clear_mods>:
    3cf2:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <real_mods>
    3cf6:	08 95       	ret

00003cf8 <add_weak_mods>:
    3cf8:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <weak_mods>
    3cfc:	89 2b       	or	r24, r25
    3cfe:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <weak_mods>
    3d02:	08 95       	ret

00003d04 <del_weak_mods>:
    3d04:	98 2f       	mov	r25, r24
    3d06:	90 95       	com	r25
    3d08:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <weak_mods>
    3d0c:	89 23       	and	r24, r25
    3d0e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <weak_mods>
    3d12:	08 95       	ret

00003d14 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3d14:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <weak_mods>
    3d18:	08 95       	ret

00003d1a <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3d1a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3d1e:	08 95       	ret

00003d20 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3d20:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3d24:	08 95       	ret

00003d26 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d26:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3d2a:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3d2e:	f9 01       	movw	r30, r18
    3d30:	31 96       	adiw	r30, 0x01	; 1
    3d32:	20 5e       	subi	r18, 0xE0	; 224
    3d34:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    3d36:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    3d38:	91 91       	ld	r25, Z+
    3d3a:	91 11       	cpse	r25, r1
            cnt++;
    3d3c:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d3e:	e2 17       	cp	r30, r18
    3d40:	f3 07       	cpc	r31, r19
    3d42:	d1 f7       	brne	.-12     	; 0x3d38 <has_anykey+0x12>
    }
    return cnt;
}
    3d44:	08 95       	ret

00003d46 <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    3d46:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3d4a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3d4e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3d52:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3d54:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3d58:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3d5c:	80 81       	ld	r24, Z
    3d5e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <weak_mods>
    3d62:	89 2b       	or	r24, r25
    3d64:	80 83       	st	Z, r24
    if (oneshot_mods) {
    3d66:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <oneshot_mods>
    3d6a:	99 23       	and	r25, r25
    3d6c:	61 f0       	breq	.+24     	; 0x3d86 <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    3d6e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3d72:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3d76:	80 81       	ld	r24, Z
    3d78:	89 2b       	or	r24, r25
    3d7a:	80 83       	st	Z, r24
        if (has_anykey()) {
    3d7c:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <has_anykey>
    3d80:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    3d82:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    3d86:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    3d8a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    3d8e:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <host_keyboard_send>

00003d92 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3d92:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    3d96:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
}
    3d9a:	08 95       	ret

00003d9c <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3d9c:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	9c 01       	movw	r18, r24
    3da2:	22 0f       	add	r18, r18
    3da4:	33 1f       	adc	r19, r19
    3da6:	22 0f       	add	r18, r18
    3da8:	33 1f       	adc	r19, r19
    3daa:	2c 7c       	andi	r18, 0xCC	; 204
    3dac:	95 95       	asr	r25
    3dae:	87 95       	ror	r24
    3db0:	95 95       	asr	r25
    3db2:	87 95       	ror	r24
    3db4:	83 73       	andi	r24, 0x33	; 51
    3db6:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	c9 01       	movw	r24, r18
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	8a 7a       	andi	r24, 0xAA	; 170
    3dc2:	35 95       	asr	r19
    3dc4:	27 95       	ror	r18
    3dc6:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3dc8:	82 2b       	or	r24, r18
    3dca:	08 95       	ret

00003dcc <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	d9 2f       	mov	r29, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3dd2:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <bitrev>
    3dd6:	c8 2f       	mov	r28, r24
    3dd8:	8d 2f       	mov	r24, r29
    3dda:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <bitrev>
    return bits;
}
    3dde:	9c 2f       	mov	r25, r28
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	08 95       	ret

00003de6 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3de6:	08 95       	ret

00003de8 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3de8:	cf 93       	push	r28
    3dea:	df 93       	push	r29
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <hook_matrix_change+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <hook_matrix_change+0x8>
    3df0:	1f 92       	push	r1
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	08 95       	ret

00003e06 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3e06:	08 95       	ret

00003e08 <hook_layer_change>:
    3e08:	08 95       	ret

00003e0a <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3e0a:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <keyboard_set_leds>

00003e0e <hook_bootmagic>:
    3e0e:	08 95       	ret

00003e10 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3e10:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    3e14:	84 30       	cpi	r24, 0x04	; 4
    3e16:	21 f1       	breq	.+72     	; 0x3e60 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3e18:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3e1c:	88 e1       	ldi	r24, 0x18	; 24
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	20 e4       	ldi	r18, 0x40	; 64
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	a8 95       	wdr
    3e28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3e32:	83 b7       	in	r24, 0x33	; 51
    3e34:	81 7f       	andi	r24, 0xF1	; 241
    3e36:	84 60       	ori	r24, 0x04	; 4
    3e38:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3e3a:	83 b7       	in	r24, 0x33	; 51
    3e3c:	81 60       	ori	r24, 0x01	; 1
    3e3e:	83 bf       	out	0x33, r24	; 51
    sei();
    3e40:	78 94       	sei
    sleep_cpu();
    3e42:	88 95       	sleep
    sleep_disable();
    3e44:	83 b7       	in	r24, 0x33	; 51
    3e46:	8e 7f       	andi	r24, 0xFE	; 254
    3e48:	83 bf       	out	0x33, r24	; 51
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	a8 95       	wdr
    3e50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3e54:	88 61       	ori	r24, 0x18	; 24
    3e56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3e5a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3e5e:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3e60:	08 95       	ret

00003e62 <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3e62:	cf 93       	push	r28
    matrix_power_up();
    3e64:	0e 94 04 13 	call	0x2608	; 0x2608 <matrix_power_up>
    matrix_scan();
    3e68:	0e 94 1a 08 	call	0x1034	; 0x1034 <matrix_scan>
    matrix_power_down();
    3e6c:	0e 94 05 13 	call	0x260a	; 0x260a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e70:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3e72:	8c 2f       	mov	r24, r28
    3e74:	0e 94 79 09 	call	0x12f2	; 0x12f2 <matrix_get_row>
    3e78:	89 2b       	or	r24, r25
    3e7a:	31 f4       	brne	.+12     	; 0x3e88 <suspend_wakeup_condition+0x26>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e7c:	cf 5f       	subi	r28, 0xFF	; 255
    3e7e:	c5 30       	cpi	r28, 0x05	; 5
    3e80:	c1 f7       	brne	.-16     	; 0x3e72 <suspend_wakeup_condition+0x10>
    }
    return false;
    3e82:	80 e0       	ldi	r24, 0x00	; 0
}
    3e84:	cf 91       	pop	r28
    3e86:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	fc cf       	rjmp	.-8      	; 0x3e84 <suspend_wakeup_condition+0x22>

00003e8c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3e8c:	0e 94 ce 12 	call	0x259c	; 0x259c <matrix_clear>
    clear_keyboard();
    3e90:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <clear_keyboard>

00003e94 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3e94:	1f 92       	push	r1
    3e96:	0f 92       	push	r0
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	0f 92       	push	r0
    3e9c:	11 24       	eor	r1, r1
    3e9e:	8f 93       	push	r24
    3ea0:	9f 93       	push	r25
    3ea2:	af 93       	push	r26
    3ea4:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3ea6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <wdt_timeout>
    3eaa:	81 11       	cpse	r24, r1
    3eac:	13 c0       	rjmp	.+38     	; 0x3ed4 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3eae:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3eb2:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3eb6:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3eba:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3ebe:	41 96       	adiw	r24, 0x11	; 17
    3ec0:	a1 1d       	adc	r26, r1
    3ec2:	b1 1d       	adc	r27, r1
    3ec4:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer_count>
    3ec8:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer_count+0x1>
    3ecc:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer_count+0x2>
    3ed0:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3ed4:	bf 91       	pop	r27
    3ed6:	af 91       	pop	r26
    3ed8:	9f 91       	pop	r25
    3eda:	8f 91       	pop	r24
    3edc:	0f 90       	pop	r0
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	0f 90       	pop	r0
    3ee2:	1f 90       	pop	r1
    3ee4:	18 95       	reti

00003ee6 <timer_init>:
    uint8_t sreg = SREG;
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
    3ee6:	82 e0       	ldi	r24, 0x02	; 2
    3ee8:	84 bd       	out	0x24, r24	; 36
    3eea:	93 e0       	ldi	r25, 0x03	; 3
    3eec:	95 bd       	out	0x25, r25	; 37
    3eee:	9a ef       	ldi	r25, 0xFA	; 250
    3ef0:	97 bd       	out	0x27, r25	; 39
    3ef2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3ef6:	08 95       	ret

00003ef8 <timer_read>:
    3ef8:	2f b7       	in	r18, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3f00:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3f04:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3f08:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3f0c:	2f bf       	out	0x3f, r18	; 63
    3f0e:	08 95       	ret

00003f10 <timer_read32>:
    3f10:	2f b7       	in	r18, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <timer_count>
    3f18:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <timer_count+0x1>
    3f1c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timer_count+0x2>
    3f20:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timer_count+0x3>
    3f24:	2f bf       	out	0x3f, r18	; 63
    3f26:	08 95       	ret

00003f28 <timer_elapsed>:
    3f28:	cf 92       	push	r12
    3f2a:	df 92       	push	r13
    3f2c:	ef 92       	push	r14
    3f2e:	ff 92       	push	r15
    3f30:	0f 93       	push	r16
    3f32:	1f 93       	push	r17
    3f34:	2f b7       	in	r18, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <timer_count>
    3f3c:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <timer_count+0x1>
    3f40:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <timer_count+0x2>
    3f44:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <timer_count+0x3>
    3f48:	2f bf       	out	0x3f, r18	; 63
    3f4a:	6a 01       	movw	r12, r20
    3f4c:	7b 01       	movw	r14, r22
    3f4e:	ee 24       	eor	r14, r14
    3f50:	ff 24       	eor	r15, r15
    3f52:	8c 01       	movw	r16, r24
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	c0 16       	cp	r12, r16
    3f5a:	d1 06       	cpc	r13, r17
    3f5c:	e2 06       	cpc	r14, r18
    3f5e:	f3 06       	cpc	r15, r19
    3f60:	50 f0       	brcs	.+20     	; 0x3f76 <timer_elapsed+0x4e>
    3f62:	48 1b       	sub	r20, r24
    3f64:	59 0b       	sbc	r21, r25
    3f66:	ca 01       	movw	r24, r20
    3f68:	1f 91       	pop	r17
    3f6a:	0f 91       	pop	r16
    3f6c:	ff 90       	pop	r15
    3f6e:	ef 90       	pop	r14
    3f70:	df 90       	pop	r13
    3f72:	cf 90       	pop	r12
    3f74:	08 95       	ret
    3f76:	41 50       	subi	r20, 0x01	; 1
    3f78:	51 09       	sbc	r21, r1
    3f7a:	f3 cf       	rjmp	.-26     	; 0x3f62 <timer_elapsed+0x3a>

00003f7c <__vector_21>:
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3f7c:	1f 92       	push	r1
    3f7e:	0f 92       	push	r0
    3f80:	0f b6       	in	r0, 0x3f	; 63
    3f82:	0f 92       	push	r0
    3f84:	11 24       	eor	r1, r1
    3f86:	8f 93       	push	r24
    3f88:	9f 93       	push	r25
    3f8a:	af 93       	push	r26
    3f8c:	bf 93       	push	r27
    timer_count++;
    3f8e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3f92:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3f96:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3f9a:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	a1 1d       	adc	r26, r1
    3fa2:	b1 1d       	adc	r27, r1
    3fa4:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer_count>
    3fa8:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer_count+0x1>
    3fac:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer_count+0x2>
    3fb0:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer_count+0x3>
}
    3fb4:	bf 91       	pop	r27
    3fb6:	af 91       	pop	r26
    3fb8:	9f 91       	pop	r25
    3fba:	8f 91       	pop	r24
    3fbc:	0f 90       	pop	r0
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

00003fc6 <bootloader_jump>:
    USB_Disable();
    3fc6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <USB_Disable>
    cli();
    3fca:	f8 94       	cli
    3fcc:	2f ef       	ldi	r18, 0xFF	; 255
    3fce:	87 ea       	ldi	r24, 0xA7	; 167
    3fd0:	91 e6       	ldi	r25, 0x61	; 97
    3fd2:	21 50       	subi	r18, 0x01	; 1
    3fd4:	80 40       	sbci	r24, 0x00	; 0
    3fd6:	90 40       	sbci	r25, 0x00	; 0
    3fd8:	e1 f7       	brne	.-8      	; 0x3fd2 <bootloader_jump+0xc>
    3fda:	00 c0       	rjmp	.+0      	; 0x3fdc <bootloader_jump+0x16>
    3fdc:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    3fde:	87 e0       	ldi	r24, 0x07	; 7
    3fe0:	90 eb       	ldi	r25, 0xB0	; 176
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__bss_end>
    3fe8:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__bss_end+0x1>
    3fec:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <__bss_end+0x2>
    3ff0:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <__bss_end+0x3>
		__asm__ __volatile__ (
    3ff4:	88 e1       	ldi	r24, 0x18	; 24
    3ff6:	9c e0       	ldi	r25, 0x0C	; 12
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	a8 95       	wdr
    3ffe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4008:	ff cf       	rjmp	.-2      	; 0x4008 <bootloader_jump+0x42>

0000400a <keycode_to_action>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    400a:	8d 3b       	cpi	r24, 0xBD	; 189
    400c:	60 f4       	brcc	.+24     	; 0x4026 <keycode_to_action+0x1c>
    400e:	88 3a       	cpi	r24, 0xA8	; 168
    4010:	80 f5       	brcc	.+96     	; 0x4072 <keycode_to_action+0x68>
    4012:	85 3a       	cpi	r24, 0xA5	; 165
    4014:	18 f5       	brcc	.+70     	; 0x405c <keycode_to_action+0x52>
    4016:	84 30       	cpi	r24, 0x04	; 4
    4018:	f8 f4       	brcc	.+62     	; 0x4058 <keycode_to_action+0x4e>
    401a:	81 30       	cpi	r24, 0x01	; 1
    401c:	09 f4       	brne	.+2      	; 0x4020 <keycode_to_action+0x16>
    401e:	81 c0       	rjmp	.+258    	; 0x4122 <keycode_to_action+0x118>
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	08 95       	ret
    4026:	88 3e       	cpi	r24, 0xE8	; 232
    4028:	90 f4       	brcc	.+36     	; 0x404e <keycode_to_action+0x44>
    402a:	80 3e       	cpi	r24, 0xE0	; 224
    402c:	a8 f4       	brcc	.+42     	; 0x4058 <keycode_to_action+0x4e>
    402e:	8f 3b       	cpi	r24, 0xBF	; 191
    4030:	b9 f7       	brne	.-18     	; 0x4020 <keycode_to_action+0x16>
    4032:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_keyboard>
    4036:	2f ef       	ldi	r18, 0xFF	; 255
    4038:	80 e7       	ldi	r24, 0x70	; 112
    403a:	92 e0       	ldi	r25, 0x02	; 2
    403c:	21 50       	subi	r18, 0x01	; 1
    403e:	80 40       	sbci	r24, 0x00	; 0
    4040:	90 40       	sbci	r25, 0x00	; 0
    4042:	e1 f7       	brne	.-8      	; 0x403c <keycode_to_action+0x32>
    4044:	00 c0       	rjmp	.+0      	; 0x4046 <keycode_to_action+0x3c>
    4046:	00 00       	nop
    4048:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <bootloader_jump>
    404c:	e9 cf       	rjmp	.-46     	; 0x4020 <keycode_to_action+0x16>
    404e:	80 3f       	cpi	r24, 0xF0	; 240
    4050:	38 f3       	brcs	.-50     	; 0x4020 <keycode_to_action+0x16>
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	90 65       	ori	r25, 0x50	; 80
    4056:	08 95       	ret
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	08 95       	ret
    405c:	31 e8       	ldi	r19, 0x81	; 129
    405e:	85 3a       	cpi	r24, 0xA5	; 165
    4060:	21 f0       	breq	.+8      	; 0x406a <keycode_to_action+0x60>
    4062:	33 e8       	ldi	r19, 0x83	; 131
    4064:	86 3a       	cpi	r24, 0xA6	; 166
    4066:	09 f4       	brne	.+2      	; 0x406a <keycode_to_action+0x60>
    4068:	32 e8       	ldi	r19, 0x82	; 130
    406a:	20 e4       	ldi	r18, 0x40	; 64
    406c:	83 2f       	mov	r24, r19
    406e:	92 2f       	mov	r25, r18
    4070:	08 95       	ret
    4072:	88 3a       	cpi	r24, 0xA8	; 168
    4074:	59 f1       	breq	.+86     	; 0x40cc <keycode_to_action+0xc2>
    4076:	89 3a       	cpi	r24, 0xA9	; 169
    4078:	61 f1       	breq	.+88     	; 0x40d2 <keycode_to_action+0xc8>
    407a:	8a 3a       	cpi	r24, 0xAA	; 170
    407c:	61 f1       	breq	.+88     	; 0x40d6 <keycode_to_action+0xcc>
    407e:	8b 3a       	cpi	r24, 0xAB	; 171
    4080:	61 f1       	breq	.+88     	; 0x40da <keycode_to_action+0xd0>
    4082:	8c 3a       	cpi	r24, 0xAC	; 172
    4084:	61 f1       	breq	.+88     	; 0x40de <keycode_to_action+0xd4>
    4086:	8d 3a       	cpi	r24, 0xAD	; 173
    4088:	61 f1       	breq	.+88     	; 0x40e2 <keycode_to_action+0xd8>
    408a:	8e 3a       	cpi	r24, 0xAE	; 174
    408c:	61 f1       	breq	.+88     	; 0x40e6 <keycode_to_action+0xdc>
    408e:	8f 3a       	cpi	r24, 0xAF	; 175
    4090:	61 f1       	breq	.+88     	; 0x40ea <keycode_to_action+0xe0>
    4092:	81 3b       	cpi	r24, 0xB1	; 177
    4094:	61 f1       	breq	.+88     	; 0x40ee <keycode_to_action+0xe4>
    4096:	80 3b       	cpi	r24, 0xB0	; 176
    4098:	61 f1       	breq	.+88     	; 0x40f2 <keycode_to_action+0xe8>
    409a:	82 3b       	cpi	r24, 0xB2	; 178
    409c:	61 f1       	breq	.+88     	; 0x40f6 <keycode_to_action+0xec>
    409e:	83 3b       	cpi	r24, 0xB3	; 179
    40a0:	69 f1       	breq	.+90     	; 0x40fc <keycode_to_action+0xf2>
    40a2:	84 3b       	cpi	r24, 0xB4	; 180
    40a4:	69 f1       	breq	.+90     	; 0x4100 <keycode_to_action+0xf6>
    40a6:	85 3b       	cpi	r24, 0xB5	; 181
    40a8:	69 f1       	breq	.+90     	; 0x4104 <keycode_to_action+0xfa>
    40aa:	86 3b       	cpi	r24, 0xB6	; 182
    40ac:	69 f1       	breq	.+90     	; 0x4108 <keycode_to_action+0xfe>
    40ae:	87 3b       	cpi	r24, 0xB7	; 183
    40b0:	71 f1       	breq	.+92     	; 0x410e <keycode_to_action+0x104>
    40b2:	88 3b       	cpi	r24, 0xB8	; 184
    40b4:	71 f1       	breq	.+92     	; 0x4112 <keycode_to_action+0x108>
    40b6:	89 3b       	cpi	r24, 0xB9	; 185
    40b8:	71 f1       	breq	.+92     	; 0x4116 <keycode_to_action+0x10c>
    40ba:	8a 3b       	cpi	r24, 0xBA	; 186
    40bc:	71 f1       	breq	.+92     	; 0x411a <keycode_to_action+0x110>
    40be:	8b 3b       	cpi	r24, 0xBB	; 187
    40c0:	71 f1       	breq	.+92     	; 0x411e <keycode_to_action+0x114>
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	8c 3b       	cpi	r24, 0xBC	; 188
    40c6:	19 f4       	brne	.+6      	; 0x40ce <keycode_to_action+0xc4>
    40c8:	3a e2       	ldi	r19, 0x2A	; 42
    40ca:	1f c0       	rjmp	.+62     	; 0x410a <keycode_to_action+0x100>
    40cc:	32 ee       	ldi	r19, 0xE2	; 226
    40ce:	24 e4       	ldi	r18, 0x44	; 68
    40d0:	cd cf       	rjmp	.-102    	; 0x406c <keycode_to_action+0x62>
    40d2:	39 ee       	ldi	r19, 0xE9	; 233
    40d4:	fc cf       	rjmp	.-8      	; 0x40ce <keycode_to_action+0xc4>
    40d6:	3a ee       	ldi	r19, 0xEA	; 234
    40d8:	fa cf       	rjmp	.-12     	; 0x40ce <keycode_to_action+0xc4>
    40da:	35 eb       	ldi	r19, 0xB5	; 181
    40dc:	f8 cf       	rjmp	.-16     	; 0x40ce <keycode_to_action+0xc4>
    40de:	36 eb       	ldi	r19, 0xB6	; 182
    40e0:	f6 cf       	rjmp	.-20     	; 0x40ce <keycode_to_action+0xc4>
    40e2:	33 eb       	ldi	r19, 0xB3	; 179
    40e4:	f4 cf       	rjmp	.-24     	; 0x40ce <keycode_to_action+0xc4>
    40e6:	34 eb       	ldi	r19, 0xB4	; 180
    40e8:	f2 cf       	rjmp	.-28     	; 0x40ce <keycode_to_action+0xc4>
    40ea:	37 eb       	ldi	r19, 0xB7	; 183
    40ec:	f0 cf       	rjmp	.-32     	; 0x40ce <keycode_to_action+0xc4>
    40ee:	3c ec       	ldi	r19, 0xCC	; 204
    40f0:	ee cf       	rjmp	.-36     	; 0x40ce <keycode_to_action+0xc4>
    40f2:	3d ec       	ldi	r19, 0xCD	; 205
    40f4:	ec cf       	rjmp	.-40     	; 0x40ce <keycode_to_action+0xc4>
    40f6:	33 e8       	ldi	r19, 0x83	; 131
    40f8:	25 e4       	ldi	r18, 0x45	; 69
    40fa:	b8 cf       	rjmp	.-144    	; 0x406c <keycode_to_action+0x62>
    40fc:	3a e8       	ldi	r19, 0x8A	; 138
    40fe:	fc cf       	rjmp	.-8      	; 0x40f8 <keycode_to_action+0xee>
    4100:	32 e9       	ldi	r19, 0x92	; 146
    4102:	fa cf       	rjmp	.-12     	; 0x40f8 <keycode_to_action+0xee>
    4104:	34 e9       	ldi	r19, 0x94	; 148
    4106:	f8 cf       	rjmp	.-16     	; 0x40f8 <keycode_to_action+0xee>
    4108:	31 e2       	ldi	r19, 0x21	; 33
    410a:	26 e4       	ldi	r18, 0x46	; 70
    410c:	af cf       	rjmp	.-162    	; 0x406c <keycode_to_action+0x62>
    410e:	33 e2       	ldi	r19, 0x23	; 35
    4110:	fc cf       	rjmp	.-8      	; 0x410a <keycode_to_action+0x100>
    4112:	34 e2       	ldi	r19, 0x24	; 36
    4114:	fa cf       	rjmp	.-12     	; 0x410a <keycode_to_action+0x100>
    4116:	35 e2       	ldi	r19, 0x25	; 37
    4118:	f8 cf       	rjmp	.-16     	; 0x410a <keycode_to_action+0x100>
    411a:	36 e2       	ldi	r19, 0x26	; 38
    411c:	f6 cf       	rjmp	.-20     	; 0x410a <keycode_to_action+0x100>
    411e:	37 e2       	ldi	r19, 0x27	; 39
    4120:	f4 cf       	rjmp	.-24     	; 0x410a <keycode_to_action+0x100>
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	08 95       	ret

00004128 <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    4128:	08 95       	ret

0000412a <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    412a:	e6 2f       	mov	r30, r22
    412c:	f0 e0       	ldi	r31, 0x00	; 0
    412e:	9f e0       	ldi	r25, 0x0F	; 15
    4130:	79 9f       	mul	r23, r25
    4132:	e0 0d       	add	r30, r0
    4134:	f1 1d       	adc	r31, r1
    4136:	11 24       	eor	r1, r1
    4138:	9b e4       	ldi	r25, 0x4B	; 75
    413a:	89 9f       	mul	r24, r25
    413c:	e0 0d       	add	r30, r0
    413e:	f1 1d       	adc	r31, r1
    4140:	11 24       	eor	r1, r1
    4142:	ec 50       	subi	r30, 0x0C	; 12
    4144:	fe 4f       	sbci	r31, 0xFE	; 254
    4146:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    4148:	08 95       	ret

0000414a <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    414a:	28 2f       	mov	r18, r24
    414c:	20 5c       	subi	r18, 0xC0	; 192
    414e:	33 0b       	sbc	r19, r19
    4150:	f9 01       	movw	r30, r18
    4152:	ee 0f       	add	r30, r30
    4154:	ff 1f       	adc	r31, r31
    4156:	ec 53       	subi	r30, 0x3C	; 60
    4158:	fe 4f       	sbci	r31, 0xFE	; 254
    415a:	85 91       	lpm	r24, Z+
    415c:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    415e:	08 95       	ret

00004160 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    4160:	0e 94 95 20 	call	0x412a	; 0x412a <keymap_key_to_keycode>
    switch (keycode) {
    4164:	80 3e       	cpi	r24, 0xE0	; 224
    4166:	d0 f4       	brcc	.+52     	; 0x419c <action_for_key+0x3c>
    4168:	80 3c       	cpi	r24, 0xC0	; 192
    416a:	88 f5       	brcc	.+98     	; 0x41ce <action_for_key+0x6e>
    416c:	81 33       	cpi	r24, 0x31	; 49
    416e:	09 f4       	brne	.+2      	; 0x4172 <action_for_key+0x12>
    4170:	52 c0       	rjmp	.+164    	; 0x4216 <action_for_key+0xb6>
    4172:	40 f4       	brcc	.+16     	; 0x4184 <action_for_key+0x24>
    4174:	89 32       	cpi	r24, 0x29	; 41
    4176:	09 f4       	brne	.+2      	; 0x417a <action_for_key+0x1a>
    4178:	48 c0       	rjmp	.+144    	; 0x420a <action_for_key+0xaa>
    417a:	8a 32       	cpi	r24, 0x2A	; 42
    417c:	09 f4       	brne	.+2      	; 0x4180 <action_for_key+0x20>
    417e:	51 c0       	rjmp	.+162    	; 0x4222 <action_for_key+0xc2>
            return keycode_to_action(keycode);
    4180:	0c 94 05 20 	jmp	0x400a	; 0x400a <keycode_to_action>
    switch (keycode) {
    4184:	89 33       	cpi	r24, 0x39	; 57
    4186:	29 f1       	breq	.+74     	; 0x41d2 <action_for_key+0x72>
    4188:	82 38       	cpi	r24, 0x82	; 130
    418a:	19 f1       	breq	.+70     	; 0x41d2 <action_for_key+0x72>
    418c:	85 33       	cpi	r24, 0x35	; 53
    418e:	c1 f7       	brne	.-16     	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    4190:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    4194:	85 ff       	sbrs	r24, 5
    4196:	3d c0       	rjmp	.+122    	; 0x4212 <action_for_key+0xb2>
                return keycode_to_action(KC_ESC);
    4198:	89 e2       	ldi	r24, 0x29	; 41
    419a:	f2 cf       	rjmp	.-28     	; 0x4180 <action_for_key+0x20>
    switch (keycode) {
    419c:	83 3e       	cpi	r24, 0xE3	; 227
    419e:	39 f1       	breq	.+78     	; 0x41ee <action_for_key+0x8e>
    41a0:	60 f4       	brcc	.+24     	; 0x41ba <action_for_key+0x5a>
    41a2:	80 3e       	cpi	r24, 0xE0	; 224
    41a4:	e1 f0       	breq	.+56     	; 0x41de <action_for_key+0x7e>
    41a6:	82 3e       	cpi	r24, 0xE2	; 226
    41a8:	59 f7       	brne	.-42     	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    41aa:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    41ae:	82 ff       	sbrs	r24, 2
    41b0:	22 c0       	rjmp	.+68     	; 0x41f6 <action_for_key+0x96>
                if (keymap_config.no_gui) {
    41b2:	84 ff       	sbrs	r24, 4
    41b4:	1a c0       	rjmp	.+52     	; 0x41ea <action_for_key+0x8a>
                    return keycode_to_action(KC_NO);
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	e3 cf       	rjmp	.-58     	; 0x4180 <action_for_key+0x20>
    switch (keycode) {
    41ba:	86 3e       	cpi	r24, 0xE6	; 230
    41bc:	f1 f0       	breq	.+60     	; 0x41fa <action_for_key+0x9a>
    41be:	87 3e       	cpi	r24, 0xE7	; 231
    41c0:	f9 f6       	brne	.-66     	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    41c2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    41c6:	83 ff       	sbrs	r24, 3
    41c8:	1c c0       	rjmp	.+56     	; 0x4202 <action_for_key+0xa2>
            return keycode_to_action(KC_RALT);
    41ca:	86 ee       	ldi	r24, 0xE6	; 230
    41cc:	d9 cf       	rjmp	.-78     	; 0x4180 <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    41ce:	0c 94 a5 20 	jmp	0x414a	; 0x414a <keymap_fn_to_action>
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    41d2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    41d6:	93 70       	andi	r25, 0x03	; 3
    41d8:	99 f2       	breq	.-90     	; 0x4180 <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    41da:	80 ee       	ldi	r24, 0xE0	; 224
    41dc:	d1 cf       	rjmp	.-94     	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    41de:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    41e2:	80 ff       	sbrs	r24, 0
    41e4:	fa cf       	rjmp	.-12     	; 0x41da <action_for_key+0x7a>
                return keycode_to_action(KC_CAPSLOCK);
    41e6:	89 e3       	ldi	r24, 0x39	; 57
    41e8:	cb cf       	rjmp	.-106    	; 0x4180 <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    41ea:	83 ee       	ldi	r24, 0xE3	; 227
    41ec:	c9 cf       	rjmp	.-110    	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    41ee:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    41f2:	82 ff       	sbrs	r24, 2
    41f4:	de cf       	rjmp	.-68     	; 0x41b2 <action_for_key+0x52>
            return keycode_to_action(KC_LALT);
    41f6:	82 ee       	ldi	r24, 0xE2	; 226
    41f8:	c3 cf       	rjmp	.-122    	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    41fa:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    41fe:	83 ff       	sbrs	r24, 3
    4200:	e4 cf       	rjmp	.-56     	; 0x41ca <action_for_key+0x6a>
            if (keymap_config.no_gui) {
    4202:	84 fd       	sbrc	r24, 4
    4204:	d8 cf       	rjmp	.-80     	; 0x41b6 <action_for_key+0x56>
                return keycode_to_action(KC_RGUI);
    4206:	87 ee       	ldi	r24, 0xE7	; 231
    4208:	bb cf       	rjmp	.-138    	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    420a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    420e:	85 ff       	sbrs	r24, 5
    4210:	c3 cf       	rjmp	.-122    	; 0x4198 <action_for_key+0x38>
            return keycode_to_action(KC_GRAVE);
    4212:	85 e3       	ldi	r24, 0x35	; 53
    4214:	b5 cf       	rjmp	.-150    	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    4216:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    421a:	86 ff       	sbrs	r24, 6
    421c:	06 c0       	rjmp	.+12     	; 0x422a <action_for_key+0xca>
                return keycode_to_action(KC_BSPACE);
    421e:	8a e2       	ldi	r24, 0x2A	; 42
    4220:	af cf       	rjmp	.-162    	; 0x4180 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    4222:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    4226:	86 ff       	sbrs	r24, 6
    4228:	fa cf       	rjmp	.-12     	; 0x421e <action_for_key+0xbe>
            return keycode_to_action(KC_BSLASH);
    422a:	81 e3       	ldi	r24, 0x31	; 49
    422c:	a9 cf       	rjmp	.-174    	; 0x4180 <action_for_key+0x20>

0000422e <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    422e:	af 92       	push	r10
    4230:	bf 92       	push	r11
    4232:	cf 92       	push	r12
    4234:	df 92       	push	r13
    4236:	ef 92       	push	r14
    4238:	ff 92       	push	r15
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4242:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4244:	cc 24       	eor	r12, r12
    4246:	c3 94       	inc	r12
    4248:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    424a:	8c 2f       	mov	r24, r28
    424c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <matrix_get_row>
    4250:	5c 01       	movw	r10, r24
    4252:	10 e0       	ldi	r17, 0x00	; 0
    4254:	00 e0       	ldi	r16, 0x00	; 0
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4256:	c6 01       	movw	r24, r12
    4258:	00 2e       	mov	r0, r16
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <scan_key+0x32>
    425c:	88 0f       	add	r24, r24
    425e:	99 1f       	adc	r25, r25
    4260:	0a 94       	dec	r0
    4262:	e2 f7       	brpl	.-8      	; 0x425c <scan_key+0x2e>
    4264:	8a 21       	and	r24, r10
    4266:	9b 21       	and	r25, r11
    4268:	89 2b       	or	r24, r25
    426a:	e9 f0       	breq	.+58     	; 0x42a6 <scan_key+0x78>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    426c:	60 2f       	mov	r22, r16
    426e:	7c 2f       	mov	r23, r28
    4270:	80 e0       	ldi	r24, 0x00	; 0
    4272:	0e 94 b0 20 	call	0x4160	; 0x4160 <action_for_key>
                if (action.code == code ||
    4276:	8e 15       	cp	r24, r14
    4278:	9f 05       	cpc	r25, r15
    427a:	51 f0       	breq	.+20     	; 0x4290 <scan_key+0x62>
    427c:	29 2f       	mov	r18, r25
    427e:	20 7e       	andi	r18, 0xE0	; 224
    4280:	39 2f       	mov	r19, r25
    4282:	30 7c       	andi	r19, 0xC0	; 192
    4284:	11 f0       	breq	.+4      	; 0x428a <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    4286:	20 3a       	cpi	r18, 0xA0	; 160
    4288:	71 f4       	brne	.+28     	; 0x42a6 <scan_key+0x78>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    428a:	8e 15       	cp	r24, r14
    428c:	1f 04       	cpc	r1, r15
    428e:	59 f4       	brne	.+22     	; 0x42a6 <scan_key+0x78>
                     action.key.code == code)) {
                    return true;
    4290:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	ff 90       	pop	r15
    429a:	ef 90       	pop	r14
    429c:	df 90       	pop	r13
    429e:	cf 90       	pop	r12
    42a0:	bf 90       	pop	r11
    42a2:	af 90       	pop	r10
    42a4:	08 95       	ret
    42a6:	0f 5f       	subi	r16, 0xFF	; 255
    42a8:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    42aa:	0f 30       	cpi	r16, 0x0F	; 15
    42ac:	11 05       	cpc	r17, r1
    42ae:	99 f6       	brne	.-90     	; 0x4256 <scan_key+0x28>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    42b0:	cf 5f       	subi	r28, 0xFF	; 255
    42b2:	c5 30       	cpi	r28, 0x05	; 5
    42b4:	51 f6       	brne	.-108    	; 0x424a <scan_key+0x1c>
    return false;
    42b6:	80 e0       	ldi	r24, 0x00	; 0
    42b8:	ec cf       	rjmp	.-40     	; 0x4292 <scan_key+0x64>

000042ba <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    42c0:	8c e2       	ldi	r24, 0x2C	; 44
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 17 21 	call	0x422e	; 0x422e <scan_key>
    42c8:	88 23       	and	r24, r24
    42ca:	29 f0       	breq	.+10     	; 0x42d6 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    42cc:	ce 01       	movw	r24, r28
}
    42ce:	df 91       	pop	r29
    42d0:	cf 91       	pop	r28
    return scan_key(code);
    42d2:	0c 94 17 21 	jmp	0x422e	; 0x422e <scan_key>
}
    42d6:	80 e0       	ldi	r24, 0x00	; 0
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

000042de <bootmagic>:
{
    42de:	cf 93       	push	r28
    if (!eeconfig_is_enabled()) {
    42e0:	0e 94 b8 22 	call	0x4570	; 0x4570 <eeconfig_is_enabled>
    42e4:	81 11       	cpse	r24, r1
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <bootmagic+0xe>
        eeconfig_init();
    42e8:	0e 94 9e 22 	call	0x453c	; 0x453c <eeconfig_init>
    print("bootmagic scan: ... ");
    42ec:	88 ee       	ldi	r24, 0xE8	; 232
    42ee:	95 e0       	ldi	r25, 0x05	; 5
    42f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    42f4:	c5 e6       	ldi	r28, 0x65	; 101
    42f6:	c1 50       	subi	r28, 0x01	; 1
    42f8:	09 f0       	breq	.+2      	; 0x42fc <bootmagic+0x1e>
    42fa:	f0 c0       	rjmp	.+480    	; 0x44dc <bootmagic+0x1fe>
    print("done.\n");
    42fc:	81 ee       	ldi	r24, 0xE1	; 225
    42fe:	95 e0       	ldi	r25, 0x05	; 5
    4300:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    4304:	89 e2       	ldi	r24, 0x29	; 41
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    430c:	81 11       	cpse	r24, r1
    430e:	14 c1       	rjmp	.+552    	; 0x4538 <bootmagic+0x25a>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4310:	8a e2       	ldi	r24, 0x2A	; 42
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4318:	81 11       	cpse	r24, r1
        eeconfig_init();
    431a:	0e 94 9e 22 	call	0x453c	; 0x453c <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    431e:	85 e0       	ldi	r24, 0x05	; 5
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4326:	81 11       	cpse	r24, r1
        bootloader_jump();
    4328:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <bootloader_jump>
    hook_bootmagic();
    432c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    4330:	0e 94 c3 22 	call	0x4586	; 0x4586 <eeconfig_read_debug>
    4334:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4338:	87 e0       	ldi	r24, 0x07	; 7
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4340:	88 23       	and	r24, r24
    4342:	79 f0       	breq	.+30     	; 0x4362 <bootmagic+0x84>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4344:	8b e1       	ldi	r24, 0x1B	; 27
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    434c:	88 23       	and	r24, r24
    434e:	09 f4       	brne	.+2      	; 0x4352 <bootmagic+0x74>
    4350:	ce c0       	rjmp	.+412    	; 0x44ee <bootmagic+0x210>
            debug_config.matrix = !debug_config.matrix;
    4352:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    4356:	89 2f       	mov	r24, r25
    4358:	8d 7f       	andi	r24, 0xFD	; 253
    435a:	91 ff       	sbrs	r25, 1
    435c:	82 60       	ori	r24, 0x02	; 2
            debug_config.enable = !debug_config.enable;
    435e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    eeconfig_write_debug(debug_config.raw);
    4362:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    4366:	0e 94 c7 22 	call	0x458e	; 0x458e <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    436a:	0e 94 d5 22 	call	0x45aa	; 0x45aa <eeconfig_read_keymap>
    436e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4372:	80 ee       	ldi	r24, 0xE0	; 224
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    437a:	88 23       	and	r24, r24
    437c:	41 f0       	breq	.+16     	; 0x438e <bootmagic+0xb0>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    437e:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    4382:	89 2f       	mov	r24, r25
    4384:	8e 7f       	andi	r24, 0xFE	; 254
    4386:	90 ff       	sbrs	r25, 0
    4388:	81 60       	ori	r24, 0x01	; 1
    438a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    438e:	89 e3       	ldi	r24, 0x39	; 57
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4396:	88 23       	and	r24, r24
    4398:	41 f0       	breq	.+16     	; 0x43aa <bootmagic+0xcc>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    439a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    439e:	89 2f       	mov	r24, r25
    43a0:	8d 7f       	andi	r24, 0xFD	; 253
    43a2:	91 ff       	sbrs	r25, 1
    43a4:	82 60       	ori	r24, 0x02	; 2
    43a6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    43aa:	82 ee       	ldi	r24, 0xE2	; 226
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    43b2:	88 23       	and	r24, r24
    43b4:	41 f0       	breq	.+16     	; 0x43c6 <bootmagic+0xe8>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    43b6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    43ba:	89 2f       	mov	r24, r25
    43bc:	8b 7f       	andi	r24, 0xFB	; 251
    43be:	92 ff       	sbrs	r25, 2
    43c0:	84 60       	ori	r24, 0x04	; 4
    43c2:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    43c6:	86 ee       	ldi	r24, 0xE6	; 230
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    43ce:	88 23       	and	r24, r24
    43d0:	41 f0       	breq	.+16     	; 0x43e2 <bootmagic+0x104>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    43d2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    43d6:	89 2f       	mov	r24, r25
    43d8:	87 7f       	andi	r24, 0xF7	; 247
    43da:	93 ff       	sbrs	r25, 3
    43dc:	88 60       	ori	r24, 0x08	; 8
    43de:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    43e2:	83 ee       	ldi	r24, 0xE3	; 227
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    43ea:	88 23       	and	r24, r24
    43ec:	41 f0       	breq	.+16     	; 0x43fe <bootmagic+0x120>
        keymap_config.no_gui = !keymap_config.no_gui;
    43ee:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    43f2:	89 2f       	mov	r24, r25
    43f4:	8f 7e       	andi	r24, 0xEF	; 239
    43f6:	94 ff       	sbrs	r25, 4
    43f8:	80 61       	ori	r24, 0x10	; 16
    43fa:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    43fe:	85 e3       	ldi	r24, 0x35	; 53
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4406:	88 23       	and	r24, r24
    4408:	41 f0       	breq	.+16     	; 0x441a <bootmagic+0x13c>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    440a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    440e:	89 2f       	mov	r24, r25
    4410:	8f 7d       	andi	r24, 0xDF	; 223
    4412:	95 ff       	sbrs	r25, 5
    4414:	80 62       	ori	r24, 0x20	; 32
    4416:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    441a:	81 e3       	ldi	r24, 0x31	; 49
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4422:	88 23       	and	r24, r24
    4424:	41 f0       	breq	.+16     	; 0x4436 <bootmagic+0x158>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4426:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    442a:	89 2f       	mov	r24, r25
    442c:	8f 7b       	andi	r24, 0xBF	; 191
    442e:	96 ff       	sbrs	r25, 6
    4430:	80 64       	ori	r24, 0x40	; 64
    4432:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4436:	81 e1       	ldi	r24, 0x11	; 17
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    443e:	88 23       	and	r24, r24
    4440:	41 f0       	breq	.+16     	; 0x4452 <bootmagic+0x174>
        keymap_config.nkro = !keymap_config.nkro;
    4442:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    4446:	89 2f       	mov	r24, r25
    4448:	97 fb       	bst	r25, 7
    444a:	87 f9       	bld	r24, 7
    444c:	80 58       	subi	r24, 0x80	; 128
    444e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    4452:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    4456:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
    445a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    445e:	87 fb       	bst	r24, 7
    4460:	88 27       	eor	r24, r24
    4462:	80 f9       	bld	r24, 0
    4464:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4468:	87 e2       	ldi	r24, 0x27	; 39
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4470:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4472:	8e e1       	ldi	r24, 0x1E	; 30
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    447a:	81 11       	cpse	r24, r1
    447c:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    447e:	8f e1       	ldi	r24, 0x1F	; 31
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4486:	81 11       	cpse	r24, r1
    4488:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    448a:	80 e2       	ldi	r24, 0x20	; 32
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4492:	81 11       	cpse	r24, r1
    4494:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4496:	81 e2       	ldi	r24, 0x21	; 33
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    449e:	81 11       	cpse	r24, r1
    44a0:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    44a2:	82 e2       	ldi	r24, 0x22	; 34
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    44aa:	81 11       	cpse	r24, r1
    44ac:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    44ae:	83 e2       	ldi	r24, 0x23	; 35
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    44b6:	81 11       	cpse	r24, r1
    44b8:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    44ba:	84 e2       	ldi	r24, 0x24	; 36
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    44c2:	88 23       	and	r24, r24
    44c4:	99 f1       	breq	.+102    	; 0x452c <bootmagic+0x24e>
    44c6:	c0 68       	ori	r28, 0x80	; 128
        eeconfig_write_default_layer(default_layer);
    44c8:	8c 2f       	mov	r24, r28
    44ca:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    44ce:	6c 2f       	mov	r22, r28
        default_layer_set((uint32_t)default_layer);
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	80 e0       	ldi	r24, 0x00	; 0
}
    44d6:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    44d8:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    44dc:	0e 94 1a 08 	call	0x1034	; 0x1034 <matrix_scan>
    44e0:	8f e3       	ldi	r24, 0x3F	; 63
    44e2:	9c e9       	ldi	r25, 0x9C	; 156
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <bootmagic+0x206>
    44e8:	00 c0       	rjmp	.+0      	; 0x44ea <bootmagic+0x20c>
    44ea:	00 00       	nop
    44ec:	04 cf       	rjmp	.-504    	; 0x42f6 <bootmagic+0x18>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    44ee:	8e e0       	ldi	r24, 0x0E	; 14
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    44f6:	88 23       	and	r24, r24
    44f8:	39 f0       	breq	.+14     	; 0x4508 <bootmagic+0x22a>
            debug_config.keyboard = !debug_config.keyboard;
    44fa:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    44fe:	89 2f       	mov	r24, r25
    4500:	8b 7f       	andi	r24, 0xFB	; 251
    4502:	92 ff       	sbrs	r25, 2
    4504:	84 60       	ori	r24, 0x04	; 4
    4506:	2b cf       	rjmp	.-426    	; 0x435e <bootmagic+0x80>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4508:	80 e1       	ldi	r24, 0x10	; 16
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <bootmagic_scan_key>
    4510:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    4514:	88 23       	and	r24, r24
    4516:	29 f0       	breq	.+10     	; 0x4522 <bootmagic+0x244>
            debug_config.mouse = !debug_config.mouse;
    4518:	89 2f       	mov	r24, r25
    451a:	87 7f       	andi	r24, 0xF7	; 247
    451c:	93 ff       	sbrs	r25, 3
    451e:	88 60       	ori	r24, 0x08	; 8
    4520:	1e cf       	rjmp	.-452    	; 0x435e <bootmagic+0x80>
            debug_config.enable = !debug_config.enable;
    4522:	89 2f       	mov	r24, r25
    4524:	8e 7f       	andi	r24, 0xFE	; 254
    4526:	90 ff       	sbrs	r25, 0
    4528:	81 60       	ori	r24, 0x01	; 1
    452a:	19 cf       	rjmp	.-462    	; 0x435e <bootmagic+0x80>
    if (default_layer) {
    452c:	c1 11       	cpse	r28, r1
    452e:	cc cf       	rjmp	.-104    	; 0x44c8 <bootmagic+0x1ea>
        default_layer = eeconfig_read_default_layer();
    4530:	0e 94 cc 22 	call	0x4598	; 0x4598 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4534:	68 2f       	mov	r22, r24
    4536:	cc cf       	rjmp	.-104    	; 0x44d0 <bootmagic+0x1f2>
}
    4538:	cf 91       	pop	r28
    453a:	08 95       	ret

0000453c <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    453c:	6d ee       	ldi	r22, 0xED	; 237
    453e:	7e ef       	ldi	r23, 0xFE	; 254
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	0e 94 0b 2c 	call	0x5816	; 0x5816 <eeprom_write_word>
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <eeprom_write_byte>
    4552:	60 e0       	ldi	r22, 0x00	; 0
    4554:	83 e0       	ldi	r24, 0x03	; 3
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <eeprom_write_byte>
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	84 e0       	ldi	r24, 0x04	; 4
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <eeprom_write_byte>
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	85 e0       	ldi	r24, 0x05	; 5
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <eeprom_write_byte>

00004570 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <eeprom_read_word>
    4578:	21 e0       	ldi	r18, 0x01	; 1
    457a:	8d 3e       	cpi	r24, 0xED	; 237
    457c:	9e 4f       	sbci	r25, 0xFE	; 254
    457e:	09 f0       	breq	.+2      	; 0x4582 <eeconfig_is_enabled+0x12>
    4580:	20 e0       	ldi	r18, 0x00	; 0
}
    4582:	82 2f       	mov	r24, r18
    4584:	08 95       	ret

00004586 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4586:	82 e0       	ldi	r24, 0x02	; 2
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <eeprom_read_byte>

0000458e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    458e:	68 2f       	mov	r22, r24
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <eeprom_write_byte>

00004598 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4598:	83 e0       	ldi	r24, 0x03	; 3
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <eeprom_read_byte>

000045a0 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    45a0:	68 2f       	mov	r22, r24
    45a2:	83 e0       	ldi	r24, 0x03	; 3
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <eeprom_write_byte>

000045aa <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    45aa:	84 e0       	ldi	r24, 0x04	; 4
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <eeprom_read_byte>

000045b2 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    45b2:	68 2f       	mov	r22, r24
    45b4:	84 e0       	ldi	r24, 0x04	; 4
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	0c 94 fd 2b 	jmp	0x57fa	; 0x57fa <eeprom_write_byte>

000045bc <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    45bc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    45c0:	80 ff       	sbrs	r24, 0
    45c2:	12 c0       	rjmp	.+36     	; 0x45e8 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    45c4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    45c8:	85 e0       	ldi	r24, 0x05	; 5
    45ca:	68 9f       	mul	r22, r24
    45cc:	b0 01       	movw	r22, r0
    45ce:	11 24       	eor	r1, r1
    45d0:	75 95       	asr	r23
    45d2:	67 95       	ror	r22
    45d4:	75 95       	asr	r23
    45d6:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    45d8:	60 38       	cpi	r22, 0x80	; 128
    45da:	71 05       	cpc	r23, r1
    45dc:	a8 f5       	brcc	.+106    	; 0x4648 <move_unit+0x8c>
    45de:	61 15       	cp	r22, r1
    45e0:	71 05       	cpc	r23, r1
    45e2:	a1 f1       	breq	.+104    	; 0x464c <move_unit+0x90>
    45e4:	86 2f       	mov	r24, r22
    45e6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    45e8:	81 ff       	sbrs	r24, 1
    45ea:	09 c0       	rjmp	.+18     	; 0x45fe <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    45ec:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    45f0:	85 e0       	ldi	r24, 0x05	; 5
    45f2:	68 9f       	mul	r22, r24
    45f4:	b0 01       	movw	r22, r0
    45f6:	11 24       	eor	r1, r1
    45f8:	75 95       	asr	r23
    45fa:	67 95       	ror	r22
    45fc:	ed cf       	rjmp	.-38     	; 0x45d8 <move_unit+0x1c>
    } else if (mousekey_accel & (1<<2)) {
    45fe:	82 ff       	sbrs	r24, 2
    4600:	07 c0       	rjmp	.+14     	; 0x4610 <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4602:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    4606:	85 e0       	ldi	r24, 0x05	; 5
    4608:	68 9f       	mul	r22, r24
    460a:	b0 01       	movw	r22, r0
    460c:	11 24       	eor	r1, r1
    460e:	e4 cf       	rjmp	.-56     	; 0x45d8 <move_unit+0x1c>
    } else if (mousekey_repeat == 0) {
    4610:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <mousekey_repeat>
    4614:	22 23       	and	r18, r18
    4616:	a9 f0       	breq	.+42     	; 0x4642 <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    4618:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <mk_time_to_max>
    461c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    4620:	85 e0       	ldi	r24, 0x05	; 5
    4622:	68 9f       	mul	r22, r24
    4624:	b0 01       	movw	r22, r0
    4626:	11 24       	eor	r1, r1
    4628:	29 17       	cp	r18, r25
    462a:	b0 f6       	brcc	.-84     	; 0x45d8 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    462c:	26 9f       	mul	r18, r22
    462e:	a0 01       	movw	r20, r0
    4630:	27 9f       	mul	r18, r23
    4632:	50 0d       	add	r21, r0
    4634:	11 24       	eor	r1, r1
    4636:	69 2f       	mov	r22, r25
    4638:	70 e0       	ldi	r23, 0x00	; 0
    463a:	ca 01       	movw	r24, r20
    463c:	0e 94 c1 2b 	call	0x5782	; 0x5782 <__divmodhi4>
    4640:	cb cf       	rjmp	.-106    	; 0x45d8 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    4642:	65 e0       	ldi	r22, 0x05	; 5
    4644:	70 e0       	ldi	r23, 0x00	; 0
    4646:	ce cf       	rjmp	.-100    	; 0x45e4 <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4648:	8f e7       	ldi	r24, 0x7F	; 127
    464a:	08 95       	ret
    464c:	81 e0       	ldi	r24, 0x01	; 1
}
    464e:	08 95       	ret

00004650 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4650:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4654:	80 ff       	sbrs	r24, 0
    4656:	0c c0       	rjmp	.+24     	; 0x4670 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4658:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	75 95       	asr	r23
    4660:	67 95       	ror	r22
    4662:	75 95       	asr	r23
    4664:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4666:	61 15       	cp	r22, r1
    4668:	71 05       	cpc	r23, r1
    466a:	49 f1       	breq	.+82     	; 0x46be <wheel_unit+0x6e>
    466c:	86 2f       	mov	r24, r22
    466e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4670:	81 ff       	sbrs	r24, 1
    4672:	06 c0       	rjmp	.+12     	; 0x4680 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4674:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4678:	70 e0       	ldi	r23, 0x00	; 0
    467a:	75 95       	asr	r23
    467c:	67 95       	ror	r22
    467e:	f3 cf       	rjmp	.-26     	; 0x4666 <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4680:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    4684:	82 fd       	sbrc	r24, 2
    4686:	0b c0       	rjmp	.+22     	; 0x469e <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    4688:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <mousekey_repeat>
    468c:	99 23       	and	r25, r25
    468e:	a1 f0       	breq	.+40     	; 0x46b8 <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4690:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4694:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4698:	96 17       	cp	r25, r22
    469a:	38 f0       	brcs	.+14     	; 0x46aa <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    469c:	68 2f       	mov	r22, r24
    469e:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    46a0:	60 38       	cpi	r22, 0x80	; 128
    46a2:	71 05       	cpc	r23, r1
    46a4:	00 f3       	brcs	.-64     	; 0x4666 <wheel_unit+0x16>
    46a6:	8f e7       	ldi	r24, 0x7F	; 127
    46a8:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    46aa:	89 9f       	mul	r24, r25
    46ac:	c0 01       	movw	r24, r0
    46ae:	11 24       	eor	r1, r1
    46b0:	70 e0       	ldi	r23, 0x00	; 0
    46b2:	0e 94 c1 2b 	call	0x5782	; 0x5782 <__divmodhi4>
    46b6:	f4 cf       	rjmp	.-24     	; 0x46a0 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    46b8:	61 e0       	ldi	r22, 0x01	; 1
    46ba:	70 e0       	ldi	r23, 0x00	; 0
    46bc:	d7 cf       	rjmp	.-82     	; 0x466c <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    46be:	81 e0       	ldi	r24, 0x01	; 1
}
    46c0:	08 95       	ret

000046c2 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    46c2:	80 3f       	cpi	r24, 0xF0	; 240
    46c4:	31 f4       	brne	.+12     	; 0x46d2 <mousekey_on+0x10>
    46c6:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    46ca:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    46cc:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    46d0:	08 95       	ret
    46d2:	81 3f       	cpi	r24, 0xF1	; 241
    46d4:	19 f4       	brne	.+6      	; 0x46dc <mousekey_on+0x1a>
    46d6:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    46da:	f8 cf       	rjmp	.-16     	; 0x46cc <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    46dc:	82 3f       	cpi	r24, 0xF2	; 242
    46de:	31 f4       	brne	.+12     	; 0x46ec <mousekey_on+0x2a>
    46e0:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    46e4:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    46e6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    46ea:	08 95       	ret
    46ec:	83 3f       	cpi	r24, 0xF3	; 243
    46ee:	19 f4       	brne	.+6      	; 0x46f6 <mousekey_on+0x34>
    46f0:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    46f4:	f8 cf       	rjmp	.-16     	; 0x46e6 <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    46f6:	89 3f       	cpi	r24, 0xF9	; 249
    46f8:	29 f4       	brne	.+10     	; 0x4704 <mousekey_on+0x42>
    46fa:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    46fe:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    4702:	08 95       	ret
    4704:	8a 3f       	cpi	r24, 0xFA	; 250
    4706:	21 f4       	brne	.+8      	; 0x4710 <mousekey_on+0x4e>
    4708:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    470c:	81 95       	neg	r24
    470e:	f7 cf       	rjmp	.-18     	; 0x46fe <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4710:	8b 3f       	cpi	r24, 0xFB	; 251
    4712:	31 f4       	brne	.+12     	; 0x4720 <mousekey_on+0x5e>
    4714:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4718:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    471a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
    471e:	08 95       	ret
    4720:	8c 3f       	cpi	r24, 0xFC	; 252
    4722:	19 f4       	brne	.+6      	; 0x472a <mousekey_on+0x68>
    4724:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4728:	f8 cf       	rjmp	.-16     	; 0x471a <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    472a:	84 3f       	cpi	r24, 0xF4	; 244
    472c:	31 f4       	brne	.+12     	; 0x473a <mousekey_on+0x78>
    472e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4732:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4734:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <mouse_report>
    4738:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    473a:	85 3f       	cpi	r24, 0xF5	; 245
    473c:	21 f4       	brne	.+8      	; 0x4746 <mousekey_on+0x84>
    473e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4742:	82 60       	ori	r24, 0x02	; 2
    4744:	f7 cf       	rjmp	.-18     	; 0x4734 <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4746:	86 3f       	cpi	r24, 0xF6	; 246
    4748:	21 f4       	brne	.+8      	; 0x4752 <mousekey_on+0x90>
    474a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    474e:	84 60       	ori	r24, 0x04	; 4
    4750:	f1 cf       	rjmp	.-30     	; 0x4734 <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4752:	87 3f       	cpi	r24, 0xF7	; 247
    4754:	21 f4       	brne	.+8      	; 0x475e <mousekey_on+0x9c>
    4756:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    475a:	88 60       	ori	r24, 0x08	; 8
    475c:	eb cf       	rjmp	.-42     	; 0x4734 <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    475e:	88 3f       	cpi	r24, 0xF8	; 248
    4760:	21 f4       	brne	.+8      	; 0x476a <mousekey_on+0xa8>
    4762:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4766:	80 61       	ori	r24, 0x10	; 16
    4768:	e5 cf       	rjmp	.-54     	; 0x4734 <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    476a:	8d 3f       	cpi	r24, 0xFD	; 253
    476c:	31 f4       	brne	.+12     	; 0x477a <mousekey_on+0xb8>
    476e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4772:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4774:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <mousekey_accel>
}
    4778:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    477a:	8e 3f       	cpi	r24, 0xFE	; 254
    477c:	21 f4       	brne	.+8      	; 0x4786 <mousekey_on+0xc4>
    477e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4782:	82 60       	ori	r24, 0x02	; 2
    4784:	f7 cf       	rjmp	.-18     	; 0x4774 <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4786:	8f 3f       	cpi	r24, 0xFF	; 255
    4788:	b9 f7       	brne	.-18     	; 0x4778 <mousekey_on+0xb6>
    478a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    478e:	84 60       	ori	r24, 0x04	; 4
    4790:	f1 cf       	rjmp	.-30     	; 0x4774 <mousekey_on+0xb2>

00004792 <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4792:	80 3f       	cpi	r24, 0xF0	; 240
    4794:	c1 f4       	brne	.+48     	; 0x47c6 <mousekey_off+0x34>
    4796:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    479a:	87 fd       	sbrc	r24, 7
    479c:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    47a0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    47a4:	81 11       	cpse	r24, r1
    47a6:	0e c0       	rjmp	.+28     	; 0x47c4 <mousekey_off+0x32>
    47a8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    47ac:	81 11       	cpse	r24, r1
    47ae:	0a c0       	rjmp	.+20     	; 0x47c4 <mousekey_off+0x32>
    47b0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    47b4:	81 11       	cpse	r24, r1
    47b6:	06 c0       	rjmp	.+12     	; 0x47c4 <mousekey_off+0x32>
    47b8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    47bc:	81 11       	cpse	r24, r1
    47be:	02 c0       	rjmp	.+4      	; 0x47c4 <mousekey_off+0x32>
        mousekey_repeat = 0;
    47c0:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mousekey_repeat>
}
    47c4:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    47c6:	81 3f       	cpi	r24, 0xF1	; 241
    47c8:	29 f4       	brne	.+10     	; 0x47d4 <mousekey_off+0x42>
    47ca:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    47ce:	18 16       	cp	r1, r24
    47d0:	2c f3       	brlt	.-54     	; 0x479c <mousekey_off+0xa>
    47d2:	e6 cf       	rjmp	.-52     	; 0x47a0 <mousekey_off+0xe>
    47d4:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    47d8:	82 3f       	cpi	r24, 0xF2	; 242
    47da:	29 f4       	brne	.+10     	; 0x47e6 <mousekey_off+0x54>
    47dc:	97 ff       	sbrs	r25, 7
    47de:	e0 cf       	rjmp	.-64     	; 0x47a0 <mousekey_off+0xe>
    47e0:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <mouse_report+0x1>
    47e4:	dd cf       	rjmp	.-70     	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    47e6:	83 3f       	cpi	r24, 0xF3	; 243
    47e8:	19 f4       	brne	.+6      	; 0x47f0 <mousekey_off+0x5e>
    47ea:	19 16       	cp	r1, r25
    47ec:	cc f3       	brlt	.-14     	; 0x47e0 <mousekey_off+0x4e>
    47ee:	d8 cf       	rjmp	.-80     	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    47f0:	89 3f       	cpi	r24, 0xF9	; 249
    47f2:	39 f4       	brne	.+14     	; 0x4802 <mousekey_off+0x70>
    47f4:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    47f8:	18 16       	cp	r1, r24
    47fa:	94 f6       	brge	.-92     	; 0x47a0 <mousekey_off+0xe>
    47fc:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <mouse_report+0x3>
    4800:	cf cf       	rjmp	.-98     	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4802:	8a 3f       	cpi	r24, 0xFA	; 250
    4804:	29 f4       	brne	.+10     	; 0x4810 <mousekey_off+0x7e>
    4806:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    480a:	87 ff       	sbrs	r24, 7
    480c:	c9 cf       	rjmp	.-110    	; 0x47a0 <mousekey_off+0xe>
    480e:	f6 cf       	rjmp	.-20     	; 0x47fc <mousekey_off+0x6a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4810:	8b 3f       	cpi	r24, 0xFB	; 251
    4812:	39 f4       	brne	.+14     	; 0x4822 <mousekey_off+0x90>
    4814:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    4818:	87 ff       	sbrs	r24, 7
    481a:	c2 cf       	rjmp	.-124    	; 0x47a0 <mousekey_off+0xe>
    481c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <mouse_report+0x4>
    4820:	bf cf       	rjmp	.-130    	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4822:	8c 3f       	cpi	r24, 0xFC	; 252
    4824:	29 f4       	brne	.+10     	; 0x4830 <mousekey_off+0x9e>
    4826:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    482a:	18 16       	cp	r1, r24
    482c:	bc f3       	brlt	.-18     	; 0x481c <mousekey_off+0x8a>
    482e:	b8 cf       	rjmp	.-144    	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4830:	84 3f       	cpi	r24, 0xF4	; 244
    4832:	31 f4       	brne	.+12     	; 0x4840 <mousekey_off+0xae>
    4834:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4838:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    483a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <mouse_report>
    483e:	b0 cf       	rjmp	.-160    	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4840:	85 3f       	cpi	r24, 0xF5	; 245
    4842:	21 f4       	brne	.+8      	; 0x484c <mousekey_off+0xba>
    4844:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4848:	8d 7f       	andi	r24, 0xFD	; 253
    484a:	f7 cf       	rjmp	.-18     	; 0x483a <mousekey_off+0xa8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    484c:	86 3f       	cpi	r24, 0xF6	; 246
    484e:	21 f4       	brne	.+8      	; 0x4858 <mousekey_off+0xc6>
    4850:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4854:	8b 7f       	andi	r24, 0xFB	; 251
    4856:	f1 cf       	rjmp	.-30     	; 0x483a <mousekey_off+0xa8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4858:	87 3f       	cpi	r24, 0xF7	; 247
    485a:	21 f4       	brne	.+8      	; 0x4864 <mousekey_off+0xd2>
    485c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4860:	87 7f       	andi	r24, 0xF7	; 247
    4862:	eb cf       	rjmp	.-42     	; 0x483a <mousekey_off+0xa8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4864:	88 3f       	cpi	r24, 0xF8	; 248
    4866:	21 f4       	brne	.+8      	; 0x4870 <mousekey_off+0xde>
    4868:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    486c:	8f 7e       	andi	r24, 0xEF	; 239
    486e:	e5 cf       	rjmp	.-54     	; 0x483a <mousekey_off+0xa8>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4870:	8d 3f       	cpi	r24, 0xFD	; 253
    4872:	31 f4       	brne	.+12     	; 0x4880 <mousekey_off+0xee>
    4874:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4878:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    487a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <mousekey_accel>
    487e:	90 cf       	rjmp	.-224    	; 0x47a0 <mousekey_off+0xe>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4880:	8e 3f       	cpi	r24, 0xFE	; 254
    4882:	21 f4       	brne	.+8      	; 0x488c <mousekey_off+0xfa>
    4884:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4888:	8d 7f       	andi	r24, 0xFD	; 253
    488a:	f7 cf       	rjmp	.-18     	; 0x487a <mousekey_off+0xe8>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    488c:	8f 3f       	cpi	r24, 0xFF	; 255
    488e:	09 f0       	breq	.+2      	; 0x4892 <mousekey_off+0x100>
    4890:	87 cf       	rjmp	.-242    	; 0x47a0 <mousekey_off+0xe>
    4892:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4896:	8b 7f       	andi	r24, 0xFB	; 251
    4898:	f0 cf       	rjmp	.-32     	; 0x487a <mousekey_off+0xe8>

0000489a <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    489a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    489e:	83 ff       	sbrs	r24, 3
    48a0:	7e c0       	rjmp	.+252    	; 0x499e <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    48a2:	84 e2       	ldi	r24, 0x24	; 36
    48a4:	96 e0       	ldi	r25, 0x06	; 6
    48a6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    phex(mouse_report.buttons); print("|");
    48aa:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    48ae:	1f 92       	push	r1
    48b0:	8f 93       	push	r24
    48b2:	8f e1       	ldi	r24, 0x1F	; 31
    48b4:	96 e0       	ldi	r25, 0x06	; 6
    48b6:	9f 93       	push	r25
    48b8:	8f 93       	push	r24
    48ba:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    48be:	8d e1       	ldi	r24, 0x1D	; 29
    48c0:	96 e0       	ldi	r25, 0x06	; 6
    48c2:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_decs(mouse_report.x); print(" ");
    48c6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    48ca:	28 2f       	mov	r18, r24
    48cc:	08 2e       	mov	r0, r24
    48ce:	00 0c       	add	r0, r0
    48d0:	33 0b       	sbc	r19, r19
    48d2:	3f 93       	push	r19
    48d4:	8f 93       	push	r24
    48d6:	8a e1       	ldi	r24, 0x1A	; 26
    48d8:	96 e0       	ldi	r25, 0x06	; 6
    48da:	9f 93       	push	r25
    48dc:	8f 93       	push	r24
    48de:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    48e2:	88 e1       	ldi	r24, 0x18	; 24
    48e4:	96 e0       	ldi	r25, 0x06	; 6
    48e6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_decs(mouse_report.y); print(" ");
    48ea:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    48ee:	28 2f       	mov	r18, r24
    48f0:	08 2e       	mov	r0, r24
    48f2:	00 0c       	add	r0, r0
    48f4:	33 0b       	sbc	r19, r19
    48f6:	3f 93       	push	r19
    48f8:	8f 93       	push	r24
    48fa:	85 e1       	ldi	r24, 0x15	; 21
    48fc:	96 e0       	ldi	r25, 0x06	; 6
    48fe:	9f 93       	push	r25
    4900:	8f 93       	push	r24
    4902:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4906:	83 e1       	ldi	r24, 0x13	; 19
    4908:	96 e0       	ldi	r25, 0x06	; 6
    490a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_decs(mouse_report.v); print(" ");
    490e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    4912:	28 2f       	mov	r18, r24
    4914:	08 2e       	mov	r0, r24
    4916:	00 0c       	add	r0, r0
    4918:	33 0b       	sbc	r19, r19
    491a:	3f 93       	push	r19
    491c:	8f 93       	push	r24
    491e:	80 e1       	ldi	r24, 0x10	; 16
    4920:	96 e0       	ldi	r25, 0x06	; 6
    4922:	9f 93       	push	r25
    4924:	8f 93       	push	r24
    4926:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    492a:	8e e0       	ldi	r24, 0x0E	; 14
    492c:	96 e0       	ldi	r25, 0x06	; 6
    492e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_decs(mouse_report.h); print("](");
    4932:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    4936:	28 2f       	mov	r18, r24
    4938:	08 2e       	mov	r0, r24
    493a:	00 0c       	add	r0, r0
    493c:	33 0b       	sbc	r19, r19
    493e:	3f 93       	push	r19
    4940:	8f 93       	push	r24
    4942:	8b e0       	ldi	r24, 0x0B	; 11
    4944:	96 e0       	ldi	r25, 0x06	; 6
    4946:	9f 93       	push	r25
    4948:	8f 93       	push	r24
    494a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    494e:	88 e0       	ldi	r24, 0x08	; 8
    4950:	96 e0       	ldi	r25, 0x06	; 6
    4952:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_dec(mousekey_repeat); print("/");
    4956:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mousekey_repeat>
    495a:	1f 92       	push	r1
    495c:	8f 93       	push	r24
    495e:	85 e0       	ldi	r24, 0x05	; 5
    4960:	96 e0       	ldi	r25, 0x06	; 6
    4962:	9f 93       	push	r25
    4964:	8f 93       	push	r24
    4966:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    496a:	83 e0       	ldi	r24, 0x03	; 3
    496c:	96 e0       	ldi	r25, 0x06	; 6
    496e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print_dec(mousekey_accel); print(")\n");
    4972:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4976:	1f 92       	push	r1
    4978:	8f 93       	push	r24
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	96 e0       	ldi	r25, 0x06	; 6
    497e:	9f 93       	push	r25
    4980:	8f 93       	push	r24
    4982:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4986:	8d ef       	ldi	r24, 0xFD	; 253
    4988:	95 e0       	ldi	r25, 0x05	; 5
    498a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    498e:	8d b7       	in	r24, 0x3d	; 61
    4990:	9e b7       	in	r25, 0x3e	; 62
    4992:	4c 96       	adiw	r24, 0x1c	; 28
    4994:	0f b6       	in	r0, 0x3f	; 63
    4996:	f8 94       	cli
    4998:	9e bf       	out	0x3e, r25	; 62
    499a:	0f be       	out	0x3f, r0	; 63
    499c:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    499e:	8f e3       	ldi	r24, 0x3F	; 63
    49a0:	92 e0       	ldi	r25, 0x02	; 2
    49a2:	0e 94 96 11 	call	0x232c	; 0x232c <host_mouse_send>
    last_timer = timer_read();
    49a6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <timer_read>
    49aa:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <last_timer+0x1>
    49ae:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <last_timer>
}
    49b2:	08 95       	ret

000049b4 <mousekey_task>:
{
    49b4:	1f 93       	push	r17
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    49ba:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <last_timer>
    49be:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <last_timer+0x1>
    49c2:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <timer_elapsed>
    49c6:	ac 01       	movw	r20, r24
    49c8:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <mousekey_repeat>
    49cc:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_interval>
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	91 11       	cpse	r25, r1
    49d4:	06 c0       	rjmp	.+12     	; 0x49e2 <mousekey_task+0x2e>
    49d6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mk_delay>
    49da:	8a e0       	ldi	r24, 0x0A	; 10
    49dc:	28 9f       	mul	r18, r24
    49de:	90 01       	movw	r18, r0
    49e0:	11 24       	eor	r1, r1
    49e2:	42 17       	cp	r20, r18
    49e4:	53 07       	cpc	r21, r19
    49e6:	80 f0       	brcs	.+32     	; 0x4a08 <mousekey_task+0x54>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    49e8:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    49ec:	c0 91 41 02 	lds	r28, 0x0241	; 0x800241 <mouse_report+0x2>
    49f0:	10 91 42 02 	lds	r17, 0x0242	; 0x800242 <mouse_report+0x3>
    49f4:	d0 91 43 02 	lds	r29, 0x0243	; 0x800243 <mouse_report+0x4>
    49f8:	81 11       	cpse	r24, r1
    49fa:	0a c0       	rjmp	.+20     	; 0x4a10 <mousekey_task+0x5c>
    49fc:	c1 11       	cpse	r28, r1
    49fe:	78 c0       	rjmp	.+240    	; 0x4af0 <mousekey_task+0x13c>
    4a00:	11 11       	cpse	r17, r1
    4a02:	76 c0       	rjmp	.+236    	; 0x4af0 <mousekey_task+0x13c>
    4a04:	d1 11       	cpse	r29, r1
    4a06:	74 c0       	rjmp	.+232    	; 0x4af0 <mousekey_task+0x13c>
}
    4a08:	df 91       	pop	r29
    4a0a:	cf 91       	pop	r28
    4a0c:	1f 91       	pop	r17
    4a0e:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    4a10:	9f 3f       	cpi	r25, 0xFF	; 255
    4a12:	19 f0       	breq	.+6      	; 0x4a1a <mousekey_task+0x66>
        mousekey_repeat++;
    4a14:	9f 5f       	subi	r25, 0xFF	; 255
    4a16:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4a1a:	18 16       	cp	r1, r24
    4a1c:	24 f4       	brge	.+8      	; 0x4a26 <mousekey_task+0x72>
    4a1e:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    4a22:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4a26:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    4a2a:	87 ff       	sbrs	r24, 7
    4a2c:	05 c0       	rjmp	.+10     	; 0x4a38 <mousekey_task+0x84>
    4a2e:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    4a32:	81 95       	neg	r24
    4a34:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4a38:	1c 16       	cp	r1, r28
    4a3a:	24 f4       	brge	.+8      	; 0x4a44 <mousekey_task+0x90>
    4a3c:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    4a40:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4a44:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    4a48:	87 ff       	sbrs	r24, 7
    4a4a:	05 c0       	rjmp	.+10     	; 0x4a56 <mousekey_task+0xa2>
    4a4c:	0e 94 de 22 	call	0x45bc	; 0x45bc <move_unit>
    4a50:	81 95       	neg	r24
    4a52:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    4a56:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <mouse_report+0x1>
    4a5a:	66 23       	and	r22, r22
    4a5c:	31 f1       	breq	.+76     	; 0x4aaa <mousekey_task+0xf6>
    4a5e:	c0 91 41 02 	lds	r28, 0x0241	; 0x800241 <mouse_report+0x2>
    4a62:	cc 23       	and	r28, r28
    4a64:	11 f1       	breq	.+68     	; 0x4aaa <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    4a66:	06 2e       	mov	r0, r22
    4a68:	00 0c       	add	r0, r0
    4a6a:	77 0b       	sbc	r23, r23
    4a6c:	88 0b       	sbc	r24, r24
    4a6e:	99 0b       	sbc	r25, r25
    4a70:	0e 94 bc 2a 	call	0x5578	; 0x5578 <__floatsisf>
    4a74:	23 e3       	ldi	r18, 0x33	; 51
    4a76:	33 e3       	ldi	r19, 0x33	; 51
    4a78:	43 e3       	ldi	r20, 0x33	; 51
    4a7a:	5f e3       	ldi	r21, 0x3F	; 63
    4a7c:	0e 94 20 2b 	call	0x5640	; 0x5640 <__mulsf3>
    4a80:	0e 94 84 2a 	call	0x5508	; 0x5508 <__fixsfsi>
    4a84:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4a88:	6c 2f       	mov	r22, r28
    4a8a:	cc 0f       	add	r28, r28
    4a8c:	77 0b       	sbc	r23, r23
    4a8e:	88 0b       	sbc	r24, r24
    4a90:	99 0b       	sbc	r25, r25
    4a92:	0e 94 bc 2a 	call	0x5578	; 0x5578 <__floatsisf>
    4a96:	23 e3       	ldi	r18, 0x33	; 51
    4a98:	33 e3       	ldi	r19, 0x33	; 51
    4a9a:	43 e3       	ldi	r20, 0x33	; 51
    4a9c:	5f e3       	ldi	r21, 0x3F	; 63
    4a9e:	0e 94 20 2b 	call	0x5640	; 0x5640 <__mulsf3>
    4aa2:	0e 94 84 2a 	call	0x5508	; 0x5508 <__fixsfsi>
    4aa6:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4aaa:	11 16       	cp	r1, r17
    4aac:	24 f4       	brge	.+8      	; 0x4ab6 <mousekey_task+0x102>
    4aae:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4ab2:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4ab6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    4aba:	87 ff       	sbrs	r24, 7
    4abc:	05 c0       	rjmp	.+10     	; 0x4ac8 <mousekey_task+0x114>
    4abe:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4ac2:	81 95       	neg	r24
    4ac4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4ac8:	1d 16       	cp	r1, r29
    4aca:	24 f4       	brge	.+8      	; 0x4ad4 <mousekey_task+0x120>
    4acc:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4ad0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4ad4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    4ad8:	87 ff       	sbrs	r24, 7
    4ada:	05 c0       	rjmp	.+10     	; 0x4ae6 <mousekey_task+0x132>
    4adc:	0e 94 28 23 	call	0x4650	; 0x4650 <wheel_unit>
    4ae0:	81 95       	neg	r24
    4ae2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
}
    4ae6:	df 91       	pop	r29
    4ae8:	cf 91       	pop	r28
    4aea:	1f 91       	pop	r17
    mousekey_send();
    4aec:	0c 94 4d 24 	jmp	0x489a	; 0x489a <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    4af0:	9f 3f       	cpi	r25, 0xFF	; 255
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <mousekey_task+0x142>
    4af4:	8f cf       	rjmp	.-226    	; 0x4a14 <mousekey_task+0x60>
    4af6:	a0 cf       	rjmp	.-192    	; 0x4a38 <mousekey_task+0x84>

00004af8 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4af8:	85 e0       	ldi	r24, 0x05	; 5
    4afa:	ef e3       	ldi	r30, 0x3F	; 63
    4afc:	f2 e0       	ldi	r31, 0x02	; 2
    4afe:	df 01       	movw	r26, r30
    4b00:	1d 92       	st	X+, r1
    4b02:	8a 95       	dec	r24
    4b04:	e9 f7       	brne	.-6      	; 0x4b00 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4b06:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mousekey_repeat>
    mousekey_accel = 0;
    4b0a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <mousekey_accel>
}
    4b0e:	08 95       	ret

00004b10 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4b10:	87 e4       	ldi	r24, 0x47	; 71
    4b12:	98 e0       	ldi	r25, 0x08	; 8
    4b14:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4b18:	1f 92       	push	r1
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	8f 93       	push	r24
    4b1e:	1f 92       	push	r1
    4b20:	85 e0       	ldi	r24, 0x05	; 5
    4b22:	8f 93       	push	r24
    4b24:	89 ef       	ldi	r24, 0xF9	; 249
    4b26:	97 e0       	ldi	r25, 0x07	; 7
    4b28:	9f 93       	push	r25
    4b2a:	8f 93       	push	r24
    4b2c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	08 95       	ret

00004b3e <mousekey_param_inc>:
    switch (param) {
    4b3e:	83 30       	cpi	r24, 0x03	; 3
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <mousekey_param_inc+0x6>
    4b42:	45 c0       	rjmp	.+138    	; 0x4bce <mousekey_param_inc+0x90>
    4b44:	28 f4       	brcc	.+10     	; 0x4b50 <mousekey_param_inc+0x12>
    4b46:	81 30       	cpi	r24, 0x01	; 1
    4b48:	61 f0       	breq	.+24     	; 0x4b62 <mousekey_param_inc+0x24>
    4b4a:	82 30       	cpi	r24, 0x02	; 2
    4b4c:	49 f1       	breq	.+82     	; 0x4ba0 <mousekey_param_inc+0x62>
    4b4e:	08 95       	ret
    4b50:	85 30       	cpi	r24, 0x05	; 5
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <mousekey_param_inc+0x18>
    4b54:	6a c0       	rjmp	.+212    	; 0x4c2a <mousekey_param_inc+0xec>
    4b56:	08 f4       	brcc	.+2      	; 0x4b5a <mousekey_param_inc+0x1c>
    4b58:	51 c0       	rjmp	.+162    	; 0x4bfc <mousekey_param_inc+0xbe>
    4b5a:	86 30       	cpi	r24, 0x06	; 6
    4b5c:	09 f4       	brne	.+2      	; 0x4b60 <mousekey_param_inc+0x22>
    4b5e:	7c c0       	rjmp	.+248    	; 0x4c58 <mousekey_param_inc+0x11a>
    4b60:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    4b62:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4b66:	48 2f       	mov	r20, r24
    4b68:	46 0f       	add	r20, r22
    4b6a:	55 27       	eor	r21, r21
    4b6c:	55 1f       	adc	r21, r21
    4b6e:	4f 3f       	cpi	r20, 0xFF	; 255
    4b70:	51 05       	cpc	r21, r1
    4b72:	94 f4       	brge	.+36     	; 0x4b98 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    4b74:	68 0f       	add	r22, r24
    4b76:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4b7a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4b7e:	1f 92       	push	r1
    4b80:	8f 93       	push	r24
    4b82:	82 e3       	ldi	r24, 0x32	; 50
    4b84:	97 e0       	ldi	r25, 0x07	; 7
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b86:	9f 93       	push	r25
    4b88:	8f 93       	push	r24
    4b8a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            break;
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
}
    4b96:	08 95       	ret
                mk_delay = UINT8_MAX;
    4b98:	8f ef       	ldi	r24, 0xFF	; 255
    4b9a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
    4b9e:	ed cf       	rjmp	.-38     	; 0x4b7a <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    4ba0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4ba4:	48 2f       	mov	r20, r24
    4ba6:	46 0f       	add	r20, r22
    4ba8:	55 27       	eor	r21, r21
    4baa:	55 1f       	adc	r21, r21
    4bac:	4f 3f       	cpi	r20, 0xFF	; 255
    4bae:	51 05       	cpc	r21, r1
    4bb0:	54 f4       	brge	.+20     	; 0x4bc6 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4bb2:	68 0f       	add	r22, r24
    4bb4:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4bb8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4bbc:	1f 92       	push	r1
    4bbe:	8f 93       	push	r24
    4bc0:	80 e2       	ldi	r24, 0x20	; 32
    4bc2:	97 e0       	ldi	r25, 0x07	; 7
    4bc4:	e0 cf       	rjmp	.-64     	; 0x4b86 <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    4bc6:	8f ef       	ldi	r24, 0xFF	; 255
    4bc8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
    4bcc:	f5 cf       	rjmp	.-22     	; 0x4bb8 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    4bce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4bd2:	48 2f       	mov	r20, r24
    4bd4:	46 0f       	add	r20, r22
    4bd6:	55 27       	eor	r21, r21
    4bd8:	55 1f       	adc	r21, r21
    4bda:	4f 3f       	cpi	r20, 0xFF	; 255
    4bdc:	51 05       	cpc	r21, r1
    4bde:	54 f4       	brge	.+20     	; 0x4bf4 <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    4be0:	68 0f       	add	r22, r24
    4be2:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4be6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4bea:	1f 92       	push	r1
    4bec:	8f 93       	push	r24
    4bee:	8d e0       	ldi	r24, 0x0D	; 13
    4bf0:	97 e0       	ldi	r25, 0x07	; 7
    4bf2:	c9 cf       	rjmp	.-110    	; 0x4b86 <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    4bf4:	8f ef       	ldi	r24, 0xFF	; 255
    4bf6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
    4bfa:	f5 cf       	rjmp	.-22     	; 0x4be6 <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4bfc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4c00:	48 2f       	mov	r20, r24
    4c02:	46 0f       	add	r20, r22
    4c04:	55 27       	eor	r21, r21
    4c06:	55 1f       	adc	r21, r21
    4c08:	4f 3f       	cpi	r20, 0xFF	; 255
    4c0a:	51 05       	cpc	r21, r1
    4c0c:	54 f4       	brge	.+20     	; 0x4c22 <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    4c0e:	68 0f       	add	r22, r24
    4c10:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4c14:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4c18:	1f 92       	push	r1
    4c1a:	8f 93       	push	r24
    4c1c:	88 ef       	ldi	r24, 0xF8	; 248
    4c1e:	96 e0       	ldi	r25, 0x06	; 6
    4c20:	b2 cf       	rjmp	.-156    	; 0x4b86 <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    4c22:	8f ef       	ldi	r24, 0xFF	; 255
    4c24:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
    4c28:	f5 cf       	rjmp	.-22     	; 0x4c14 <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4c2a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4c2e:	48 2f       	mov	r20, r24
    4c30:	46 0f       	add	r20, r22
    4c32:	55 27       	eor	r21, r21
    4c34:	55 1f       	adc	r21, r21
    4c36:	4f 3f       	cpi	r20, 0xFF	; 255
    4c38:	51 05       	cpc	r21, r1
    4c3a:	54 f4       	brge	.+20     	; 0x4c50 <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    4c3c:	68 0f       	add	r22, r24
    4c3e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c42:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4c46:	1f 92       	push	r1
    4c48:	8f 93       	push	r24
    4c4a:	8f ed       	ldi	r24, 0xDF	; 223
    4c4c:	96 e0       	ldi	r25, 0x06	; 6
    4c4e:	9b cf       	rjmp	.-202    	; 0x4b86 <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    4c50:	8f ef       	ldi	r24, 0xFF	; 255
    4c52:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
    4c56:	f5 cf       	rjmp	.-22     	; 0x4c42 <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4c58:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4c5c:	48 2f       	mov	r20, r24
    4c5e:	46 0f       	add	r20, r22
    4c60:	55 27       	eor	r21, r21
    4c62:	55 1f       	adc	r21, r21
    4c64:	4f 3f       	cpi	r20, 0xFF	; 255
    4c66:	51 05       	cpc	r21, r1
    4c68:	54 f4       	brge	.+20     	; 0x4c7e <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4c6a:	68 0f       	add	r22, r24
    4c6c:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c70:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4c74:	1f 92       	push	r1
    4c76:	8f 93       	push	r24
    4c78:	84 ec       	ldi	r24, 0xC4	; 196
    4c7a:	96 e0       	ldi	r25, 0x06	; 6
    4c7c:	84 cf       	rjmp	.-248    	; 0x4b86 <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4c7e:	8f ef       	ldi	r24, 0xFF	; 255
    4c80:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
    4c84:	f5 cf       	rjmp	.-22     	; 0x4c70 <mousekey_param_inc+0x132>

00004c86 <mousekey_param_dec>:
    switch (param) {
    4c86:	83 30       	cpi	r24, 0x03	; 3
    4c88:	c9 f1       	breq	.+114    	; 0x4cfc <mousekey_param_dec+0x76>
    4c8a:	28 f4       	brcc	.+10     	; 0x4c96 <mousekey_param_dec+0x10>
    4c8c:	81 30       	cpi	r24, 0x01	; 1
    4c8e:	61 f0       	breq	.+24     	; 0x4ca8 <mousekey_param_dec+0x22>
    4c90:	82 30       	cpi	r24, 0x02	; 2
    4c92:	19 f1       	breq	.+70     	; 0x4cda <mousekey_param_dec+0x54>
    4c94:	08 95       	ret
    4c96:	85 30       	cpi	r24, 0x05	; 5
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <mousekey_param_dec+0x16>
    4c9a:	52 c0       	rjmp	.+164    	; 0x4d40 <mousekey_param_dec+0xba>
    4c9c:	08 f4       	brcc	.+2      	; 0x4ca0 <mousekey_param_dec+0x1a>
    4c9e:	3f c0       	rjmp	.+126    	; 0x4d1e <mousekey_param_dec+0x98>
    4ca0:	86 30       	cpi	r24, 0x06	; 6
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <mousekey_param_dec+0x20>
    4ca4:	5e c0       	rjmp	.+188    	; 0x4d62 <mousekey_param_dec+0xdc>
    4ca6:	08 95       	ret
            if (mk_delay > dec)
    4ca8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4cac:	68 17       	cp	r22, r24
    4cae:	90 f4       	brcc	.+36     	; 0x4cd4 <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    4cb0:	86 1b       	sub	r24, r22
    4cb2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4cb6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4cba:	1f 92       	push	r1
    4cbc:	8f 93       	push	r24
    4cbe:	85 eb       	ldi	r24, 0xB5	; 181
    4cc0:	96 e0       	ldi	r25, 0x06	; 6
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4cc2:	9f 93       	push	r25
    4cc4:	8f 93       	push	r24
    4cc6:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            break;
    4cca:	0f 90       	pop	r0
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
}
    4cd2:	08 95       	ret
                mk_delay = 0;
    4cd4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_delay>
    4cd8:	ee cf       	rjmp	.-36     	; 0x4cb6 <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    4cda:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4cde:	68 17       	cp	r22, r24
    4ce0:	50 f4       	brcc	.+20     	; 0x4cf6 <mousekey_param_dec+0x70>
                mk_interval -= dec;
    4ce2:	86 1b       	sub	r24, r22
    4ce4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4ce8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4cec:	1f 92       	push	r1
    4cee:	8f 93       	push	r24
    4cf0:	83 ea       	ldi	r24, 0xA3	; 163
    4cf2:	96 e0       	ldi	r25, 0x06	; 6
    4cf4:	e6 cf       	rjmp	.-52     	; 0x4cc2 <mousekey_param_dec+0x3c>
                mk_interval = 0;
    4cf6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_interval>
    4cfa:	f6 cf       	rjmp	.-20     	; 0x4ce8 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4cfc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4d00:	68 17       	cp	r22, r24
    4d02:	50 f4       	brcc	.+20     	; 0x4d18 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    4d04:	86 1b       	sub	r24, r22
    4d06:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4d0a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4d0e:	1f 92       	push	r1
    4d10:	8f 93       	push	r24
    4d12:	80 e9       	ldi	r24, 0x90	; 144
    4d14:	96 e0       	ldi	r25, 0x06	; 6
    4d16:	d5 cf       	rjmp	.-86     	; 0x4cc2 <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    4d18:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_max_speed>
    4d1c:	f6 cf       	rjmp	.-20     	; 0x4d0a <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    4d1e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4d22:	68 17       	cp	r22, r24
    4d24:	50 f4       	brcc	.+20     	; 0x4d3a <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    4d26:	86 1b       	sub	r24, r22
    4d28:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4d2c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4d30:	1f 92       	push	r1
    4d32:	8f 93       	push	r24
    4d34:	8b e7       	ldi	r24, 0x7B	; 123
    4d36:	96 e0       	ldi	r25, 0x06	; 6
    4d38:	c4 cf       	rjmp	.-120    	; 0x4cc2 <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    4d3a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_time_to_max>
    4d3e:	f6 cf       	rjmp	.-20     	; 0x4d2c <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    4d40:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4d44:	68 17       	cp	r22, r24
    4d46:	50 f4       	brcc	.+20     	; 0x4d5c <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    4d48:	86 1b       	sub	r24, r22
    4d4a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d4e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4d52:	1f 92       	push	r1
    4d54:	8f 93       	push	r24
    4d56:	82 e6       	ldi	r24, 0x62	; 98
    4d58:	96 e0       	ldi	r25, 0x06	; 6
    4d5a:	b3 cf       	rjmp	.-154    	; 0x4cc2 <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    4d5c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_wheel_max_speed>
    4d60:	f6 cf       	rjmp	.-20     	; 0x4d4e <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    4d62:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4d66:	68 17       	cp	r22, r24
    4d68:	50 f4       	brcc	.+20     	; 0x4d7e <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4d6a:	86 1b       	sub	r24, r22
    4d6c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4d70:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4d74:	1f 92       	push	r1
    4d76:	8f 93       	push	r24
    4d78:	87 e4       	ldi	r24, 0x47	; 71
    4d7a:	96 e0       	ldi	r25, 0x06	; 6
    4d7c:	a2 cf       	rjmp	.-188    	; 0x4cc2 <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4d7e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_time_to_max>
    4d82:	f6 cf       	rjmp	.-20     	; 0x4d70 <mousekey_param_dec+0xea>

00004d84 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4d84:	cf 93       	push	r28
    4d86:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4d88:	1f 92       	push	r1
    4d8a:	8f 93       	push	r24
    4d8c:	8c e4       	ldi	r24, 0x4C	; 76
    4d8e:	99 e0       	ldi	r25, 0x09	; 9
    4d90:	9f 93       	push	r25
    4d92:	8f 93       	push	r24
    4d94:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    default_layer_set(1UL<<layer);
    4d98:	61 e0       	ldi	r22, 0x01	; 1
    4d9a:	70 e0       	ldi	r23, 0x00	; 0
    4d9c:	80 e0       	ldi	r24, 0x00	; 0
    4d9e:	90 e0       	ldi	r25, 0x00	; 0
    4da0:	04 c0       	rjmp	.+8      	; 0x4daa <switch_default_layer+0x26>
    4da2:	66 0f       	add	r22, r22
    4da4:	77 1f       	adc	r23, r23
    4da6:	88 1f       	adc	r24, r24
    4da8:	99 1f       	adc	r25, r25
    4daa:	ca 95       	dec	r28
    4dac:	d2 f7       	brpl	.-12     	; 0x4da2 <switch_default_layer+0x1e>
    4dae:	0e 94 0f 1c 	call	0x381e	; 0x381e <default_layer_set>
    clear_keyboard();
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	0f 90       	pop	r0
    4db8:	0f 90       	pop	r0
}
    4dba:	cf 91       	pop	r28
    clear_keyboard();
    4dbc:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <clear_keyboard>

00004dc0 <command_common>:
{
    4dc0:	cf 93       	push	r28
    switch (code) {
    4dc2:	8b 31       	cpi	r24, 0x1B	; 27
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <command_common+0x8>
    4dc6:	d7 c1       	rjmp	.+942    	; 0x5176 <command_common+0x3b6>
    4dc8:	08 f0       	brcs	.+2      	; 0x4dcc <command_common+0xc>
    4dca:	4a c0       	rjmp	.+148    	; 0x4e60 <command_common+0xa0>
    4dcc:	8e 30       	cpi	r24, 0x0E	; 14
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <command_common+0x12>
    4dd0:	e2 c1       	rjmp	.+964    	; 0x5196 <command_common+0x3d6>
    4dd2:	b8 f4       	brcc	.+46     	; 0x4e02 <command_common+0x42>
    4dd4:	87 30       	cpi	r24, 0x07	; 7
    4dd6:	09 f4       	brne	.+2      	; 0x4dda <command_common+0x1a>
    4dd8:	b7 c1       	rjmp	.+878    	; 0x5148 <command_common+0x388>
    4dda:	48 f4       	brcc	.+18     	; 0x4dee <command_common+0x2e>
    4ddc:	86 30       	cpi	r24, 0x06	; 6
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <command_common+0x22>
    4de0:	a1 c1       	rjmp	.+834    	; 0x5124 <command_common+0x364>
            print("?");
    4de2:	80 e6       	ldi	r24, 0x60	; 96
    4de4:	9b e0       	ldi	r25, 0x0B	; 11
    4de6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            return false;
    4dea:	c0 e0       	ldi	r28, 0x00	; 0
    4dec:	36 c2       	rjmp	.+1132   	; 0x525a <command_common+0x49a>
    switch (code) {
    4dee:	88 30       	cpi	r24, 0x08	; 8
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <command_common+0x34>
    4df2:	68 c0       	rjmp	.+208    	; 0x4ec4 <command_common+0x104>
    4df4:	8b 30       	cpi	r24, 0x0B	; 11
    4df6:	a9 f7       	brne	.-22     	; 0x4de2 <command_common+0x22>
    print("\n\t- Magic -\n"
    4df8:	88 e7       	ldi	r24, 0x78	; 120
    4dfa:	99 e0       	ldi	r25, 0x09	; 9
                print("NKRO: off\n");
    4dfc:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4e00:	8f c1       	rjmp	.+798    	; 0x5120 <command_common+0x360>
    switch (code) {
    4e02:	81 31       	cpi	r24, 0x11	; 17
    4e04:	09 f4       	brne	.+2      	; 0x4e08 <command_common+0x48>
    4e06:	1b c2       	rjmp	.+1078   	; 0x523e <command_common+0x47e>
    4e08:	78 f4       	brcc	.+30     	; 0x4e28 <command_common+0x68>
    4e0a:	80 31       	cpi	r24, 0x10	; 16
    4e0c:	51 f7       	brne	.-44     	; 0x4de2 <command_common+0x22>
            debug_mouse = !debug_mouse;
    4e0e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    4e12:	89 2f       	mov	r24, r25
    4e14:	87 7f       	andi	r24, 0xF7	; 247
    4e16:	93 ff       	sbrs	r25, 3
    4e18:	88 60       	ori	r24, 0x08	; 8
    4e1a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_mouse) {
    4e1e:	83 ff       	sbrs	r24, 3
    4e20:	ca c1       	rjmp	.+916    	; 0x51b6 <command_common+0x3f6>
                print("\nmouse: on\n");
    4e22:	84 e0       	ldi	r24, 0x04	; 4
    4e24:	9d e0       	ldi	r25, 0x0D	; 13
    4e26:	a1 c1       	rjmp	.+834    	; 0x516a <command_common+0x3aa>
    switch (code) {
    4e28:	86 31       	cpi	r24, 0x16	; 22
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <command_common+0x6e>
    4e2c:	c7 c1       	rjmp	.+910    	; 0x51bc <command_common+0x3fc>
    4e2e:	89 31       	cpi	r24, 0x19	; 25
    4e30:	c1 f6       	brne	.-80     	; 0x4de2 <command_common+0x22>
            print("\n\t- Version -\n");
    4e32:	88 ee       	ldi	r24, 0xE8	; 232
    4e34:	9c e0       	ldi	r25, 0x0C	; 12
    4e36:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4e3a:	8f eb       	ldi	r24, 0xBF	; 191
    4e3c:	9c e0       	ldi	r25, 0x0C	; 12
    4e3e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4e42:	8a e8       	ldi	r24, 0x8A	; 138
    4e44:	9c e0       	ldi	r25, 0x0C	; 12
    4e46:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4e4a:	83 e6       	ldi	r24, 0x63	; 99
    4e4c:	9c e0       	ldi	r25, 0x0C	; 12
    4e4e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("OPTIONS:"
    4e52:	8e e1       	ldi	r24, 0x1E	; 30
    4e54:	9c e0       	ldi	r25, 0x0C	; 12
    4e56:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4e5a:	83 ef       	ldi	r24, 0xF3	; 243
    4e5c:	9b e0       	ldi	r25, 0x0B	; 11
    4e5e:	ce cf       	rjmp	.-100    	; 0x4dfc <command_common+0x3c>
    switch (code) {
    4e60:	85 33       	cpi	r24, 0x35	; 53
    4e62:	61 f0       	breq	.+24     	; 0x4e7c <command_common+0xbc>
    4e64:	78 f4       	brcc	.+30     	; 0x4e84 <command_common+0xc4>
    4e66:	87 32       	cpi	r24, 0x27	; 39
    4e68:	49 f0       	breq	.+18     	; 0x4e7c <command_common+0xbc>
    4e6a:	28 f4       	brcc	.+10     	; 0x4e76 <command_common+0xb6>
    4e6c:	8e 31       	cpi	r24, 0x1E	; 30
    4e6e:	08 f4       	brcc	.+2      	; 0x4e72 <command_common+0xb2>
    4e70:	b8 cf       	rjmp	.-144    	; 0x4de2 <command_common+0x22>
            switch_default_layer((code - KC_1) + 1);
    4e72:	8d 51       	subi	r24, 0x1D	; 29
    4e74:	04 c0       	rjmp	.+8      	; 0x4e7e <command_common+0xbe>
    switch (code) {
    4e76:	89 32       	cpi	r24, 0x29	; 41
    4e78:	09 f0       	breq	.+2      	; 0x4e7c <command_common+0xbc>
    4e7a:	b3 cf       	rjmp	.-154    	; 0x4de2 <command_common+0x22>
            switch_default_layer(0);
    4e7c:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4e7e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <switch_default_layer>
    4e82:	4e c1       	rjmp	.+668    	; 0x5120 <command_common+0x360>
    switch (code) {
    4e84:	83 34       	cpi	r24, 0x43	; 67
    4e86:	38 f4       	brcc	.+14     	; 0x4e96 <command_common+0xd6>
    4e88:	8a 33       	cpi	r24, 0x3A	; 58
    4e8a:	08 f0       	brcs	.+2      	; 0x4e8e <command_common+0xce>
    4e8c:	ec c1       	rjmp	.+984    	; 0x5266 <command_common+0x4a6>
    4e8e:	88 33       	cpi	r24, 0x38	; 56
    4e90:	09 f4       	brne	.+2      	; 0x4e94 <command_common+0xd4>
    4e92:	b2 cf       	rjmp	.-156    	; 0x4df8 <command_common+0x38>
    4e94:	a6 cf       	rjmp	.-180    	; 0x4de2 <command_common+0x22>
    4e96:	83 34       	cpi	r24, 0x43	; 67
    4e98:	89 f3       	breq	.-30     	; 0x4e7c <command_common+0xbc>
    4e9a:	88 34       	cpi	r24, 0x48	; 72
    4e9c:	09 f0       	breq	.+2      	; 0x4ea0 <command_common+0xe0>
    4e9e:	a1 cf       	rjmp	.-190    	; 0x4de2 <command_common+0x22>
            clear_keyboard();
    4ea0:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_keyboard>
            print("\n\nbootloader... ");
    4ea4:	83 e6       	ldi	r24, 0x63	; 99
    4ea6:	9d e0       	ldi	r25, 0x0D	; 13
    4ea8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4eac:	9f ef       	ldi	r25, 0xFF	; 255
    4eae:	23 ed       	ldi	r18, 0xD3	; 211
    4eb0:	80 e3       	ldi	r24, 0x30	; 48
    4eb2:	91 50       	subi	r25, 0x01	; 1
    4eb4:	20 40       	sbci	r18, 0x00	; 0
    4eb6:	80 40       	sbci	r24, 0x00	; 0
    4eb8:	e1 f7       	brne	.-8      	; 0x4eb2 <command_common+0xf2>
    4eba:	00 c0       	rjmp	.+0      	; 0x4ebc <command_common+0xfc>
    4ebc:	00 00       	nop
            bootloader_jump(); // not return
    4ebe:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <bootloader_jump>
    4ec2:	2e c1       	rjmp	.+604    	; 0x5120 <command_common+0x360>
            print("eeconfig:\n");
    4ec4:	88 e7       	ldi	r24, 0x78	; 120
    4ec6:	9d e0       	ldi	r25, 0x0D	; 13
    4ec8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ecc:	80 e5       	ldi	r24, 0x50	; 80
    4ece:	9b e0       	ldi	r25, 0x0B	; 11
    4ed0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4ed4:	0e 94 cc 22 	call	0x4598	; 0x4598 <eeconfig_read_default_layer>
    4ed8:	1f 92       	push	r1
    4eda:	8f 93       	push	r24
    4edc:	8d e4       	ldi	r24, 0x4D	; 77
    4ede:	9b e0       	ldi	r25, 0x0B	; 11
    4ee0:	9f 93       	push	r25
    4ee2:	8f 93       	push	r24
    4ee4:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4ee8:	8b e4       	ldi	r24, 0x4B	; 75
    4eea:	9b e0       	ldi	r25, 0x0B	; 11
    4eec:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    dc.raw = eeconfig_read_debug();
    4ef0:	0e 94 c3 22 	call	0x4586	; 0x4586 <eeconfig_read_debug>
    4ef4:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4ef6:	88 e3       	ldi	r24, 0x38	; 56
    4ef8:	9b e0       	ldi	r25, 0x0B	; 11
    4efa:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4efe:	1f 92       	push	r1
    4f00:	cf 93       	push	r28
    4f02:	83 e3       	ldi	r24, 0x33	; 51
    4f04:	9b e0       	ldi	r25, 0x0B	; 11
    4f06:	9f 93       	push	r25
    4f08:	8f 93       	push	r24
    4f0a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4f0e:	81 e3       	ldi	r24, 0x31	; 49
    4f10:	9b e0       	ldi	r25, 0x0B	; 11
    4f12:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f16:	87 e2       	ldi	r24, 0x27	; 39
    4f18:	9b e0       	ldi	r25, 0x0B	; 11
    4f1a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4f1e:	8c 2f       	mov	r24, r28
    4f20:	81 70       	andi	r24, 0x01	; 1
    4f22:	1f 92       	push	r1
    4f24:	8f 93       	push	r24
    4f26:	84 e2       	ldi	r24, 0x24	; 36
    4f28:	9b e0       	ldi	r25, 0x0B	; 11
    4f2a:	9f 93       	push	r25
    4f2c:	8f 93       	push	r24
    4f2e:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4f32:	82 e2       	ldi	r24, 0x22	; 34
    4f34:	9b e0       	ldi	r25, 0x0B	; 11
    4f36:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f3a:	88 e1       	ldi	r24, 0x18	; 24
    4f3c:	9b e0       	ldi	r25, 0x0B	; 11
    4f3e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4f42:	c1 fb       	bst	r28, 1
    4f44:	88 27       	eor	r24, r24
    4f46:	80 f9       	bld	r24, 0
    4f48:	1f 92       	push	r1
    4f4a:	8f 93       	push	r24
    4f4c:	85 e1       	ldi	r24, 0x15	; 21
    4f4e:	9b e0       	ldi	r25, 0x0B	; 11
    4f50:	9f 93       	push	r25
    4f52:	8f 93       	push	r24
    4f54:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4f58:	83 e1       	ldi	r24, 0x13	; 19
    4f5a:	9b e0       	ldi	r25, 0x0B	; 11
    4f5c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f60:	87 e0       	ldi	r24, 0x07	; 7
    4f62:	9b e0       	ldi	r25, 0x0B	; 11
    4f64:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4f68:	c2 fb       	bst	r28, 2
    4f6a:	88 27       	eor	r24, r24
    4f6c:	80 f9       	bld	r24, 0
    4f6e:	1f 92       	push	r1
    4f70:	8f 93       	push	r24
    4f72:	84 e0       	ldi	r24, 0x04	; 4
    4f74:	9b e0       	ldi	r25, 0x0B	; 11
    4f76:	9f 93       	push	r25
    4f78:	8f 93       	push	r24
    4f7a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4f7e:	82 e0       	ldi	r24, 0x02	; 2
    4f80:	9b e0       	ldi	r25, 0x0B	; 11
    4f82:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4f86:	89 ef       	ldi	r24, 0xF9	; 249
    4f88:	9a e0       	ldi	r25, 0x0A	; 10
    4f8a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4f8e:	c3 fb       	bst	r28, 3
    4f90:	cc 27       	eor	r28, r28
    4f92:	c0 f9       	bld	r28, 0
    4f94:	1f 92       	push	r1
    4f96:	cf 93       	push	r28
    4f98:	86 ef       	ldi	r24, 0xF6	; 246
    4f9a:	9a e0       	ldi	r25, 0x0A	; 10
    4f9c:	9f 93       	push	r25
    4f9e:	8f 93       	push	r24
    4fa0:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4fa4:	84 ef       	ldi	r24, 0xF4	; 244
    4fa6:	9a e0       	ldi	r25, 0x0A	; 10
    4fa8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    kc.raw = eeconfig_read_keymap();
    4fac:	0e 94 d5 22 	call	0x45aa	; 0x45aa <eeconfig_read_keymap>
    4fb0:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4fb2:	80 ee       	ldi	r24, 0xE0	; 224
    4fb4:	9a e0       	ldi	r25, 0x0A	; 10
    4fb6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4fba:	1f 92       	push	r1
    4fbc:	cf 93       	push	r28
    4fbe:	8b ed       	ldi	r24, 0xDB	; 219
    4fc0:	9a e0       	ldi	r25, 0x0A	; 10
    4fc2:	9f 93       	push	r25
    4fc4:	8f 93       	push	r24
    4fc6:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4fca:	89 ed       	ldi	r24, 0xD9	; 217
    4fcc:	9a e0       	ldi	r25, 0x0A	; 10
    4fce:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4fd2:	80 ec       	ldi	r24, 0xC0	; 192
    4fd4:	9a e0       	ldi	r25, 0x0A	; 10
    4fd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    4fda:	8c 2f       	mov	r24, r28
    4fdc:	81 70       	andi	r24, 0x01	; 1
    4fde:	1f 92       	push	r1
    4fe0:	8f 93       	push	r24
    4fe2:	8d eb       	ldi	r24, 0xBD	; 189
    4fe4:	9a e0       	ldi	r25, 0x0A	; 10
    4fe6:	9f 93       	push	r25
    4fe8:	8f 93       	push	r24
    4fea:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    4fee:	8d b7       	in	r24, 0x3d	; 61
    4ff0:	9e b7       	in	r25, 0x3e	; 62
    4ff2:	80 96       	adiw	r24, 0x20	; 32
    4ff4:	0f b6       	in	r0, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	9e bf       	out	0x3e, r25	; 62
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	8d bf       	out	0x3d, r24	; 61
    4ffe:	8b eb       	ldi	r24, 0xBB	; 187
    5000:	9a e0       	ldi	r25, 0x0A	; 10
    5002:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5006:	84 ea       	ldi	r24, 0xA4	; 164
    5008:	9a e0       	ldi	r25, 0x0A	; 10
    500a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    500e:	c1 fb       	bst	r28, 1
    5010:	88 27       	eor	r24, r24
    5012:	80 f9       	bld	r24, 0
    5014:	1f 92       	push	r1
    5016:	8f 93       	push	r24
    5018:	81 ea       	ldi	r24, 0xA1	; 161
    501a:	9a e0       	ldi	r25, 0x0A	; 10
    501c:	9f 93       	push	r25
    501e:	8f 93       	push	r24
    5020:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5024:	8f e9       	ldi	r24, 0x9F	; 159
    5026:	9a e0       	ldi	r25, 0x0A	; 10
    5028:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    502c:	8d e8       	ldi	r24, 0x8D	; 141
    502e:	9a e0       	ldi	r25, 0x0A	; 10
    5030:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5034:	c2 fb       	bst	r28, 2
    5036:	88 27       	eor	r24, r24
    5038:	80 f9       	bld	r24, 0
    503a:	1f 92       	push	r1
    503c:	8f 93       	push	r24
    503e:	8a e8       	ldi	r24, 0x8A	; 138
    5040:	9a e0       	ldi	r25, 0x0A	; 10
    5042:	9f 93       	push	r25
    5044:	8f 93       	push	r24
    5046:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    504a:	88 e8       	ldi	r24, 0x88	; 136
    504c:	9a e0       	ldi	r25, 0x0A	; 10
    504e:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5052:	86 e7       	ldi	r24, 0x76	; 118
    5054:	9a e0       	ldi	r25, 0x0A	; 10
    5056:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    505a:	c3 fb       	bst	r28, 3
    505c:	88 27       	eor	r24, r24
    505e:	80 f9       	bld	r24, 0
    5060:	1f 92       	push	r1
    5062:	8f 93       	push	r24
    5064:	83 e7       	ldi	r24, 0x73	; 115
    5066:	9a e0       	ldi	r25, 0x0A	; 10
    5068:	9f 93       	push	r25
    506a:	8f 93       	push	r24
    506c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5070:	81 e7       	ldi	r24, 0x71	; 113
    5072:	9a e0       	ldi	r25, 0x0A	; 10
    5074:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    5078:	87 e6       	ldi	r24, 0x67	; 103
    507a:	9a e0       	ldi	r25, 0x0A	; 10
    507c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5080:	c4 fb       	bst	r28, 4
    5082:	88 27       	eor	r24, r24
    5084:	80 f9       	bld	r24, 0
    5086:	1f 92       	push	r1
    5088:	8f 93       	push	r24
    508a:	84 e6       	ldi	r24, 0x64	; 100
    508c:	9a e0       	ldi	r25, 0x0A	; 10
    508e:	9f 93       	push	r25
    5090:	8f 93       	push	r24
    5092:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5096:	82 e6       	ldi	r24, 0x62	; 98
    5098:	9a e0       	ldi	r25, 0x0A	; 10
    509a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    509e:	80 e5       	ldi	r24, 0x50	; 80
    50a0:	9a e0       	ldi	r25, 0x0A	; 10
    50a2:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    50a6:	c5 fb       	bst	r28, 5
    50a8:	88 27       	eor	r24, r24
    50aa:	80 f9       	bld	r24, 0
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	8d e4       	ldi	r24, 0x4D	; 77
    50b2:	9a e0       	ldi	r25, 0x0A	; 10
    50b4:	9f 93       	push	r25
    50b6:	8f 93       	push	r24
    50b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    50bc:	8b e4       	ldi	r24, 0x4B	; 75
    50be:	9a e0       	ldi	r25, 0x0A	; 10
    50c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    50c4:	8f e2       	ldi	r24, 0x2F	; 47
    50c6:	9a e0       	ldi	r25, 0x0A	; 10
    50c8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    50cc:	c6 fb       	bst	r28, 6
    50ce:	88 27       	eor	r24, r24
    50d0:	80 f9       	bld	r24, 0
    50d2:	1f 92       	push	r1
    50d4:	8f 93       	push	r24
    50d6:	8c e2       	ldi	r24, 0x2C	; 44
    50d8:	9a e0       	ldi	r25, 0x0A	; 10
    50da:	9f 93       	push	r25
    50dc:	8f 93       	push	r24
    50de:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    50e2:	8a e2       	ldi	r24, 0x2A	; 42
    50e4:	9a e0       	ldi	r25, 0x0A	; 10
    50e6:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    50ea:	82 e2       	ldi	r24, 0x22	; 34
    50ec:	9a e0       	ldi	r25, 0x0A	; 10
    50ee:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    50f2:	c7 fb       	bst	r28, 7
    50f4:	cc 27       	eor	r28, r28
    50f6:	c0 f9       	bld	r28, 0
    50f8:	1f 92       	push	r1
    50fa:	cf 93       	push	r28
    50fc:	8f e1       	ldi	r24, 0x1F	; 31
    50fe:	9a e0       	ldi	r25, 0x0A	; 10
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5108:	8d e1       	ldi	r24, 0x1D	; 29
    510a:	9a e0       	ldi	r25, 0x0A	; 10
    510c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5110:	8d b7       	in	r24, 0x3d	; 61
    5112:	9e b7       	in	r25, 0x3e	; 62
    5114:	4c 96       	adiw	r24, 0x1c	; 28
    5116:	0f b6       	in	r0, 0x3f	; 63
    5118:	f8 94       	cli
    511a:	9e bf       	out	0x3e, r25	; 62
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	8d bf       	out	0x3d, r24	; 61
    return true;
    5120:	c1 e0       	ldi	r28, 0x01	; 1
            break;
    5122:	9b c0       	rjmp	.+310    	; 0x525a <command_common+0x49a>
            debug_matrix   = false;
    5124:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
            debug_enable   = false;
    5128:	81 7f       	andi	r24, 0xF1	; 241
    512a:	8e 7f       	andi	r24, 0xFE	; 254
    512c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    print("\n\t- Console -\n"
    5130:	81 e5       	ldi	r24, 0x51	; 81
    5132:	99 e0       	ldi	r25, 0x09	; 9
    5134:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print("C> ");
    5138:	84 e7       	ldi	r24, 0x74	; 116
    513a:	9d e0       	ldi	r25, 0x0D	; 13
    513c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            command_state = CONSOLE;
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    5146:	ec cf       	rjmp	.-40     	; 0x5120 <command_common+0x360>
            if (debug_enable) {
    5148:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    514c:	80 ff       	sbrs	r24, 0
    514e:	0b c0       	rjmp	.+22     	; 0x5166 <command_common+0x3a6>
                print("\ndebug: off\n");
    5150:	86 e5       	ldi	r24, 0x56	; 86
    5152:	9d e0       	ldi	r25, 0x0D	; 13
    5154:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
                debug_matrix   = false;
    5158:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
                debug_enable   = false;
    515c:	81 7f       	andi	r24, 0xF1	; 241
    515e:	8e 7f       	andi	r24, 0xFE	; 254
                debug_enable = true;
    5160:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    5164:	dd cf       	rjmp	.-70     	; 0x5120 <command_common+0x360>
                print("\ndebug: on\n");
    5166:	8a e4       	ldi	r24, 0x4A	; 74
    5168:	9d e0       	ldi	r25, 0x0D	; 13
                print("\nmouse: on\n");
    516a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
                debug_enable = true;
    516e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    5172:	81 60       	ori	r24, 0x01	; 1
    5174:	f5 cf       	rjmp	.-22     	; 0x5160 <command_common+0x3a0>
            debug_matrix = !debug_matrix;
    5176:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    517a:	89 2f       	mov	r24, r25
    517c:	8d 7f       	andi	r24, 0xFD	; 253
    517e:	91 ff       	sbrs	r25, 1
    5180:	82 60       	ori	r24, 0x02	; 2
    5182:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_matrix) {
    5186:	81 ff       	sbrs	r24, 1
    5188:	03 c0       	rjmp	.+6      	; 0x5190 <command_common+0x3d0>
                print("\nmatrix: on\n");
    518a:	8d e3       	ldi	r24, 0x3D	; 61
    518c:	9d e0       	ldi	r25, 0x0D	; 13
    518e:	ed cf       	rjmp	.-38     	; 0x516a <command_common+0x3aa>
                print("\nmatrix: off\n");
    5190:	8f e2       	ldi	r24, 0x2F	; 47
    5192:	9d e0       	ldi	r25, 0x0D	; 13
    5194:	33 ce       	rjmp	.-922    	; 0x4dfc <command_common+0x3c>
            debug_keyboard = !debug_keyboard;
    5196:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    519a:	89 2f       	mov	r24, r25
    519c:	8b 7f       	andi	r24, 0xFB	; 251
    519e:	92 ff       	sbrs	r25, 2
    51a0:	84 60       	ori	r24, 0x04	; 4
    51a2:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_keyboard) {
    51a6:	82 ff       	sbrs	r24, 2
    51a8:	03 c0       	rjmp	.+6      	; 0x51b0 <command_common+0x3f0>
                print("\nkeyboard: on\n");
    51aa:	80 e2       	ldi	r24, 0x20	; 32
    51ac:	9d e0       	ldi	r25, 0x0D	; 13
    51ae:	dd cf       	rjmp	.-70     	; 0x516a <command_common+0x3aa>
                print("\nkeyboard: off\n");
    51b0:	80 e1       	ldi	r24, 0x10	; 16
    51b2:	9d e0       	ldi	r25, 0x0D	; 13
    51b4:	23 ce       	rjmp	.-954    	; 0x4dfc <command_common+0x3c>
                print("\nmouse: off\n");
    51b6:	87 ef       	ldi	r24, 0xF7	; 247
    51b8:	9c e0       	ldi	r25, 0x0C	; 12
    51ba:	20 ce       	rjmp	.-960    	; 0x4dfc <command_common+0x3c>
            print("\n\t- Status -\n");
    51bc:	85 ee       	ldi	r24, 0xE5	; 229
    51be:	9b e0       	ldi	r25, 0x0B	; 11
    51c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            print_val_hex8(host_keyboard_leds());
    51c4:	0e 94 3e 11 	call	0x227c	; 0x227c <host_keyboard_leds>
    51c8:	1f 92       	push	r1
    51ca:	8f 93       	push	r24
    51cc:	8b ec       	ldi	r24, 0xCB	; 203
    51ce:	9b e0       	ldi	r25, 0x0B	; 11
    51d0:	9f 93       	push	r25
    51d2:	8f 93       	push	r24
    51d4:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            print_val_hex8(keyboard_protocol);
    51d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    51dc:	1f 92       	push	r1
    51de:	8f 93       	push	r24
    51e0:	84 eb       	ldi	r24, 0xB4	; 180
    51e2:	9b e0       	ldi	r25, 0x0B	; 11
    51e4:	9f 93       	push	r25
    51e6:	8f 93       	push	r24
    51e8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            print_val_hex8(keyboard_idle);
    51ec:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    51f0:	1f 92       	push	r1
    51f2:	8f 93       	push	r24
    51f4:	81 ea       	ldi	r24, 0xA1	; 161
    51f6:	9b e0       	ldi	r25, 0x0B	; 11
    51f8:	9f 93       	push	r25
    51fa:	8f 93       	push	r24
    51fc:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            print_val_hex8(keyboard_nkro);
    5200:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    5204:	1f 92       	push	r1
    5206:	8f 93       	push	r24
    5208:	8e e8       	ldi	r24, 0x8E	; 142
    520a:	9b e0       	ldi	r25, 0x0B	; 11
    520c:	9f 93       	push	r25
    520e:	8f 93       	push	r24
    5210:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            print_val_hex32(timer_read32());
    5214:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <timer_read32>
    5218:	9f 93       	push	r25
    521a:	8f 93       	push	r24
    521c:	7f 93       	push	r23
    521e:	6f 93       	push	r22
    5220:	87 e7       	ldi	r24, 0x77	; 119
    5222:	9b e0       	ldi	r25, 0x0B	; 11
    5224:	9f 93       	push	r25
    5226:	8f 93       	push	r24
    5228:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
            break;
    522c:	8d b7       	in	r24, 0x3d	; 61
    522e:	9e b7       	in	r25, 0x3e	; 62
    5230:	46 96       	adiw	r24, 0x16	; 22
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	9e bf       	out	0x3e, r25	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	8d bf       	out	0x3d, r24	; 61
    523c:	71 cf       	rjmp	.-286    	; 0x5120 <command_common+0x360>
            clear_keyboard(); //Prevents stuck keys.
    523e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5242:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <keyboard_nkro>
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	c8 27       	eor	r28, r24
    524a:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <keyboard_nkro>
            if (keyboard_nkro) {
    524e:	cc 23       	and	r28, r28
    5250:	39 f0       	breq	.+14     	; 0x5260 <command_common+0x4a0>
                print("NKRO: on\n");
    5252:	8d e6       	ldi	r24, 0x6D	; 109
    5254:	9b e0       	ldi	r25, 0x0B	; 11
    5256:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
}
    525a:	8c 2f       	mov	r24, r28
    525c:	cf 91       	pop	r28
    525e:	08 95       	ret
                print("NKRO: off\n");
    5260:	82 e6       	ldi	r24, 0x62	; 98
    5262:	9b e0       	ldi	r25, 0x0B	; 11
    5264:	cb cd       	rjmp	.-1130   	; 0x4dfc <command_common+0x3c>
            switch_default_layer((code - KC_F1) + 1);
    5266:	89 53       	subi	r24, 0x39	; 57
    5268:	0a ce       	rjmp	.-1004   	; 0x4e7e <command_common+0xbe>

0000526a <command_extra>:
}
    526a:	80 e0       	ldi	r24, 0x00	; 0
    526c:	08 95       	ret

0000526e <command_console_extra>:
    526e:	0c 94 35 29 	jmp	0x526a	; 0x526a <command_extra>

00005272 <command_proc>:
{
    5272:	cf 93       	push	r28
    5274:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5276:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <command_state>
    527a:	81 30       	cpi	r24, 0x01	; 1
    527c:	d1 f0       	breq	.+52     	; 0x52b2 <command_proc+0x40>
    527e:	38 f0       	brcs	.+14     	; 0x528e <command_proc+0x1c>
    5280:	82 30       	cpi	r24, 0x02	; 2
    5282:	09 f4       	brne	.+2      	; 0x5286 <command_proc+0x14>
    5284:	4d c0       	rjmp	.+154    	; 0x5320 <command_proc+0xae>
            command_state = ONESHOT;
    5286:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <command_state>
                return false;
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	10 c0       	rjmp	.+32     	; 0x52ae <command_proc+0x3c>
            if (!IS_COMMAND())
    528e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    5292:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    5296:	80 81       	ld	r24, Z
    5298:	82 32       	cpi	r24, 0x22	; 34
    529a:	b9 f7       	brne	.-18     	; 0x528a <command_proc+0x18>
                return (command_extra(code) || command_common(code));
    529c:	8c 2f       	mov	r24, r28
    529e:	0e 94 35 29 	call	0x526a	; 0x526a <command_extra>
    52a2:	81 11       	cpse	r24, r1
    52a4:	1e c0       	rjmp	.+60     	; 0x52e2 <command_proc+0x70>
    52a6:	8c 2f       	mov	r24, r28
    52a8:	0e 94 e0 26 	call	0x4dc0	; 0x4dc0 <command_common>
                return (command_console_extra(code) || command_console(code));
    52ac:	81 70       	andi	r24, 0x01	; 1
}
    52ae:	cf 91       	pop	r28
    52b0:	08 95       	ret
            if (IS_COMMAND())
    52b2:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    52b6:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    52ba:	80 81       	ld	r24, Z
    52bc:	82 32       	cpi	r24, 0x22	; 34
    52be:	71 f3       	breq	.-36     	; 0x529c <command_proc+0x2a>
                return (command_console_extra(code) || command_console(code));
    52c0:	8c 2f       	mov	r24, r28
    52c2:	0e 94 37 29 	call	0x526e	; 0x526e <command_console_extra>
    52c6:	81 11       	cpse	r24, r1
    52c8:	1b c0       	rjmp	.+54     	; 0x5300 <command_proc+0x8e>
    switch (code) {
    52ca:	c4 31       	cpi	r28, 0x14	; 20
    52cc:	d9 f0       	breq	.+54     	; 0x5304 <command_proc+0x92>
    52ce:	60 f4       	brcc	.+24     	; 0x52e8 <command_proc+0x76>
    52d0:	cb 30       	cpi	r28, 0x0B	; 11
    52d2:	71 f0       	breq	.+28     	; 0x52f0 <command_proc+0x7e>
    52d4:	c0 31       	cpi	r28, 0x10	; 16
    52d6:	d1 f0       	breq	.+52     	; 0x530c <command_proc+0x9a>
            print("?");
    52d8:	82 e4       	ldi	r24, 0x42	; 66
    52da:	99 e0       	ldi	r25, 0x09	; 9
    52dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    52e0:	13 c0       	rjmp	.+38     	; 0x5308 <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	e2 cf       	rjmp	.-60     	; 0x52ac <command_proc+0x3a>
    switch (code) {
    52e8:	c9 32       	cpi	r28, 0x29	; 41
    52ea:	61 f0       	breq	.+24     	; 0x5304 <command_proc+0x92>
    52ec:	c8 33       	cpi	r28, 0x38	; 56
    52ee:	a1 f7       	brne	.-24     	; 0x52d8 <command_proc+0x66>
    print("\n\t- Console -\n"
    52f0:	81 e5       	ldi	r24, 0x51	; 81
    52f2:	99 e0       	ldi	r25, 0x09	; 9
    52f4:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("C> ");
    52f8:	88 e4       	ldi	r24, 0x48	; 72
    52fa:	99 e0       	ldi	r25, 0x09	; 9
    52fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
                return (command_console_extra(code) || command_console(code));
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	d4 cf       	rjmp	.-88     	; 0x52ac <command_proc+0x3a>
            command_state = ONESHOT;
    5304:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <command_state>
                return (command_console_extra(code) || command_console(code));
    5308:	80 e0       	ldi	r24, 0x00	; 0
    530a:	d0 cf       	rjmp	.-96     	; 0x52ac <command_proc+0x3a>
            mousekey_console_help();
    530c:	0e 94 88 25 	call	0x4b10	; 0x4b10 <mousekey_console_help>
            print("M> ");
    5310:	84 e4       	ldi	r24, 0x44	; 68
    5312:	99 e0       	ldi	r25, 0x09	; 9
    5314:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
            command_state = MOUSEKEY;
    5318:	82 e0       	ldi	r24, 0x02	; 2
    531a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    531e:	f0 cf       	rjmp	.-32     	; 0x5300 <command_proc+0x8e>
    switch (code) {
    5320:	c4 32       	cpi	r28, 0x24	; 36
    5322:	c8 f4       	brcc	.+50     	; 0x5356 <command_proc+0xe4>
    5324:	ce 31       	cpi	r28, 0x1E	; 30
    5326:	08 f0       	brcs	.+2      	; 0x532a <command_proc+0xb8>
    5328:	be c0       	rjmp	.+380    	; 0x54a6 <command_proc+0x234>
    532a:	cb 30       	cpi	r28, 0x0B	; 11
    532c:	e1 f0       	breq	.+56     	; 0x5366 <command_proc+0xf4>
    532e:	40 f4       	brcc	.+16     	; 0x5340 <command_proc+0xce>
    5330:	c7 30       	cpi	r28, 0x07	; 7
    5332:	09 f4       	brne	.+2      	; 0x5336 <command_proc+0xc4>
    5334:	cf c0       	rjmp	.+414    	; 0x54d4 <command_proc+0x262>
            print("?");
    5336:	86 ee       	ldi	r24, 0xE6	; 230
    5338:	97 e0       	ldi	r25, 0x07	; 7
        print("M>" );
    533a:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    533e:	26 c0       	rjmp	.+76     	; 0x538c <command_proc+0x11a>
    switch (code) {
    5340:	c3 31       	cpi	r28, 0x13	; 19
    5342:	c1 f1       	breq	.+112    	; 0x53b4 <command_proc+0x142>
    5344:	c4 31       	cpi	r28, 0x14	; 20
    5346:	b9 f7       	brne	.-18     	; 0x5336 <command_proc+0xc4>
            if (mousekey_param) {
    5348:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    534c:	88 23       	and	r24, r24
    534e:	51 f1       	breq	.+84     	; 0x53a4 <command_proc+0x132>
                mousekey_param = 0;
    5350:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <mousekey_param>
    5354:	0a c0       	rjmp	.+20     	; 0x536a <command_proc+0xf8>
    switch (code) {
    5356:	cb 34       	cpi	r28, 0x4B	; 75
    5358:	09 f4       	brne	.+2      	; 0x535c <command_proc+0xea>
    535a:	ba c0       	rjmp	.+372    	; 0x54d0 <command_proc+0x25e>
    535c:	c8 f4       	brcc	.+50     	; 0x5390 <command_proc+0x11e>
    535e:	c9 32       	cpi	r28, 0x29	; 41
    5360:	99 f3       	breq	.-26     	; 0x5348 <command_proc+0xd6>
    5362:	c8 33       	cpi	r28, 0x38	; 56
    5364:	41 f7       	brne	.-48     	; 0x5336 <command_proc+0xc4>
            mousekey_console_help();
    5366:	0e 94 88 25 	call	0x4b10	; 0x4b10 <mousekey_console_help>
    if (mousekey_param) {
    536a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    536e:	88 23       	and	r24, r24
    5370:	09 f4       	brne	.+2      	; 0x5374 <command_proc+0x102>
    5372:	c7 c0       	rjmp	.+398    	; 0x5502 <command_proc+0x290>
        xprintf("M%d> ", mousekey_param);
    5374:	1f 92       	push	r1
    5376:	8f 93       	push	r24
    5378:	80 ee       	ldi	r24, 0xE0	; 224
    537a:	97 e0       	ldi	r25, 0x07	; 7
    537c:	9f 93       	push	r25
    537e:	8f 93       	push	r24
    5380:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	0f 90       	pop	r0
    return true;
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	8f cf       	rjmp	.-226    	; 0x52ae <command_proc+0x3c>
    switch (code) {
    5390:	c1 35       	cpi	r28, 0x51	; 81
    5392:	09 f4       	brne	.+2      	; 0x5396 <command_proc+0x124>
    5394:	97 c0       	rjmp	.+302    	; 0x54c4 <command_proc+0x252>
    5396:	c2 35       	cpi	r28, 0x52	; 82
    5398:	09 f4       	brne	.+2      	; 0x539c <command_proc+0x12a>
    539a:	8e c0       	rjmp	.+284    	; 0x54b8 <command_proc+0x246>
    539c:	ce 34       	cpi	r28, 0x4E	; 78
    539e:	59 f6       	brne	.-106    	; 0x5336 <command_proc+0xc4>
            mousekey_param_dec(mousekey_param, 10);
    53a0:	6a e0       	ldi	r22, 0x0A	; 10
    53a2:	91 c0       	rjmp	.+290    	; 0x54c6 <command_proc+0x254>
                print("C> ");
    53a4:	85 ef       	ldi	r24, 0xF5	; 245
    53a6:	97 e0       	ldi	r25, 0x07	; 7
    53a8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
                command_state = CONSOLE;
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    53b2:	7d cf       	rjmp	.-262    	; 0x52ae <command_proc+0x3c>
    print("\n\t- Values -\n");
    53b4:	8f ec       	ldi	r24, 0xCF	; 207
    53b6:	97 e0       	ldi	r25, 0x07	; 7
    53b8:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    53bc:	8d eb       	ldi	r24, 0xBD	; 189
    53be:	97 e0       	ldi	r25, 0x07	; 7
    53c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    53c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    53c8:	1f 92       	push	r1
    53ca:	8f 93       	push	r24
    53cc:	8a eb       	ldi	r24, 0xBA	; 186
    53ce:	97 e0       	ldi	r25, 0x07	; 7
    53d0:	9f 93       	push	r25
    53d2:	8f 93       	push	r24
    53d4:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    53d8:	88 eb       	ldi	r24, 0xB8	; 184
    53da:	97 e0       	ldi	r25, 0x07	; 7
    53dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    53e0:	86 ea       	ldi	r24, 0xA6	; 166
    53e2:	97 e0       	ldi	r25, 0x07	; 7
    53e4:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    53e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    53ec:	1f 92       	push	r1
    53ee:	8f 93       	push	r24
    53f0:	83 ea       	ldi	r24, 0xA3	; 163
    53f2:	97 e0       	ldi	r25, 0x07	; 7
    53f4:	9f 93       	push	r25
    53f6:	8f 93       	push	r24
    53f8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    53fc:	81 ea       	ldi	r24, 0xA1	; 161
    53fe:	97 e0       	ldi	r25, 0x07	; 7
    5400:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5404:	82 e9       	ldi	r24, 0x92	; 146
    5406:	97 e0       	ldi	r25, 0x07	; 7
    5408:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    540c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    5410:	1f 92       	push	r1
    5412:	8f 93       	push	r24
    5414:	8f e8       	ldi	r24, 0x8F	; 143
    5416:	97 e0       	ldi	r25, 0x07	; 7
    5418:	9f 93       	push	r25
    541a:	8f 93       	push	r24
    541c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5420:	8d e8       	ldi	r24, 0x8D	; 141
    5422:	97 e0       	ldi	r25, 0x07	; 7
    5424:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5428:	8c e7       	ldi	r24, 0x7C	; 124
    542a:	97 e0       	ldi	r25, 0x07	; 7
    542c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5430:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    5434:	1f 92       	push	r1
    5436:	8f 93       	push	r24
    5438:	89 e7       	ldi	r24, 0x79	; 121
    543a:	97 e0       	ldi	r25, 0x07	; 7
    543c:	9f 93       	push	r25
    543e:	8f 93       	push	r24
    5440:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5444:	87 e7       	ldi	r24, 0x77	; 119
    5446:	97 e0       	ldi	r25, 0x07	; 7
    5448:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    544c:	82 e6       	ldi	r24, 0x62	; 98
    544e:	97 e0       	ldi	r25, 0x07	; 7
    5450:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5454:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    5458:	1f 92       	push	r1
    545a:	8f 93       	push	r24
    545c:	8f e5       	ldi	r24, 0x5F	; 95
    545e:	97 e0       	ldi	r25, 0x07	; 7
    5460:	9f 93       	push	r25
    5462:	8f 93       	push	r24
    5464:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    5468:	8d e5       	ldi	r24, 0x5D	; 93
    546a:	97 e0       	ldi	r25, 0x07	; 7
    546c:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5470:	86 e4       	ldi	r24, 0x46	; 70
    5472:	97 e0       	ldi	r25, 0x07	; 7
    5474:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5478:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    547c:	1f 92       	push	r1
    547e:	8f 93       	push	r24
    5480:	83 e4       	ldi	r24, 0x43	; 67
    5482:	97 e0       	ldi	r25, 0x07	; 7
    5484:	9f 93       	push	r25
    5486:	8f 93       	push	r24
    5488:	0e 94 b0 07 	call	0xf60	; 0xf60 <__xprintf>
    548c:	81 e4       	ldi	r24, 0x41	; 65
    548e:	97 e0       	ldi	r25, 0x07	; 7
    5490:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5494:	8d b7       	in	r24, 0x3d	; 61
    5496:	9e b7       	in	r25, 0x3e	; 62
    5498:	48 96       	adiw	r24, 0x18	; 24
    549a:	0f b6       	in	r0, 0x3f	; 63
    549c:	f8 94       	cli
    549e:	9e bf       	out	0x3e, r25	; 62
    54a0:	0f be       	out	0x3f, r0	; 63
    54a2:	8d bf       	out	0x3d, r24	; 61
    54a4:	62 cf       	rjmp	.-316    	; 0x536a <command_proc+0xf8>
            mousekey_param = numkey2num(code);
    54a6:	ce 51       	subi	r28, 0x1E	; 30
    54a8:	ec 2f       	mov	r30, r28
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	e1 5d       	subi	r30, 0xD1	; 209
    54ae:	fe 4f       	sbci	r31, 0xFE	; 254
    54b0:	80 81       	ld	r24, Z
    54b2:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <mousekey_param>
    54b6:	59 cf       	rjmp	.-334    	; 0x536a <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 1);
    54b8:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    54ba:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    54be:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <mousekey_param_inc>
    54c2:	53 cf       	rjmp	.-346    	; 0x536a <command_proc+0xf8>
            mousekey_param_dec(mousekey_param, 1);
    54c4:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    54c6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    54ca:	0e 94 43 26 	call	0x4c86	; 0x4c86 <mousekey_param_dec>
    54ce:	4d cf       	rjmp	.-358    	; 0x536a <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 10);
    54d0:	6a e0       	ldi	r22, 0x0A	; 10
    54d2:	f3 cf       	rjmp	.-26     	; 0x54ba <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    54d4:	8e e1       	ldi	r24, 0x1E	; 30
    54d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    54da:	82 e3       	ldi	r24, 0x32	; 50
    54dc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    54e0:	8a e0       	ldi	r24, 0x0A	; 10
    54e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    54e6:	84 e1       	ldi	r24, 0x14	; 20
    54e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    54ec:	88 e0       	ldi	r24, 0x08	; 8
    54ee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    54f2:	88 e2       	ldi	r24, 0x28	; 40
    54f4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            print("set default\n");
    54f8:	88 ee       	ldi	r24, 0xE8	; 232
    54fa:	97 e0       	ldi	r25, 0x07	; 7
    54fc:	0e 94 17 07 	call	0xe2e	; 0xe2e <xputs>
    5500:	34 cf       	rjmp	.-408    	; 0x536a <command_proc+0xf8>
        print("M>" );
    5502:	8d ed       	ldi	r24, 0xDD	; 221
    5504:	97 e0       	ldi	r25, 0x07	; 7
    5506:	19 cf       	rjmp	.-462    	; 0x533a <command_proc+0xc8>

00005508 <__fixsfsi>:
    5508:	0e 94 8b 2a 	call	0x5516	; 0x5516 <__fixunssfsi>
    550c:	68 94       	set
    550e:	b1 11       	cpse	r27, r1
    5510:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__fp_szero>
    5514:	08 95       	ret

00005516 <__fixunssfsi>:
    5516:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <__fp_splitA>
    551a:	88 f0       	brcs	.+34     	; 0x553e <__fixunssfsi+0x28>
    551c:	9f 57       	subi	r25, 0x7F	; 127
    551e:	98 f0       	brcs	.+38     	; 0x5546 <__fixunssfsi+0x30>
    5520:	b9 2f       	mov	r27, r25
    5522:	99 27       	eor	r25, r25
    5524:	b7 51       	subi	r27, 0x17	; 23
    5526:	b0 f0       	brcs	.+44     	; 0x5554 <__fixunssfsi+0x3e>
    5528:	e1 f0       	breq	.+56     	; 0x5562 <__fixunssfsi+0x4c>
    552a:	66 0f       	add	r22, r22
    552c:	77 1f       	adc	r23, r23
    552e:	88 1f       	adc	r24, r24
    5530:	99 1f       	adc	r25, r25
    5532:	1a f0       	brmi	.+6      	; 0x553a <__fixunssfsi+0x24>
    5534:	ba 95       	dec	r27
    5536:	c9 f7       	brne	.-14     	; 0x552a <__fixunssfsi+0x14>
    5538:	14 c0       	rjmp	.+40     	; 0x5562 <__fixunssfsi+0x4c>
    553a:	b1 30       	cpi	r27, 0x01	; 1
    553c:	91 f0       	breq	.+36     	; 0x5562 <__fixunssfsi+0x4c>
    553e:	0e 94 19 2b 	call	0x5632	; 0x5632 <__fp_zero>
    5542:	b1 e0       	ldi	r27, 0x01	; 1
    5544:	08 95       	ret
    5546:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__fp_zero>
    554a:	67 2f       	mov	r22, r23
    554c:	78 2f       	mov	r23, r24
    554e:	88 27       	eor	r24, r24
    5550:	b8 5f       	subi	r27, 0xF8	; 248
    5552:	39 f0       	breq	.+14     	; 0x5562 <__fixunssfsi+0x4c>
    5554:	b9 3f       	cpi	r27, 0xF9	; 249
    5556:	cc f3       	brlt	.-14     	; 0x554a <__fixunssfsi+0x34>
    5558:	86 95       	lsr	r24
    555a:	77 95       	ror	r23
    555c:	67 95       	ror	r22
    555e:	b3 95       	inc	r27
    5560:	d9 f7       	brne	.-10     	; 0x5558 <__fixunssfsi+0x42>
    5562:	3e f4       	brtc	.+14     	; 0x5572 <__fixunssfsi+0x5c>
    5564:	90 95       	com	r25
    5566:	80 95       	com	r24
    5568:	70 95       	com	r23
    556a:	61 95       	neg	r22
    556c:	7f 4f       	sbci	r23, 0xFF	; 255
    556e:	8f 4f       	sbci	r24, 0xFF	; 255
    5570:	9f 4f       	sbci	r25, 0xFF	; 255
    5572:	08 95       	ret

00005574 <__floatunsisf>:
    5574:	e8 94       	clt
    5576:	09 c0       	rjmp	.+18     	; 0x558a <__floatsisf+0x12>

00005578 <__floatsisf>:
    5578:	97 fb       	bst	r25, 7
    557a:	3e f4       	brtc	.+14     	; 0x558a <__floatsisf+0x12>
    557c:	90 95       	com	r25
    557e:	80 95       	com	r24
    5580:	70 95       	com	r23
    5582:	61 95       	neg	r22
    5584:	7f 4f       	sbci	r23, 0xFF	; 255
    5586:	8f 4f       	sbci	r24, 0xFF	; 255
    5588:	9f 4f       	sbci	r25, 0xFF	; 255
    558a:	99 23       	and	r25, r25
    558c:	a9 f0       	breq	.+42     	; 0x55b8 <__floatsisf+0x40>
    558e:	f9 2f       	mov	r31, r25
    5590:	96 e9       	ldi	r25, 0x96	; 150
    5592:	bb 27       	eor	r27, r27
    5594:	93 95       	inc	r25
    5596:	f6 95       	lsr	r31
    5598:	87 95       	ror	r24
    559a:	77 95       	ror	r23
    559c:	67 95       	ror	r22
    559e:	b7 95       	ror	r27
    55a0:	f1 11       	cpse	r31, r1
    55a2:	f8 cf       	rjmp	.-16     	; 0x5594 <__floatsisf+0x1c>
    55a4:	fa f4       	brpl	.+62     	; 0x55e4 <__floatsisf+0x6c>
    55a6:	bb 0f       	add	r27, r27
    55a8:	11 f4       	brne	.+4      	; 0x55ae <__floatsisf+0x36>
    55aa:	60 ff       	sbrs	r22, 0
    55ac:	1b c0       	rjmp	.+54     	; 0x55e4 <__floatsisf+0x6c>
    55ae:	6f 5f       	subi	r22, 0xFF	; 255
    55b0:	7f 4f       	sbci	r23, 0xFF	; 255
    55b2:	8f 4f       	sbci	r24, 0xFF	; 255
    55b4:	9f 4f       	sbci	r25, 0xFF	; 255
    55b6:	16 c0       	rjmp	.+44     	; 0x55e4 <__floatsisf+0x6c>
    55b8:	88 23       	and	r24, r24
    55ba:	11 f0       	breq	.+4      	; 0x55c0 <__floatsisf+0x48>
    55bc:	96 e9       	ldi	r25, 0x96	; 150
    55be:	11 c0       	rjmp	.+34     	; 0x55e2 <__floatsisf+0x6a>
    55c0:	77 23       	and	r23, r23
    55c2:	21 f0       	breq	.+8      	; 0x55cc <__floatsisf+0x54>
    55c4:	9e e8       	ldi	r25, 0x8E	; 142
    55c6:	87 2f       	mov	r24, r23
    55c8:	76 2f       	mov	r23, r22
    55ca:	05 c0       	rjmp	.+10     	; 0x55d6 <__floatsisf+0x5e>
    55cc:	66 23       	and	r22, r22
    55ce:	71 f0       	breq	.+28     	; 0x55ec <__floatsisf+0x74>
    55d0:	96 e8       	ldi	r25, 0x86	; 134
    55d2:	86 2f       	mov	r24, r22
    55d4:	70 e0       	ldi	r23, 0x00	; 0
    55d6:	60 e0       	ldi	r22, 0x00	; 0
    55d8:	2a f0       	brmi	.+10     	; 0x55e4 <__floatsisf+0x6c>
    55da:	9a 95       	dec	r25
    55dc:	66 0f       	add	r22, r22
    55de:	77 1f       	adc	r23, r23
    55e0:	88 1f       	adc	r24, r24
    55e2:	da f7       	brpl	.-10     	; 0x55da <__floatsisf+0x62>
    55e4:	88 0f       	add	r24, r24
    55e6:	96 95       	lsr	r25
    55e8:	87 95       	ror	r24
    55ea:	97 f9       	bld	r25, 7
    55ec:	08 95       	ret

000055ee <__fp_split3>:
    55ee:	57 fd       	sbrc	r21, 7
    55f0:	90 58       	subi	r25, 0x80	; 128
    55f2:	44 0f       	add	r20, r20
    55f4:	55 1f       	adc	r21, r21
    55f6:	59 f0       	breq	.+22     	; 0x560e <__fp_splitA+0x10>
    55f8:	5f 3f       	cpi	r21, 0xFF	; 255
    55fa:	71 f0       	breq	.+28     	; 0x5618 <__fp_splitA+0x1a>
    55fc:	47 95       	ror	r20

000055fe <__fp_splitA>:
    55fe:	88 0f       	add	r24, r24
    5600:	97 fb       	bst	r25, 7
    5602:	99 1f       	adc	r25, r25
    5604:	61 f0       	breq	.+24     	; 0x561e <__fp_splitA+0x20>
    5606:	9f 3f       	cpi	r25, 0xFF	; 255
    5608:	79 f0       	breq	.+30     	; 0x5628 <__fp_splitA+0x2a>
    560a:	87 95       	ror	r24
    560c:	08 95       	ret
    560e:	12 16       	cp	r1, r18
    5610:	13 06       	cpc	r1, r19
    5612:	14 06       	cpc	r1, r20
    5614:	55 1f       	adc	r21, r21
    5616:	f2 cf       	rjmp	.-28     	; 0x55fc <__fp_split3+0xe>
    5618:	46 95       	lsr	r20
    561a:	f1 df       	rcall	.-30     	; 0x55fe <__fp_splitA>
    561c:	08 c0       	rjmp	.+16     	; 0x562e <__fp_splitA+0x30>
    561e:	16 16       	cp	r1, r22
    5620:	17 06       	cpc	r1, r23
    5622:	18 06       	cpc	r1, r24
    5624:	99 1f       	adc	r25, r25
    5626:	f1 cf       	rjmp	.-30     	; 0x560a <__fp_splitA+0xc>
    5628:	86 95       	lsr	r24
    562a:	71 05       	cpc	r23, r1
    562c:	61 05       	cpc	r22, r1
    562e:	08 94       	sec
    5630:	08 95       	ret

00005632 <__fp_zero>:
    5632:	e8 94       	clt

00005634 <__fp_szero>:
    5634:	bb 27       	eor	r27, r27
    5636:	66 27       	eor	r22, r22
    5638:	77 27       	eor	r23, r23
    563a:	cb 01       	movw	r24, r22
    563c:	97 f9       	bld	r25, 7
    563e:	08 95       	ret

00005640 <__mulsf3>:
    5640:	0e 94 33 2b 	call	0x5666	; 0x5666 <__mulsf3x>
    5644:	0c 94 a4 2b 	jmp	0x5748	; 0x5748 <__fp_round>
    5648:	0e 94 96 2b 	call	0x572c	; 0x572c <__fp_pscA>
    564c:	38 f0       	brcs	.+14     	; 0x565c <__mulsf3+0x1c>
    564e:	0e 94 9d 2b 	call	0x573a	; 0x573a <__fp_pscB>
    5652:	20 f0       	brcs	.+8      	; 0x565c <__mulsf3+0x1c>
    5654:	95 23       	and	r25, r21
    5656:	11 f0       	breq	.+4      	; 0x565c <__mulsf3+0x1c>
    5658:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <__fp_inf>
    565c:	0c 94 93 2b 	jmp	0x5726	; 0x5726 <__fp_nan>
    5660:	11 24       	eor	r1, r1
    5662:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__fp_szero>

00005666 <__mulsf3x>:
    5666:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <__fp_split3>
    566a:	70 f3       	brcs	.-36     	; 0x5648 <__mulsf3+0x8>

0000566c <__mulsf3_pse>:
    566c:	95 9f       	mul	r25, r21
    566e:	c1 f3       	breq	.-16     	; 0x5660 <__mulsf3+0x20>
    5670:	95 0f       	add	r25, r21
    5672:	50 e0       	ldi	r21, 0x00	; 0
    5674:	55 1f       	adc	r21, r21
    5676:	62 9f       	mul	r22, r18
    5678:	f0 01       	movw	r30, r0
    567a:	72 9f       	mul	r23, r18
    567c:	bb 27       	eor	r27, r27
    567e:	f0 0d       	add	r31, r0
    5680:	b1 1d       	adc	r27, r1
    5682:	63 9f       	mul	r22, r19
    5684:	aa 27       	eor	r26, r26
    5686:	f0 0d       	add	r31, r0
    5688:	b1 1d       	adc	r27, r1
    568a:	aa 1f       	adc	r26, r26
    568c:	64 9f       	mul	r22, r20
    568e:	66 27       	eor	r22, r22
    5690:	b0 0d       	add	r27, r0
    5692:	a1 1d       	adc	r26, r1
    5694:	66 1f       	adc	r22, r22
    5696:	82 9f       	mul	r24, r18
    5698:	22 27       	eor	r18, r18
    569a:	b0 0d       	add	r27, r0
    569c:	a1 1d       	adc	r26, r1
    569e:	62 1f       	adc	r22, r18
    56a0:	73 9f       	mul	r23, r19
    56a2:	b0 0d       	add	r27, r0
    56a4:	a1 1d       	adc	r26, r1
    56a6:	62 1f       	adc	r22, r18
    56a8:	83 9f       	mul	r24, r19
    56aa:	a0 0d       	add	r26, r0
    56ac:	61 1d       	adc	r22, r1
    56ae:	22 1f       	adc	r18, r18
    56b0:	74 9f       	mul	r23, r20
    56b2:	33 27       	eor	r19, r19
    56b4:	a0 0d       	add	r26, r0
    56b6:	61 1d       	adc	r22, r1
    56b8:	23 1f       	adc	r18, r19
    56ba:	84 9f       	mul	r24, r20
    56bc:	60 0d       	add	r22, r0
    56be:	21 1d       	adc	r18, r1
    56c0:	82 2f       	mov	r24, r18
    56c2:	76 2f       	mov	r23, r22
    56c4:	6a 2f       	mov	r22, r26
    56c6:	11 24       	eor	r1, r1
    56c8:	9f 57       	subi	r25, 0x7F	; 127
    56ca:	50 40       	sbci	r21, 0x00	; 0
    56cc:	9a f0       	brmi	.+38     	; 0x56f4 <__mulsf3_pse+0x88>
    56ce:	f1 f0       	breq	.+60     	; 0x570c <__mulsf3_pse+0xa0>
    56d0:	88 23       	and	r24, r24
    56d2:	4a f0       	brmi	.+18     	; 0x56e6 <__mulsf3_pse+0x7a>
    56d4:	ee 0f       	add	r30, r30
    56d6:	ff 1f       	adc	r31, r31
    56d8:	bb 1f       	adc	r27, r27
    56da:	66 1f       	adc	r22, r22
    56dc:	77 1f       	adc	r23, r23
    56de:	88 1f       	adc	r24, r24
    56e0:	91 50       	subi	r25, 0x01	; 1
    56e2:	50 40       	sbci	r21, 0x00	; 0
    56e4:	a9 f7       	brne	.-22     	; 0x56d0 <__mulsf3_pse+0x64>
    56e6:	9e 3f       	cpi	r25, 0xFE	; 254
    56e8:	51 05       	cpc	r21, r1
    56ea:	80 f0       	brcs	.+32     	; 0x570c <__mulsf3_pse+0xa0>
    56ec:	0c 94 8d 2b 	jmp	0x571a	; 0x571a <__fp_inf>
    56f0:	0c 94 1a 2b 	jmp	0x5634	; 0x5634 <__fp_szero>
    56f4:	5f 3f       	cpi	r21, 0xFF	; 255
    56f6:	e4 f3       	brlt	.-8      	; 0x56f0 <__mulsf3_pse+0x84>
    56f8:	98 3e       	cpi	r25, 0xE8	; 232
    56fa:	d4 f3       	brlt	.-12     	; 0x56f0 <__mulsf3_pse+0x84>
    56fc:	86 95       	lsr	r24
    56fe:	77 95       	ror	r23
    5700:	67 95       	ror	r22
    5702:	b7 95       	ror	r27
    5704:	f7 95       	ror	r31
    5706:	e7 95       	ror	r30
    5708:	9f 5f       	subi	r25, 0xFF	; 255
    570a:	c1 f7       	brne	.-16     	; 0x56fc <__mulsf3_pse+0x90>
    570c:	fe 2b       	or	r31, r30
    570e:	88 0f       	add	r24, r24
    5710:	91 1d       	adc	r25, r1
    5712:	96 95       	lsr	r25
    5714:	87 95       	ror	r24
    5716:	97 f9       	bld	r25, 7
    5718:	08 95       	ret

0000571a <__fp_inf>:
    571a:	97 f9       	bld	r25, 7
    571c:	9f 67       	ori	r25, 0x7F	; 127
    571e:	80 e8       	ldi	r24, 0x80	; 128
    5720:	70 e0       	ldi	r23, 0x00	; 0
    5722:	60 e0       	ldi	r22, 0x00	; 0
    5724:	08 95       	ret

00005726 <__fp_nan>:
    5726:	9f ef       	ldi	r25, 0xFF	; 255
    5728:	80 ec       	ldi	r24, 0xC0	; 192
    572a:	08 95       	ret

0000572c <__fp_pscA>:
    572c:	00 24       	eor	r0, r0
    572e:	0a 94       	dec	r0
    5730:	16 16       	cp	r1, r22
    5732:	17 06       	cpc	r1, r23
    5734:	18 06       	cpc	r1, r24
    5736:	09 06       	cpc	r0, r25
    5738:	08 95       	ret

0000573a <__fp_pscB>:
    573a:	00 24       	eor	r0, r0
    573c:	0a 94       	dec	r0
    573e:	12 16       	cp	r1, r18
    5740:	13 06       	cpc	r1, r19
    5742:	14 06       	cpc	r1, r20
    5744:	05 06       	cpc	r0, r21
    5746:	08 95       	ret

00005748 <__fp_round>:
    5748:	09 2e       	mov	r0, r25
    574a:	03 94       	inc	r0
    574c:	00 0c       	add	r0, r0
    574e:	11 f4       	brne	.+4      	; 0x5754 <__fp_round+0xc>
    5750:	88 23       	and	r24, r24
    5752:	52 f0       	brmi	.+20     	; 0x5768 <__fp_round+0x20>
    5754:	bb 0f       	add	r27, r27
    5756:	40 f4       	brcc	.+16     	; 0x5768 <__fp_round+0x20>
    5758:	bf 2b       	or	r27, r31
    575a:	11 f4       	brne	.+4      	; 0x5760 <__fp_round+0x18>
    575c:	60 ff       	sbrs	r22, 0
    575e:	04 c0       	rjmp	.+8      	; 0x5768 <__fp_round+0x20>
    5760:	6f 5f       	subi	r22, 0xFF	; 255
    5762:	7f 4f       	sbci	r23, 0xFF	; 255
    5764:	8f 4f       	sbci	r24, 0xFF	; 255
    5766:	9f 4f       	sbci	r25, 0xFF	; 255
    5768:	08 95       	ret

0000576a <__udivmodqi4>:
    576a:	99 1b       	sub	r25, r25
    576c:	79 e0       	ldi	r23, 0x09	; 9
    576e:	04 c0       	rjmp	.+8      	; 0x5778 <__udivmodqi4_ep>

00005770 <__udivmodqi4_loop>:
    5770:	99 1f       	adc	r25, r25
    5772:	96 17       	cp	r25, r22
    5774:	08 f0       	brcs	.+2      	; 0x5778 <__udivmodqi4_ep>
    5776:	96 1b       	sub	r25, r22

00005778 <__udivmodqi4_ep>:
    5778:	88 1f       	adc	r24, r24
    577a:	7a 95       	dec	r23
    577c:	c9 f7       	brne	.-14     	; 0x5770 <__udivmodqi4_loop>
    577e:	80 95       	com	r24
    5780:	08 95       	ret

00005782 <__divmodhi4>:
    5782:	97 fb       	bst	r25, 7
    5784:	07 2e       	mov	r0, r23
    5786:	16 f4       	brtc	.+4      	; 0x578c <__divmodhi4+0xa>
    5788:	00 94       	com	r0
    578a:	07 d0       	rcall	.+14     	; 0x579a <__divmodhi4_neg1>
    578c:	77 fd       	sbrc	r23, 7
    578e:	09 d0       	rcall	.+18     	; 0x57a2 <__divmodhi4_neg2>
    5790:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__udivmodhi4>
    5794:	07 fc       	sbrc	r0, 7
    5796:	05 d0       	rcall	.+10     	; 0x57a2 <__divmodhi4_neg2>
    5798:	3e f4       	brtc	.+14     	; 0x57a8 <__divmodhi4_exit>

0000579a <__divmodhi4_neg1>:
    579a:	90 95       	com	r25
    579c:	81 95       	neg	r24
    579e:	9f 4f       	sbci	r25, 0xFF	; 255
    57a0:	08 95       	ret

000057a2 <__divmodhi4_neg2>:
    57a2:	70 95       	com	r23
    57a4:	61 95       	neg	r22
    57a6:	7f 4f       	sbci	r23, 0xFF	; 255

000057a8 <__divmodhi4_exit>:
    57a8:	08 95       	ret

000057aa <__tablejump2__>:
    57aa:	ee 0f       	add	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	05 90       	lpm	r0, Z+
    57b0:	f4 91       	lpm	r31, Z
    57b2:	e0 2d       	mov	r30, r0
    57b4:	09 94       	ijmp

000057b6 <__udivmodhi4>:
    57b6:	aa 1b       	sub	r26, r26
    57b8:	bb 1b       	sub	r27, r27
    57ba:	51 e1       	ldi	r21, 0x11	; 17
    57bc:	07 c0       	rjmp	.+14     	; 0x57cc <__udivmodhi4_ep>

000057be <__udivmodhi4_loop>:
    57be:	aa 1f       	adc	r26, r26
    57c0:	bb 1f       	adc	r27, r27
    57c2:	a6 17       	cp	r26, r22
    57c4:	b7 07       	cpc	r27, r23
    57c6:	10 f0       	brcs	.+4      	; 0x57cc <__udivmodhi4_ep>
    57c8:	a6 1b       	sub	r26, r22
    57ca:	b7 0b       	sbc	r27, r23

000057cc <__udivmodhi4_ep>:
    57cc:	88 1f       	adc	r24, r24
    57ce:	99 1f       	adc	r25, r25
    57d0:	5a 95       	dec	r21
    57d2:	a9 f7       	brne	.-22     	; 0x57be <__udivmodhi4_loop>
    57d4:	80 95       	com	r24
    57d6:	90 95       	com	r25
    57d8:	bc 01       	movw	r22, r24
    57da:	cd 01       	movw	r24, r26
    57dc:	08 95       	ret

000057de <eeprom_read_byte>:
    57de:	f9 99       	sbic	0x1f, 1	; 31
    57e0:	fe cf       	rjmp	.-4      	; 0x57de <eeprom_read_byte>
    57e2:	92 bd       	out	0x22, r25	; 34
    57e4:	81 bd       	out	0x21, r24	; 33
    57e6:	f8 9a       	sbi	0x1f, 0	; 31
    57e8:	99 27       	eor	r25, r25
    57ea:	80 b5       	in	r24, 0x20	; 32
    57ec:	08 95       	ret

000057ee <eeprom_read_word>:
    57ee:	a8 e1       	ldi	r26, 0x18	; 24
    57f0:	b0 e0       	ldi	r27, 0x00	; 0
    57f2:	42 e0       	ldi	r20, 0x02	; 2
    57f4:	50 e0       	ldi	r21, 0x00	; 0
    57f6:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <eeprom_read_blraw>

000057fa <eeprom_write_byte>:
    57fa:	26 2f       	mov	r18, r22

000057fc <eeprom_write_r18>:
    57fc:	f9 99       	sbic	0x1f, 1	; 31
    57fe:	fe cf       	rjmp	.-4      	; 0x57fc <eeprom_write_r18>
    5800:	1f ba       	out	0x1f, r1	; 31
    5802:	92 bd       	out	0x22, r25	; 34
    5804:	81 bd       	out	0x21, r24	; 33
    5806:	20 bd       	out	0x20, r18	; 32
    5808:	0f b6       	in	r0, 0x3f	; 63
    580a:	f8 94       	cli
    580c:	fa 9a       	sbi	0x1f, 2	; 31
    580e:	f9 9a       	sbi	0x1f, 1	; 31
    5810:	0f be       	out	0x3f, r0	; 63
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	08 95       	ret

00005816 <eeprom_write_word>:
    5816:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <eeprom_write_byte>
    581a:	27 2f       	mov	r18, r23
    581c:	0c 94 fe 2b 	jmp	0x57fc	; 0x57fc <eeprom_write_r18>

00005820 <eeprom_read_block>:
    5820:	dc 01       	movw	r26, r24
    5822:	cb 01       	movw	r24, r22

00005824 <eeprom_read_blraw>:
    5824:	fc 01       	movw	r30, r24
    5826:	f9 99       	sbic	0x1f, 1	; 31
    5828:	fe cf       	rjmp	.-4      	; 0x5826 <eeprom_read_blraw+0x2>
    582a:	06 c0       	rjmp	.+12     	; 0x5838 <eeprom_read_blraw+0x14>
    582c:	f2 bd       	out	0x22, r31	; 34
    582e:	e1 bd       	out	0x21, r30	; 33
    5830:	f8 9a       	sbi	0x1f, 0	; 31
    5832:	31 96       	adiw	r30, 0x01	; 1
    5834:	00 b4       	in	r0, 0x20	; 32
    5836:	0d 92       	st	X+, r0
    5838:	41 50       	subi	r20, 0x01	; 1
    583a:	50 40       	sbci	r21, 0x00	; 0
    583c:	b8 f7       	brcc	.-18     	; 0x582c <eeprom_read_blraw+0x8>
    583e:	08 95       	ret

00005840 <_exit>:
    5840:	f8 94       	cli

00005842 <__stop_program>:
    5842:	ff cf       	rjmp	.-2      	; 0x5842 <__stop_program>
