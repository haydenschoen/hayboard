
haymakr_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000056fc  00005790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000056fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  0080013a  0080013a  000057ca  2**0
                  ALLOC
  3 .noinit       00000004  00800254  00800254  000057ca  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000057cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006138  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 000009f0  00000000  00000000  00006178  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00013449  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004ee1  00000000  00000000  00019fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008ed7  00000000  00000000  0001ee92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001aec  00000000  00000000  00027d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000042f2  00000000  00000000  00029858  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000095a9  00000000  00000000  0002db4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  000370f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__ctors_end>
       4:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
       8:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
       c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      10:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      14:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      18:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      1c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      20:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      24:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      28:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_10>
      2c:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_11>
      30:	0c 94 a6 1e 	jmp	0x3d4c	; 0x3d4c <__vector_12>
      34:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      38:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      3c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      40:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      44:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      48:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      4c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      50:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      54:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__vector_21>
      58:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      5c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      60:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      64:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      68:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      6c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      70:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      74:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      78:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      7c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      80:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      84:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      88:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      8c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      90:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      94:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      98:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      9c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      a0:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      a4:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>
      a8:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	01 e1       	ldi	r16, 0x11	; 17
      ae:	01 16       	cp	r0, r17
      b0:	02 16       	cp	r0, r18
      b2:	02 e1       	ldi	r16, 0x12	; 18
      b4:	01 18       	sub	r0, r1
      b6:	02 18       	sub	r0, r2
      b8:	01 13       	cpse	r16, r17
      ba:	02 13       	cpse	r16, r18
      bc:	01 08       	sbc	r0, r1
      be:	02 08       	sbc	r0, r2
      c0:	01 15       	cp	r16, r1
      c2:	02 15       	cp	r16, r2
      c4:	01 e1       	ldi	r16, 0x11	; 17
      c6:	01 13       	cpse	r16, r17
      c8:	02 13       	cpse	r16, r18
      ca:	02 e1       	ldi	r16, 0x12	; 18
      cc:	01 27       	eor	r16, r17
      ce:	02 27       	eor	r16, r18
      d0:	01 1a       	sub	r0, r17
      d2:	02 1a       	sub	r0, r18
      d4:	01 08       	sbc	r0, r1
      d6:	02 08       	sbc	r0, r2
      d8:	01 15       	cp	r16, r1
      da:	02 15       	cp	r16, r2
      dc:	01 e1       	ldi	r16, 0x11	; 17
      de:	01 10       	cpse	r0, r1
      e0:	02 10       	cpse	r0, r2
      e2:	02 e1       	ldi	r16, 0x12	; 18
      e4:	01 04       	cpc	r0, r1
      e6:	02 04       	cpc	r0, r2
      e8:	01 06       	cpc	r0, r17
      ea:	02 06       	cpc	r0, r18
      ec:	01 0b       	sbc	r16, r17
      ee:	02 0b       	sbc	r16, r18
      f0:	01 0c       	add	r0, r1
      f2:	02 0c       	add	r0, r2
      f4:	01 11       	cpse	r16, r1
      f6:	02 11       	cpse	r16, r2
      f8:	01 08       	sbc	r0, r1
      fa:	02 08       	sbc	r0, r2
      fc:	01 15       	cp	r16, r1
      fe:	02 15       	cp	r16, r2
     100:	01 1c       	adc	r0, r1
     102:	02 1c       	adc	r0, r2
     104:	Address 0x0000000000000104 is out of bounds.


00000105 <fn_actions>:
     105:	f1 a1 f1 a2 2d 08 2e 08 20 0a 21 0b 2f 08 30 08     ....-... .!./.0.
     115:	26 02 27 02 2f 02 30 02 31 02 2d 02 2e 02 00 c0     &.'./.0.1.-.....

00000125 <keymaps>:
     125:	35 1e 1f 20 21 22 00 00 00 23 24 25 26 27 2a 2b     5.. !"...#$%&'*+
     135:	14 1a 08 15 17 00 00 00 1c 18 0c 12 13 2d 29 04     .............-).
     145:	16 07 09 0a c2 00 c3 0b 0d 0e 0f 33 34 e1 1d 1b     ...........34...
     155:	06 19 05 00 52 00 11 10 36 37 38 28 b0 e0 e2 e3     ....R...678(....
     165:	c0 2c 50 51 4f 2c c1 e7 e6 e4 2e 01 3a 3b 3c 3d     .,PQO,......:;<=
     175:	3e 00 00 00 3f 40 41 42 43 01 01 cf 01 01 01 01     >...?@ABC.......
     185:	00 00 00 01 01 01 c8 c9 01 01 01 01 01 01 01 c4     ................
     195:	00 c5 01 2d 2e ca cb 31 01 01 01 01 01 01 00 a9     ...-...1........
     1a5:	00 01 cd ce 2f 30 cc a6 a7 01 01 01 01 ac aa ab     ..../0..........
     1b5:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 01     ................
     1c5:	24 25 26 54 01 01 01 01 01 01 01 00 00 00 01 21     $%&T...........!
     1d5:	22 23 55 01 01 01 01 01 01 01 c6 00 c7 01 1e 1f     "#U.............
     1e5:	20 56 67 01 01 01 01 01 01 00 a9 00 01 01 27 63      Vg...........'c
     1f5:	57 58 01 01 01 01 01 01 ac aa ab 01 01 01 01 01     WX..............
     205:	01                                                  .

00000206 <__c.1891>:
     206:	0a 00                                               ..

00000208 <__c.1889>:
     208:	25 30 32 58 00                                      %02X.

0000020d <__c.1887>:
     20d:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000217 <__c.4940>:
     217:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     227:	00                                                  .

00000228 <__c.4938>:
     228:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     238:	00                                                  .

00000239 <__c.4933>:
     239:	0d 0a 69 6e 69 74 0a 00                             ..init..

00000241 <__c.4827>:
     241:	5b 44 5d 00                                         [D].

00000245 <__c.4822>:
     245:	5b 43 5d 00                                         [C].

00000249 <ProductString>:
     249:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

00000255 <ManufacturerString>:
     255:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     265:	6b 00 00 00                                         k...

00000269 <LanguageString>:
     269:	04 03 09 04                                         ....

0000026d <ConfigurationDescriptor>:
     26d:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     27d:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     28d:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     29d:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     2ad:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     2bd:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2cd:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     2dd:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     2ed:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

000002fa <DeviceDescriptor>:
     2fa:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     30a:	00 01                                               ..

0000030c <NKROReport>:
     30c:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     31c:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     32c:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     33c:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000345 <ConsoleReport>:
     345:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     355:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     365:	02 c0                                               ..

00000367 <ExtrakeyReport>:
     367:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     377:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     387:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     397:	10 95 01 81 00 c0                                   ......

0000039d <MouseReport>:
     39d:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3ad:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3bd:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3cd:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3dd:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003ea <KeyboardReport>:
     3ea:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     3fa:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     40a:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     41a:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000042a <__c.4546>:
     42a:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

0000043a <__c.4541>:
     43a:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000448 <__c.4533>:
     448:	0a 00                                               ..

0000044a <__c.4528>:
     44a:	25 30 32 58 20 00                                   %02X .

00000450 <__c.4525>:
     450:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

0000045b <__c.4888>:
     45b:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000466 <__c.1747>:
     466:	25 30 32 58 3a 20 25 30 31 36 62 25 73 0a 00        %02X: %016b%s..

00000475 <__c.1744>:
     475:	72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41 42     r/c 0123456789AB
     485:	43 44 45 46 0a 00                                   CDEF..

0000048b <__c.4673>:
     48b:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     49b:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000004a9 <__c.4668>:
     4a9:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     4b9:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000004c7 <__c.4840>:
     4c7:	64 6f 6e 65 2e 0a 00                                done...

000004ce <__c.4834>:
     4ce:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     4de:	2e 2e 2e 20 00                                      ... .

000004e3 <__c.4605>:
     4e3:	29 0a 00                                            )..

000004e6 <__c.4603>:
     4e6:	25 75 00                                            %u.

000004e9 <__c.4601>:
     4e9:	2f 00                                               /.

000004eb <__c.4599>:
     4eb:	25 75 00                                            %u.

000004ee <__c.4597>:
     4ee:	5d 28 00                                            ](.

000004f1 <__c.4595>:
     4f1:	25 64 00                                            %d.

000004f4 <__c.4593>:
     4f4:	20 00                                                .

000004f6 <__c.4591>:
     4f6:	25 64 00                                            %d.

000004f9 <__c.4589>:
     4f9:	20 00                                                .

000004fb <__c.4587>:
     4fb:	25 64 00                                            %d.

000004fe <__c.4585>:
     4fe:	20 00                                                .

00000500 <__c.4583>:
     500:	25 64 00                                            %d.

00000503 <__c.4581>:
     503:	7c 00                                               |.

00000505 <__c.4579>:
     505:	25 30 32 58 00                                      %02X.

0000050a <__c.4577>:
     50a:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     51a:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     52a:	20 5b 00                                             [.

0000052d <__c.5213>:
     52d:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     53d:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000548 <__c.5210>:
     548:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     558:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000561 <__c.5207>:
     561:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     571:	20 25 64 0a 00                                       %d..

00000576 <__c.5204>:
     576:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     586:	64 0a 00                                            d..

00000589 <__c.5201>:
     589:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     599:	0a 00                                               ..

0000059b <__c.5197>:
     59b:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000005aa <__c.5190>:
     5aa:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5ba:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005c5 <__c.5187>:
     5c5:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5d5:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005de <__c.5184>:
     5de:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5ee:	20 25 64 0a 00                                       %d..

000005f3 <__c.5181>:
     5f3:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     603:	64 0a 00                                            d..

00000606 <__c.5178>:
     606:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     616:	0a 00                                               ..

00000618 <__c.5174>:
     618:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000627 <__c.5167>:
     627:	0a 00                                               ..

00000629 <__c.5165>:
     629:	25 75 00                                            %u.

0000062c <__c.5163>:
     62c:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     63c:	5f 6d 61 78 3a 20 00                                _max: .

00000643 <__c.5161>:
     643:	0a 00                                               ..

00000645 <__c.5159>:
     645:	25 75 00                                            %u.

00000648 <__c.5157>:
     648:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     658:	65 64 3a 20 00                                      ed: .

0000065d <__c.5155>:
     65d:	0a 00                                               ..

0000065f <__c.5153>:
     65f:	25 75 00                                            %u.

00000662 <__c.5151>:
     662:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     672:	00                                                  .

00000673 <__c.5149>:
     673:	0a 00                                               ..

00000675 <__c.5147>:
     675:	25 75 00                                            %u.

00000678 <__c.5145>:
     678:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000687 <__c.5143>:
     687:	0a 00                                               ..

00000689 <__c.5141>:
     689:	25 75 00                                            %u.

0000068c <__c.5139>:
     68c:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     69c:	20 00                                                .

0000069e <__c.5137>:
     69e:	0a 00                                               ..

000006a0 <__c.5135>:
     6a0:	25 75 00                                            %u.

000006a3 <__c.5133>:
     6a3:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     6b3:	20 00                                                .

000006b5 <__c.5131>:
     6b5:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000006c3 <__c.5251>:
     6c3:	4d 3e 00                                            M>.

000006c6 <__c.5249>:
     6c6:	4d 25 64 3e 20 00                                   M%d> .

000006cc <__c.5247>:
     6cc:	3f 00                                               ?.

000006ce <__c.5244>:
     6ce:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006db <__c.5230>:
     6db:	43 3e 20 00                                         C> .

000006df <__c.5220>:
     6df:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6ef:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6ff:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     70f:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     71f:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000072d <__c.5218>:
     72d:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     73d:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     74d:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     75d:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     76d:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     77d:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     78d:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     79d:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     7ad:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     7bd:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7cd:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7dd:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7ed:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7fd:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     80d:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     81d:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000828 <__c.5123>:
     828:	3f 00                                               ?.

0000082a <__c.5120>:
     82a:	4d 3e 20 00                                         M> .

0000082e <__c.5125>:
     82e:	43 3e 20 00                                         C> .

00000832 <__c.5269>:
     832:	4c 25 64 0a 00                                      L%d..

00000837 <__c.5109>:
     837:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     847:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     857:	73 65 6b 65 79 0a 00                                sekey..

0000085e <__c.4934>:
     85e:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     86e:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     87e:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     88e:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     89e:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     8ae:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     8be:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8ce:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8de:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8ee:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     8fe:	4b 52 4f 0a 00                                      KRO..

00000903 <__c.5029>:
     903:	0a 00                                               ..

00000905 <__c.5027>:
     905:	25 75 00                                            %u.

00000908 <__c.5025>:
     908:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000910 <__c.5023>:
     910:	0a 00                                               ..

00000912 <__c.5021>:
     912:	25 75 00                                            %u.

00000915 <__c.5019>:
     915:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     925:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000931 <__c.5017>:
     931:	0a 00                                               ..

00000933 <__c.5015>:
     933:	25 75 00                                            %u.

00000936 <__c.5013>:
     936:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     946:	20 00                                                .

00000948 <__c.5011>:
     948:	0a 00                                               ..

0000094a <__c.5009>:
     94a:	25 75 00                                            %u.

0000094d <__c.5007>:
     94d:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000957 <__c.5005>:
     957:	0a 00                                               ..

00000959 <__c.5003>:
     959:	25 75 00                                            %u.

0000095c <__c.5001>:
     95c:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     96c:	20 00                                                .

0000096e <__c.4999>:
     96e:	0a 00                                               ..

00000970 <__c.4997>:
     970:	25 75 00                                            %u.

00000973 <__c.4995>:
     973:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     983:	20 00                                                .

00000985 <__c.4993>:
     985:	0a 00                                               ..

00000987 <__c.4991>:
     987:	25 75 00                                            %u.

0000098a <__c.4989>:
     98a:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     99a:	74 72 6f 6c 3a 20 00                                trol: .

000009a1 <__c.4987>:
     9a1:	0a 00                                               ..

000009a3 <__c.4985>:
     9a3:	25 75 00                                            %u.

000009a6 <__c.4983>:
     9a6:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     9b6:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000009bf <__c.4981>:
     9bf:	0a 00                                               ..

000009c1 <__c.4979>:
     9c1:	25 30 32 58 00                                      %02X.

000009c6 <__c.4977>:
     9c6:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     9d6:	77 3a 20 00                                         w: .

000009da <__c.4974>:
     9da:	0a 00                                               ..

000009dc <__c.4972>:
     9dc:	25 75 00                                            %u.

000009df <__c.4970>:
     9df:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000009e8 <__c.4968>:
     9e8:	0a 00                                               ..

000009ea <__c.4966>:
     9ea:	25 75 00                                            %u.

000009ed <__c.4964>:
     9ed:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

000009f9 <__c.4962>:
     9f9:	0a 00                                               ..

000009fb <__c.4960>:
     9fb:	25 75 00                                            %u.

000009fe <__c.4958>:
     9fe:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000a08 <__c.4956>:
     a08:	0a 00                                               ..

00000a0a <__c.4954>:
     a0a:	25 75 00                                            %u.

00000a0d <__c.4952>:
     a0d:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000a17 <__c.4950>:
     a17:	0a 00                                               ..

00000a19 <__c.4948>:
     a19:	25 30 32 58 00                                      %02X.

00000a1e <__c.4946>:
     a1e:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     a2e:	3a 20 00                                            : .

00000a31 <__c.4943>:
     a31:	0a 00                                               ..

00000a33 <__c.4941>:
     a33:	25 75 00                                            %u.

00000a36 <__c.4939>:
     a36:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000a46 <__c.5104>:
     a46:	3f 00                                               ?.

00000a48 <__c.5095>:
     a48:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000a53 <__c.5093>:
     a53:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000a5d <__c.5090>:
     a5d:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     a6d:	25 30 34 6c 58 0a 00                                %04lX..

00000a74 <__c.5088>:
     a74:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     a84:	58 0a 00                                            X..

00000a87 <__c.5086>:
     a87:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     a97:	58 0a 00                                            X..

00000a9a <__c.5084>:
     a9a:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     aaa:	6c 3a 20 25 58 0a 00                                l: %X..

00000ab1 <__c.5082>:
     ab1:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     ac1:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000acb <__c.5080>:
     acb:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000ad9 <__c.5077>:
     ad9:	47 43 43 3a 20 37 2e 32 2e 30 20 41 56 52 2d 4c     GCC: 7.2.0 AVR-L
     ae9:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     af9:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000b04 <__c.5075>:
     b04:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     b14:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     b24:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     b34:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     b44:	30 39 36 0a 00                                      096..

00000b49 <__c.5073>:
     b49:	42 55 49 4c 44 3a 20 30 64 64 62 31 31 38 20 28     BUILD: 0ddb118 (
     b59:	31 37 3a 30 36 3a 35 30 20 4a 61 6e 20 20 35 20     17:06:50 Jan  5 
     b69:	32 30 31 38 29 0a 00                                2018)..

00000b70 <__c.5071>:
     b70:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     b80:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     b90:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     ba0:	30 30 31 0a 00                                      001..

00000ba5 <__c.5069>:
     ba5:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     bb5:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     bc5:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000bce <__c.5067>:
     bce:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000bdd <__c.5064>:
     bdd:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000bea <__c.5062>:
     bea:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000bf6 <__c.5059>:
     bf6:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000c06 <__c.5057>:
     c06:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000c15 <__c.5054>:
     c15:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000c23 <__c.5052>:
     c23:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000c30 <__c.5049>:
     c30:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000c3c <__c.5047>:
     c3c:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000c49 <__c.5044>:
     c49:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     c59:	00                                                  .

00000c5a <__c.5041>:
     c5a:	43 3e 20 00                                         C> .

00000c5e <__c.5035>:
     c5e:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000c6a <__ctors_end>:
     c6a:	11 24       	eor	r1, r1
     c6c:	1f be       	out	0x3f, r1	; 63
     c6e:	cf ef       	ldi	r28, 0xFF	; 255
     c70:	da e0       	ldi	r29, 0x0A	; 10
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	cd bf       	out	0x3d, r28	; 61

00000c76 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     c76:	04 b6       	in	r0, 0x34	; 52
     c78:	03 fe       	sbrs	r0, 3
     c7a:	27 c0       	rjmp	.+78     	; 0xcca <__do_copy_data>
     c7c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__bss_end>
     c80:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__bss_end+0x1>
     c84:	a0 91 56 02 	lds	r26, 0x0256	; 0x800256 <__bss_end+0x2>
     c88:	b0 91 57 02 	lds	r27, 0x0257	; 0x800257 <__bss_end+0x3>
     c8c:	87 30       	cpi	r24, 0x07	; 7
     c8e:	90 4b       	sbci	r25, 0xB0	; 176
     c90:	a7 40       	sbci	r26, 0x07	; 7
     c92:	b0 4b       	sbci	r27, 0xB0	; 176
     c94:	d1 f4       	brne	.+52     	; 0xcca <__do_copy_data>
        reset_key = 0;
     c96:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__bss_end>
     c9a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__bss_end+0x1>
     c9e:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <__bss_end+0x2>
     ca2:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__bss_end+0x3>

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     ca6:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     ca8:	84 b7       	in	r24, 0x34	; 52
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	a8 95       	wdr
     cb4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cb8:	88 61       	ori	r24, 0x18	; 24
     cba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cbe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     cc2:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     cc4:	e0 e0       	ldi	r30, 0x00	; 0
     cc6:	f8 e3       	ldi	r31, 0x38	; 56
     cc8:	09 95       	icall

00000cca <__do_copy_data>:
     cca:	11 e0       	ldi	r17, 0x01	; 1
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b1 e0       	ldi	r27, 0x01	; 1
     cd0:	ec ef       	ldi	r30, 0xFC	; 252
     cd2:	f6 e5       	ldi	r31, 0x56	; 86
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <__do_copy_data+0x10>
     cd6:	05 90       	lpm	r0, Z+
     cd8:	0d 92       	st	X+, r0
     cda:	aa 33       	cpi	r26, 0x3A	; 58
     cdc:	b1 07       	cpc	r27, r17
     cde:	d9 f7       	brne	.-10     	; 0xcd6 <__do_copy_data+0xc>

00000ce0 <__do_clear_bss>:
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	aa e3       	ldi	r26, 0x3A	; 58
     ce4:	b1 e0       	ldi	r27, 0x01	; 1
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <.do_clear_bss_start>

00000ce8 <.do_clear_bss_loop>:
     ce8:	1d 92       	st	X+, r1

00000cea <.do_clear_bss_start>:
     cea:	a4 35       	cpi	r26, 0x54	; 84
     cec:	b2 07       	cpc	r27, r18
     cee:	e1 f7       	brne	.-8      	; 0xce8 <.do_clear_bss_loop>
     cf0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <main>
     cf4:	0c 94 7c 2b 	jmp	0x56f8	; 0x56f8 <_exit>

00000cf8 <__bad_interrupt>:
     cf8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000cfc <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     cfc:	ff 93       	push	r31
	push	ZL
     cfe:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     d00:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
	lds	ZH, xfunc_out+1	;/
     d04:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
	sbiw	ZL, 0		;Skip if null
     d08:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     d0a:	09 f0       	breq	.+2      	; 0xd0e <xputc+0x12>
	icall
     d0c:	09 95       	icall
2:	pop	ZL
     d0e:	ef 91       	pop	r30
	pop	ZH
     d10:	ff 91       	pop	r31
	ret
     d12:	08 95       	ret

00000d14 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     d14:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     d16:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     d18:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     d1a:	11 f0       	breq	.+4      	; 0xd20 <xputs+0xc>
	rcall	xputc
     d1c:	ef df       	rcall	.-34     	; 0xcfc <xputc>
	rjmp	1b
     d1e:	fb cf       	rjmp	.-10     	; 0xd16 <xputs+0x2>
2:	ret
     d20:	08 95       	ret

00000d22 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     d22:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     d24:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     d26:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     d28:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     d2a:	0c c0       	rjmp	.+24     	; 0xd44 <xitoa+0x22>
	neg	r20		;
     d2c:	41 95       	neg	r20
	sbrs	r25, 7		;
     d2e:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <xitoa+0x22>
	ldi	r30, '-'	;
     d32:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     d34:	60 95       	com	r22
	com	r23		;
     d36:	70 95       	com	r23
	com	r24		;
     d38:	80 95       	com	r24
	com	r25		;
     d3a:	90 95       	com	r25
	adc	r22, r1		;
     d3c:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     d3e:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     d40:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     d42:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     d44:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <xitoa+0x2a>
	neg	r18		;
     d48:	21 95       	neg	r18
	ldi	r19, '0'	;/
     d4a:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     d4c:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     d4e:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     d50:	66 0f       	add	r22, r22
	rol	r23		;
     d52:	77 1f       	adc	r23, r23
	rol	r24		;
     d54:	88 1f       	adc	r24, r24
	rol	r25		;
     d56:	99 1f       	adc	r25, r25
	rol	r26		;
     d58:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     d5a:	a4 17       	cp	r26, r20
	brcs	3f		;
     d5c:	10 f0       	brcs	.+4      	; 0xd62 <xitoa+0x40>
	sub	r26, r20	;
     d5e:	a4 1b       	sub	r26, r20
	inc	r22		;
     d60:	63 95       	inc	r22
3:	dec	r21		;
     d62:	5a 95       	dec	r21
	brne	2b		;/
     d64:	a9 f7       	brne	.-22     	; 0xd50 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     d66:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     d68:	08 f0       	brcs	.+2      	; 0xd6c <xitoa+0x4a>
	subi	r26, -7		;
     d6a:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     d6c:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     d6e:	af 93       	push	r26
	inc	r31		;/
     d70:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     d72:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     d74:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     d76:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     d78:	91 05       	cpc	r25, r1
	brne	1b		;/
     d7a:	41 f7       	brne	.-48     	; 0xd4c <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     d7c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     d7e:	11 f4       	brne	.+4      	; 0xd84 <xitoa+0x62>
	push	r30		;
     d80:	ef 93       	push	r30
	inc	r31		;/
     d82:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     d84:	f2 17       	cp	r31, r18
	brcc	6f		;
     d86:	18 f4       	brcc	.+6      	; 0xd8e <xitoa+0x6c>
	push	r19		;
     d88:	3f 93       	push	r19
	inc	r31		;
     d8a:	f3 95       	inc	r31
	rjmp	5b		;/
     d8c:	fb cf       	rjmp	.-10     	; 0xd84 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     d8e:	8f 91       	pop	r24
	rcall	xputc		;
     d90:	b5 df       	rcall	.-150    	; 0xcfc <xputc>
	dec	r31		;
     d92:	fa 95       	dec	r31
	brne	6b		;/
     d94:	e1 f7       	brne	.-8      	; 0xd8e <xitoa+0x6c>

	ret
     d96:	08 95       	ret

00000d98 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     d98:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     d9a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     d9c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     d9e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     da0:	21 f0       	breq	.+8      	; 0xdaa <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     da2:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     da4:	19 f0       	breq	.+6      	; 0xdac <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     da6:	aa df       	rcall	.-172    	; 0xcfc <xputc>
	rjmp	0b		;/
     da8:	f9 cf       	rjmp	.-14     	; 0xd9c <xvprintf+0x4>
90:	ret
     daa:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     dac:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     dae:	e8 94       	clt
	_LPMI	r21		;Get flags
     db0:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     db2:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     db4:	c1 f3       	breq	.-16     	; 0xda6 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     db6:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     db8:	11 f4       	brne	.+4      	; 0xdbe <xvprintf+0x26>
	set			;/
     dba:	68 94       	set
22:	_LPMI	r21		;Get width
     dbc:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     dbe:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     dc0:	48 f4       	brcc	.+18     	; 0xdd4 <xvprintf+0x3c>
	subi	r21, '0'	;
     dc2:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     dc4:	90 f3       	brcs	.-28     	; 0xdaa <xvprintf+0x12>
	lsl	r18		;
     dc6:	22 0f       	add	r18, r18
	mov	r0, r18		;
     dc8:	02 2e       	mov	r0, r18
	lsl	r18		;
     dca:	22 0f       	add	r18, r18
	lsl	r18		;
     dcc:	22 0f       	add	r18, r18
	add	r18, r0		;
     dce:	20 0d       	add	r18, r0
	add	r18, r21	;
     dd0:	25 0f       	add	r18, r21
	rjmp	22b		;/
     dd2:	f4 cf       	rjmp	.-24     	; 0xdbc <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     dd4:	0e f4       	brtc	.+2      	; 0xdd8 <xvprintf+0x40>
	neg	r18		;
     dd6:	21 95       	neg	r18
25:	ld	r24, Y+		;
     dd8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     dda:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     ddc:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     dde:	19 f3       	breq	.-58     	; 0xda6 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     de0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     de2:	29 f1       	breq	.+74     	; 0xe2e <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     de4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     de6:	59 f1       	breq	.+86     	; 0xe3e <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     de8:	bc 01       	movw	r22, r24
	clr	r24		;
     dea:	88 27       	eor	r24, r24
	clr	r25		;
     dec:	99 27       	eor	r25, r25
	clt			;/
     dee:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     df0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     df2:	21 f4       	brne	.+8      	; 0xdfc <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     df4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     df6:	99 91       	ld	r25, Y+
	set			;
     df8:	68 94       	set
	_LPMI	r21		;/
     dfa:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     dfc:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     dfe:	39 f4       	brne	.+14     	; 0xe0e <xvprintf+0x76>
	ldi	r20, -10	;
     e00:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     e02:	7e f0       	brts	.+30     	; 0xe22 <xvprintf+0x8a>
	sbrs	r23, 7		;
     e04:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <xvprintf+0x8a>
	ldi	r24, -1		;
     e08:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     e0a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     e0c:	0a c0       	rjmp	.+20     	; 0xe22 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     e0e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     e10:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     e12:	39 f0       	breq	.+14     	; 0xe22 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     e14:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     e16:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     e18:	21 f0       	breq	.+8      	; 0xe22 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     e1a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     e1c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     e1e:	09 f0       	breq	.+2      	; 0xe22 <xvprintf+0x8a>
	ret			;abort
     e20:	08 95       	ret
40:	push	ZH		;Output the value
     e22:	ff 93       	push	r31
	push	ZL		;
     e24:	ef 93       	push	r30
	rcall	xitoa		;
     e26:	7d df       	rcall	.-262    	; 0xd22 <xitoa>
42:	pop	ZL		;
     e28:	ef 91       	pop	r30
	pop	ZH		;
     e2a:	ff 91       	pop	r31
	rjmp	0b		;/
     e2c:	b7 cf       	rjmp	.-146    	; 0xd9c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     e2e:	ff 93       	push	r31
	push	ZL
     e30:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     e32:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     e34:	81 91       	ld	r24, Z+
	cpi	r24, 0
     e36:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     e38:	b9 f3       	breq	.-18     	; 0xe28 <xvprintf+0x90>
	rcall	xputc
     e3a:	60 df       	rcall	.-320    	; 0xcfc <xputc>
	rjmp	51b
     e3c:	fb cf       	rjmp	.-10     	; 0xe34 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     e3e:	ff 93       	push	r31
	push	ZL
     e40:	ef 93       	push	r30
	rcall	xputs
     e42:	68 df       	rcall	.-304    	; 0xd14 <xputs>
	rjmp	42b
     e44:	f1 cf       	rjmp	.-30     	; 0xe28 <xvprintf+0x90>

00000e46 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     e46:	df 93       	push	r29
	push	YL
     e48:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     e4a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     e4c:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     e4e:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     e50:	a3 df       	rcall	.-186    	; 0xd98 <xvprintf>
	pop	YL
     e52:	cf 91       	pop	r28
	pop	YH
     e54:	df 91       	pop	r29
	ret
     e56:	08 95       	ret

00000e58 <action_get_macro>:
         TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,MPRV,VOLD,MNXT,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS),
};

const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    switch (id) {
     e58:	61 11       	cpse	r22, r1
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <action_get_macro+0xc>
        case 0:
            return (record->event.pressed ?
                    MACRO( D(LSFT), T(S), U(LSFT), T(U), T(P), T(E), T(R), D(LSFT), T(P), U(LSFT), T(0), T(W), T(E), T(R), D(LSFT), T(M), U(LSFT), T(A), T(C), T(H), T(I), T(N), T(E), T(R), T(Y), END ) :
     e5c:	fc 01       	movw	r30, r24
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	81 11       	cpse	r24, r1
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <action_get_macro+0x12>
                    MACRO_NONE );
    }
    return MACRO_NONE;
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
                    MACRO( D(LSFT), T(S), U(LSFT), T(U), T(P), T(E), T(R), D(LSFT), T(P), U(LSFT), T(0), T(W), T(E), T(R), D(LSFT), T(M), U(LSFT), T(A), T(C), T(H), T(I), T(N), T(E), T(R), T(Y), END ) :
     e6a:	8c ea       	ldi	r24, 0xAC	; 172
     e6c:	90 e0       	ldi	r25, 0x00	; 0
}
     e6e:	08 95       	ret

00000e70 <unselect_rows>:
 * pin: D1  D2  D3  C6  C7
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00001110;
     e70:	8a b1       	in	r24, 0x0a	; 10
     e72:	81 7f       	andi	r24, 0xF1	; 241
     e74:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001110;
     e76:	8b b1       	in	r24, 0x0b	; 11
     e78:	81 7f       	andi	r24, 0xF1	; 241
     e7a:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~0b11000000;
     e7c:	87 b1       	in	r24, 0x07	; 7
     e7e:	8f 73       	andi	r24, 0x3F	; 63
     e80:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~0b11000000;
     e82:	88 b1       	in	r24, 0x08	; 8
     e84:	8f 73       	andi	r24, 0x3F	; 63
     e86:	88 b9       	out	0x08, r24	; 8
}
     e88:	08 95       	ret

00000e8a <matrix_init>:
    unselect_rows();
     e8a:	0e 94 38 07 	call	0xe70	; 0xe70 <unselect_rows>
    DDRF  &= ~(1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     e8e:	80 b3       	in	r24, 0x10	; 16
     e90:	8c 70       	andi	r24, 0x0C	; 12
     e92:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
     e94:	81 b3       	in	r24, 0x11	; 17
     e96:	83 6f       	ori	r24, 0xF3	; 243
     e98:	81 bb       	out	0x11, r24	; 17
    DDRD  &= ~(1<<0);
     e9a:	50 98       	cbi	0x0a, 0	; 10
    PORTD |=  (1<<0);
     e9c:	58 9a       	sbi	0x0b, 0	; 11
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     e9e:	84 b1       	in	r24, 0x04	; 4
     ea0:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     ea2:	85 b1       	in	r24, 0x05	; 5
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	85 b9       	out	0x05, r24	; 5
        matrix[i] = 0;
     ea8:	a6 e4       	ldi	r26, 0x46	; 70
     eaa:	b1 e0       	ldi	r27, 0x01	; 1
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	1c 92       	st	X, r1
     eb0:	1e 92       	st	-X, r1
        matrix_debouncing[i] = 0;
     eb2:	ec e3       	ldi	r30, 0x3C	; 60
     eb4:	f1 e0       	ldi	r31, 0x01	; 1
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	10 82       	st	Z, r1
        matrix[i] = 0;
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	1c 92       	st	X, r1
     ebe:	1e 92       	st	-X, r1
     ec0:	12 97       	sbiw	r26, 0x02	; 2
        matrix_debouncing[i] = 0;
     ec2:	13 82       	std	Z+3, r1	; 0x03
     ec4:	12 82       	std	Z+2, r1	; 0x02
        matrix[i] = 0;
     ec6:	15 96       	adiw	r26, 0x05	; 5
     ec8:	1c 92       	st	X, r1
     eca:	1e 92       	st	-X, r1
     ecc:	14 97       	sbiw	r26, 0x04	; 4
        matrix_debouncing[i] = 0;
     ece:	15 82       	std	Z+5, r1	; 0x05
     ed0:	14 82       	std	Z+4, r1	; 0x04
        matrix[i] = 0;
     ed2:	17 96       	adiw	r26, 0x07	; 7
     ed4:	1c 92       	st	X, r1
     ed6:	1e 92       	st	-X, r1
     ed8:	16 97       	sbiw	r26, 0x06	; 6
        matrix_debouncing[i] = 0;
     eda:	17 82       	std	Z+7, r1	; 0x07
     edc:	16 82       	std	Z+6, r1	; 0x06
        matrix[i] = 0;
     ede:	19 96       	adiw	r26, 0x09	; 9
     ee0:	1c 92       	st	X, r1
     ee2:	1e 92       	st	-X, r1
     ee4:	18 97       	sbiw	r26, 0x08	; 8
        matrix_debouncing[i] = 0;
     ee6:	11 86       	std	Z+9, r1	; 0x09
     ee8:	10 86       	std	Z+8, r1	; 0x08
}
     eea:	08 95       	ret

00000eec <matrix_scan>:
{
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	28 97       	sbiw	r28, 0x08	; 8
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	0c e3       	ldi	r16, 0x3C	; 60
     f22:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     f24:	1d 82       	std	Y+5, r1	; 0x05

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     f26:	2d 81       	ldd	r18, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	09 f4       	brne	.+2      	; 0xf2e <matrix_scan+0x42>
     f2c:	e5 c0       	rjmp	.+458    	; 0x10f8 <matrix_scan+0x20c>
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <matrix_scan+0x46>
     f30:	d7 c0       	rjmp	.+430    	; 0x10e0 <matrix_scan+0x1f4>
     f32:	21 30       	cpi	r18, 0x01	; 1
     f34:	09 f4       	brne	.+2      	; 0xf38 <matrix_scan+0x4c>
     f36:	dd c0       	rjmp	.+442    	; 0x10f2 <matrix_scan+0x206>
        case 0:
            DDRD  |= (1<<1);
     f38:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     f3a:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f3c:	40 ea       	ldi	r20, 0xA0	; 160
     f3e:	4a 95       	dec	r20
     f40:	f1 f7       	brne	.-4      	; 0xf3e <matrix_scan+0x52>
    return (PINB&(1<<0) ? 0 : (1<<14)) |
     f42:	18 99       	sbic	0x03, 0	; 3
     f44:	df c0       	rjmp	.+446    	; 0x1104 <matrix_scan+0x218>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e4       	ldi	r25, 0x40	; 64
           (PINB&(1<<1) ? 0 : (1<<13)) |
     f4a:	19 99       	sbic	0x03, 1	; 3
     f4c:	de c0       	rjmp	.+444    	; 0x110a <matrix_scan+0x21e>
     f4e:	c1 2c       	mov	r12, r1
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	d4 2e       	mov	r13, r20
           (PINB&(1<<2) ? 0 : (1<<12)) |
     f54:	1a 99       	sbic	0x03, 2	; 3
     f56:	dc c0       	rjmp	.+440    	; 0x1110 <matrix_scan+0x224>
     f58:	e1 2c       	mov	r14, r1
     f5a:	30 e1       	ldi	r19, 0x10	; 16
     f5c:	f3 2e       	mov	r15, r19
           (PINB&(1<<3) ? 0 : (1<<11)) |
     f5e:	1b 99       	sbic	0x03, 3	; 3
     f60:	da c0       	rjmp	.+436    	; 0x1116 <matrix_scan+0x22a>
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b8 e0       	ldi	r27, 0x08	; 8
           (PINB&(1<<7) ? 0 : (1<<10)) |
     f66:	1f 99       	sbic	0x03, 7	; 3
     f68:	d9 c0       	rjmp	.+434    	; 0x111c <matrix_scan+0x230>
     f6a:	e0 e0       	ldi	r30, 0x00	; 0
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
           (PIND&(1<<0) ? 0 : (1<<9)) |
     f6e:	48 99       	sbic	0x09, 0	; 9
     f70:	d8 c0       	rjmp	.+432    	; 0x1122 <matrix_scan+0x236>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	72 e0       	ldi	r23, 0x02	; 2
           (PINB&(1<<4) ? 0 : (1<<8)) |
     f76:	1c 99       	sbic	0x03, 4	; 3
     f78:	d7 c0       	rjmp	.+430    	; 0x1128 <matrix_scan+0x23c>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	31 e0       	ldi	r19, 0x01	; 1
     f7e:	38 87       	std	Y+8, r19	; 0x08
     f80:	2f 83       	std	Y+7, r18	; 0x07
           (PINB&(1<<5) ? 0 : (1<<7)) |
     f82:	1d 99       	sbic	0x03, 5	; 3
     f84:	d4 c0       	rjmp	.+424    	; 0x112e <matrix_scan+0x242>
     f86:	20 e8       	ldi	r18, 0x80	; 128
     f88:	a2 2e       	mov	r10, r18
     f8a:	b1 2c       	mov	r11, r1
           (PINB&(1<<6) ? 0 : (1<<6)) |
     f8c:	1e 99       	sbic	0x03, 6	; 3
     f8e:	d2 c0       	rjmp	.+420    	; 0x1134 <matrix_scan+0x248>
     f90:	50 e4       	ldi	r21, 0x40	; 64
     f92:	85 2e       	mov	r8, r21
     f94:	91 2c       	mov	r9, r1
           (PINF&(1<<7) ? 0 : (1<<5)) |
     f96:	7f 99       	sbic	0x0f, 7	; 15
     f98:	d0 c0       	rjmp	.+416    	; 0x113a <matrix_scan+0x24e>
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	64 2e       	mov	r6, r20
     f9e:	71 2c       	mov	r7, r1
           (PINF&(1<<6) ? 0 : (1<<4)) |
     fa0:	7e 99       	sbic	0x0f, 6	; 15
     fa2:	ce c0       	rjmp	.+412    	; 0x1140 <matrix_scan+0x254>
     fa4:	30 e1       	ldi	r19, 0x10	; 16
     fa6:	43 2e       	mov	r4, r19
     fa8:	51 2c       	mov	r5, r1
           (PINF&(1<<5) ? 0 : (1<<3)) |
     faa:	7d 99       	sbic	0x0f, 5	; 15
     fac:	cc c0       	rjmp	.+408    	; 0x1146 <matrix_scan+0x25a>
     fae:	28 e0       	ldi	r18, 0x08	; 8
     fb0:	22 2e       	mov	r2, r18
     fb2:	31 2c       	mov	r3, r1
           (PINF&(1<<4) ? 0 : (1<<2)) |
     fb4:	7c 99       	sbic	0x0f, 4	; 15
     fb6:	ca c0       	rjmp	.+404    	; 0x114c <matrix_scan+0x260>
     fb8:	44 e0       	ldi	r20, 0x04	; 4
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	5a 83       	std	Y+2, r21	; 0x02
     fbe:	49 83       	std	Y+1, r20	; 0x01
           (PINF&(1<<1) ? 0 : (1<<1)) |
     fc0:	79 99       	sbic	0x0f, 1	; 15
     fc2:	c7 c0       	rjmp	.+398    	; 0x1152 <matrix_scan+0x266>
     fc4:	22 e0       	ldi	r18, 0x02	; 2
     fc6:	30 e0       	ldi	r19, 0x00	; 0
           (PINF&(1<<0) ? 0 : (1<<0));
     fc8:	5f b1       	in	r21, 0x0f	; 15
     fca:	50 95       	com	r21
     fcc:	51 70       	andi	r21, 0x01	; 1
     fce:	5b 83       	std	Y+3, r21	; 0x03
     fd0:	1c 82       	std	Y+4, r1	; 0x04
           (PINF&(1<<1) ? 0 : (1<<1)) |
     fd2:	4b 81       	ldd	r20, Y+3	; 0x03
     fd4:	5c 81       	ldd	r21, Y+4	; 0x04
     fd6:	84 2b       	or	r24, r20
     fd8:	95 2b       	or	r25, r21
     fda:	8c 29       	or	r24, r12
     fdc:	9d 29       	or	r25, r13
     fde:	8e 29       	or	r24, r14
     fe0:	9f 29       	or	r25, r15
     fe2:	8a 2b       	or	r24, r26
     fe4:	9b 2b       	or	r25, r27
     fe6:	8e 2b       	or	r24, r30
     fe8:	9f 2b       	or	r25, r31
     fea:	86 2b       	or	r24, r22
     fec:	97 2b       	or	r25, r23
     fee:	ef 81       	ldd	r30, Y+7	; 0x07
     ff0:	f8 85       	ldd	r31, Y+8	; 0x08
     ff2:	8e 2b       	or	r24, r30
     ff4:	9f 2b       	or	r25, r31
     ff6:	8a 29       	or	r24, r10
     ff8:	9b 29       	or	r25, r11
     ffa:	88 2a       	or	r8, r24
     ffc:	99 2a       	or	r9, r25
     ffe:	68 28       	or	r6, r8
    1000:	79 28       	or	r7, r9
    1002:	46 28       	or	r4, r6
    1004:	57 28       	or	r5, r7
    1006:	24 28       	or	r2, r4
    1008:	35 28       	or	r3, r5
    100a:	49 81       	ldd	r20, Y+1	; 0x01
    100c:	5a 81       	ldd	r21, Y+2	; 0x02
    100e:	24 2a       	or	r2, r20
    1010:	35 2a       	or	r3, r21
    1012:	22 29       	or	r18, r2
    1014:	33 29       	or	r19, r3
        if (matrix_debouncing[i] != cols) {
    1016:	f8 01       	movw	r30, r16
    1018:	81 91       	ld	r24, Z+
    101a:	91 91       	ld	r25, Z+
    101c:	8f 01       	movw	r16, r30
    101e:	82 17       	cp	r24, r18
    1020:	93 07       	cpc	r25, r19
    1022:	61 f1       	breq	.+88     	; 0x107c <matrix_scan+0x190>
            matrix_debouncing[i] = cols;
    1024:	32 97       	sbiw	r30, 0x02	; 2
    1026:	31 83       	std	Z+1, r19	; 0x01
    1028:	20 83       	st	Z, r18
            if (debouncing) {
    102a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    102e:	88 23       	and	r24, r24
    1030:	11 f1       	breq	.+68     	; 0x1076 <matrix_scan+0x18a>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1032:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    1036:	80 ff       	sbrs	r24, 0
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <matrix_scan+0x156>
    103a:	8d e0       	ldi	r24, 0x0D	; 13
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    1042:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    1046:	80 ff       	sbrs	r24, 0
    1048:	0e c0       	rjmp	.+28     	; 0x1066 <matrix_scan+0x17a>
    104a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    104e:	1f 92       	push	r1
    1050:	8f 93       	push	r24
    1052:	88 e0       	ldi	r24, 0x08	; 8
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    106a:	80 ff       	sbrs	r24, 0
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <matrix_scan+0x18a>
    106e:	86 e0       	ldi	r24, 0x06	; 6
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            debouncing = DEBOUNCE;
    1076:	85 e0       	ldi	r24, 0x05	; 5
    1078:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        unselect_rows();
    107c:	0e 94 38 07 	call	0xe70	; 0xe70 <unselect_rows>
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1080:	fd 81       	ldd	r31, Y+5	; 0x05
    1082:	ff 5f       	subi	r31, 0xFF	; 255
    1084:	fd 83       	std	Y+5, r31	; 0x05
    1086:	f5 30       	cpi	r31, 0x05	; 5
    1088:	09 f0       	breq	.+2      	; 0x108c <matrix_scan+0x1a0>
    108a:	4d cf       	rjmp	.-358    	; 0xf26 <matrix_scan+0x3a>
    if (debouncing) {
    108c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1090:	88 23       	and	r24, r24
    1092:	61 f0       	breq	.+24     	; 0x10ac <matrix_scan+0x1c0>
        if (--debouncing) {
    1094:	81 50       	subi	r24, 0x01	; 1
    1096:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    109a:	88 23       	and	r24, r24
    109c:	09 f4       	brne	.+2      	; 0x10a0 <matrix_scan+0x1b4>
    109e:	5c c0       	rjmp	.+184    	; 0x1158 <matrix_scan+0x26c>
	__builtin_avr_delay_cycles(__ticks_dc);
    10a0:	8f e9       	ldi	r24, 0x9F	; 159
    10a2:	9f e0       	ldi	r25, 0x0F	; 15
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <matrix_scan+0x1b8>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <matrix_scan+0x1be>
    10aa:	00 00       	nop
}
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	28 96       	adiw	r28, 0x08	; 8
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	9f 90       	pop	r9
    10d0:	8f 90       	pop	r8
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	5f 90       	pop	r5
    10d8:	4f 90       	pop	r4
    10da:	3f 90       	pop	r3
    10dc:	2f 90       	pop	r2
    10de:	08 95       	ret
    switch (row) {
    10e0:	3d 81       	ldd	r19, Y+5	; 0x05
    10e2:	33 30       	cpi	r19, 0x03	; 3
    10e4:	61 f0       	breq	.+24     	; 0x10fe <matrix_scan+0x212>
    10e6:	34 30       	cpi	r19, 0x04	; 4
    10e8:	09 f0       	breq	.+2      	; 0x10ec <matrix_scan+0x200>
    10ea:	26 cf       	rjmp	.-436    	; 0xf38 <matrix_scan+0x4c>
        case 3:
            DDRC  |= (1<<6);
            PORTC &= ~(1<<6);
            break;
        case 4:
            DDRC  |= (1<<7);
    10ec:	3f 9a       	sbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    10ee:	47 98       	cbi	0x08, 7	; 8
    10f0:	25 cf       	rjmp	.-438    	; 0xf3c <matrix_scan+0x50>
            DDRD  |= (1<<2);
    10f2:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
    10f4:	5a 98       	cbi	0x0b, 2	; 11
    10f6:	22 cf       	rjmp	.-444    	; 0xf3c <matrix_scan+0x50>
            DDRD  |= (1<<3);
    10f8:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
    10fa:	5b 98       	cbi	0x0b, 3	; 11
    10fc:	1f cf       	rjmp	.-450    	; 0xf3c <matrix_scan+0x50>
            DDRC  |= (1<<6);
    10fe:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
    1100:	46 98       	cbi	0x08, 6	; 8
    1102:	1c cf       	rjmp	.-456    	; 0xf3c <matrix_scan+0x50>
    return (PINB&(1<<0) ? 0 : (1<<14)) |
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	20 cf       	rjmp	.-448    	; 0xf4a <matrix_scan+0x5e>
           (PINB&(1<<1) ? 0 : (1<<13)) |
    110a:	d1 2c       	mov	r13, r1
    110c:	c1 2c       	mov	r12, r1
    110e:	22 cf       	rjmp	.-444    	; 0xf54 <matrix_scan+0x68>
           (PINB&(1<<2) ? 0 : (1<<12)) |
    1110:	f1 2c       	mov	r15, r1
    1112:	e1 2c       	mov	r14, r1
    1114:	24 cf       	rjmp	.-440    	; 0xf5e <matrix_scan+0x72>
           (PINB&(1<<3) ? 0 : (1<<11)) |
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	25 cf       	rjmp	.-438    	; 0xf66 <matrix_scan+0x7a>
           (PINB&(1<<7) ? 0 : (1<<10)) |
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	e0 e0       	ldi	r30, 0x00	; 0
    1120:	26 cf       	rjmp	.-436    	; 0xf6e <matrix_scan+0x82>
           (PIND&(1<<0) ? 0 : (1<<9)) |
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	27 cf       	rjmp	.-434    	; 0xf76 <matrix_scan+0x8a>
           (PINB&(1<<4) ? 0 : (1<<8)) |
    1128:	18 86       	std	Y+8, r1	; 0x08
    112a:	1f 82       	std	Y+7, r1	; 0x07
    112c:	2a cf       	rjmp	.-428    	; 0xf82 <matrix_scan+0x96>
           (PINB&(1<<5) ? 0 : (1<<7)) |
    112e:	b1 2c       	mov	r11, r1
    1130:	a1 2c       	mov	r10, r1
    1132:	2c cf       	rjmp	.-424    	; 0xf8c <matrix_scan+0xa0>
           (PINB&(1<<6) ? 0 : (1<<6)) |
    1134:	91 2c       	mov	r9, r1
    1136:	81 2c       	mov	r8, r1
    1138:	2e cf       	rjmp	.-420    	; 0xf96 <matrix_scan+0xaa>
           (PINF&(1<<7) ? 0 : (1<<5)) |
    113a:	71 2c       	mov	r7, r1
    113c:	61 2c       	mov	r6, r1
    113e:	30 cf       	rjmp	.-416    	; 0xfa0 <matrix_scan+0xb4>
           (PINF&(1<<6) ? 0 : (1<<4)) |
    1140:	51 2c       	mov	r5, r1
    1142:	41 2c       	mov	r4, r1
    1144:	32 cf       	rjmp	.-412    	; 0xfaa <matrix_scan+0xbe>
           (PINF&(1<<5) ? 0 : (1<<3)) |
    1146:	31 2c       	mov	r3, r1
    1148:	21 2c       	mov	r2, r1
    114a:	34 cf       	rjmp	.-408    	; 0xfb4 <matrix_scan+0xc8>
           (PINF&(1<<4) ? 0 : (1<<2)) |
    114c:	1a 82       	std	Y+2, r1	; 0x02
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	37 cf       	rjmp	.-402    	; 0xfc0 <matrix_scan+0xd4>
           (PINF&(1<<1) ? 0 : (1<<1)) |
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	38 cf       	rjmp	.-400    	; 0xfc8 <matrix_scan+0xdc>
                matrix[i] = matrix_debouncing[i];
    1158:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <matrix_debouncing>
    115c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <matrix_debouncing+0x1>
    1160:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <matrix+0x1>
    1164:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <matrix>
    1168:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <matrix_debouncing+0x2>
    116c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <matrix_debouncing+0x3>
    1170:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <matrix+0x3>
    1174:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <matrix+0x2>
    1178:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <matrix_debouncing+0x4>
    117c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <matrix_debouncing+0x5>
    1180:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <matrix+0x5>
    1184:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <matrix+0x4>
    1188:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <matrix_debouncing+0x6>
    118c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <matrix_debouncing+0x7>
    1190:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <matrix+0x7>
    1194:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <matrix+0x6>
    1198:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <matrix_debouncing+0x8>
    119c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <matrix_debouncing+0x9>
    11a0:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <matrix+0x9>
    11a4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <matrix+0x8>
    11a8:	81 cf       	rjmp	.-254    	; 0x10ac <matrix_scan+0x1c0>

000011aa <matrix_get_row>:
    return matrix[row];
    11aa:	e8 2f       	mov	r30, r24
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	ea 5b       	subi	r30, 0xBA	; 186
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
}
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	08 95       	ret

000011bc <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    11bc:	81 ff       	sbrs	r24, 1
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <led_set+0xa>
        // output low
        DDRB |= (1<<2);
    11c0:	22 9a       	sbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
        PORTB &= ~(1<<2);
    11c2:	2a 98       	cbi	0x05, 2	; 5
    }
}
    11c4:	08 95       	ret
        DDRB &= ~(1<<2);
    11c6:	22 98       	cbi	0x04, 2	; 4
    11c8:	fc cf       	rjmp	.-8      	; 0x11c2 <led_set+0x6>

000011ca <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    11ca:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    11ce:	08 95       	ret

000011d0 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    11d0:	9f b7       	in	r25, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
    11d8:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11da:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_DeviceState>
    11de:	94 30       	cpi	r25, 0x04	; 4
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <sendchar+0x14>
    11e2:	49 c0       	rjmp	.+146    	; 0x1276 <sendchar+0xa6>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11e4:	20 91 e9 00 	lds	r18, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11e8:	2f 70       	andi	r18, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11ea:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11ee:	90 fd       	sbrc	r25, 0
    11f0:	30 c0       	rjmp	.+96     	; 0x1252 <sendchar+0x82>
    11f2:	90 e0       	ldi	r25, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11f4:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11f6:	24 e0       	ldi	r18, 0x04	; 4
    11f8:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11fc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1200:	20 ff       	sbrs	r18, 0
    1202:	36 c0       	rjmp	.+108    	; 0x1270 <sendchar+0xa0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1204:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1208:	27 ff       	sbrs	r18, 7
    120a:	32 c0       	rjmp	.+100    	; 0x1270 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    120c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <timeouted.4910>
    1210:	22 23       	and	r18, r18
    1212:	21 f0       	breq	.+8      	; 0x121c <sendchar+0x4c>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1214:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1218:	25 ff       	sbrs	r18, 5
    121a:	2a c0       	rjmp	.+84     	; 0x1270 <sendchar+0xa0>
        goto ERROR_EXIT;
    }

    timeouted = false;
    121c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <timeouted.4910>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1220:	26 e0       	ldi	r18, 0x06	; 6
    1222:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1226:	35 ff       	sbrs	r19, 5
    1228:	16 c0       	rjmp	.+44     	; 0x1256 <sendchar+0x86>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    122a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    122e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1232:	85 fd       	sbrc	r24, 5
    1234:	29 c0       	rjmp	.+82     	; 0x1288 <sendchar+0xb8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (!(Endpoint_IsINReady()));
    123a:	80 ff       	sbrs	r24, 0
    123c:	fc cf       	rjmp	.-8      	; 0x1236 <sendchar+0x66>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    123e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1242:	8e 77       	andi	r24, 0x7E	; 126
    1244:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1248:	9f 70       	andi	r25, 0x0F	; 15
    124a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    } else {
        CONSOLE_FLUSH_SET(true);
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1252:	90 e8       	ldi	r25, 0x80	; 128
    1254:	cf cf       	rjmp	.-98     	; 0x11f4 <sendchar+0x24>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1256:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <USB_DeviceState>
    125a:	34 30       	cpi	r19, 0x04	; 4
    125c:	49 f4       	brne	.+18     	; 0x1270 <sendchar+0xa0>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    125e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
        if (Endpoint_IsStalled()) {
    1262:	35 fd       	sbrc	r19, 5
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <sendchar+0xa0>
    1266:	21 50       	subi	r18, 0x01	; 1
        if (!(timeout--)) {
    1268:	41 f4       	brne	.+16     	; 0x127a <sendchar+0xaa>
            timeouted = true;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <timeouted.4910>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1270:	9f 70       	andi	r25, 0x0F	; 15
    1272:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        return -1;
    1276:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1278:	08 95       	ret
    127a:	ef e9       	ldi	r30, 0x9F	; 159
    127c:	ff e0       	ldi	r31, 0x0F	; 15
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <sendchar+0xae>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <sendchar+0xb4>
    1284:	00 00       	nop
    1286:	cd cf       	rjmp	.-102    	; 0x1222 <sendchar+0x52>
        CONSOLE_FLUSH_SET(true);
    1288:	8f b7       	in	r24, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <console_flush>
    1292:	8f bf       	out	0x3f, r24	; 63
    1294:	d9 cf       	rjmp	.-78     	; 0x1248 <sendchar+0x78>

00001296 <send_consumer>:
{
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	00 d0       	rcall	.+0      	; 0x129c <send_consumer+0x6>
    129c:	1f 92       	push	r1
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    12a4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	19 f5       	brne	.+70     	; 0x12f2 <send_consumer+0x5c>
    report_extra_t r = {
    12ac:	93 e0       	ldi	r25, 0x03	; 3
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	3b 83       	std	Y+3, r19	; 0x03
    12b2:	2a 83       	std	Y+2, r18	; 0x02
    12b4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12ba:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12be:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12c0:	95 fd       	sbrc	r25, 5
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <send_consumer+0x3a>
	__builtin_avr_delay_cycles(__ticks_dc);
    12c4:	95 ed       	ldi	r25, 0xD5	; 213
    12c6:	9a 95       	dec	r25
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <send_consumer+0x30>
    12ca:	00 00       	nop
    12cc:	81 11       	cpse	r24, r1
    12ce:	f5 cf       	rjmp	.-22     	; 0x12ba <send_consumer+0x24>
    12d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    12d4:	85 ff       	sbrs	r24, 5
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <send_consumer+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	63 e0       	ldi	r22, 0x03	; 3
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	ce 01       	movw	r24, r28
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	0e 94 27 0c 	call	0x184e	; 0x184e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ec:	8e 77       	andi	r24, 0x7E	; 126
    12ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <send_system>:
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	00 d0       	rcall	.+0      	; 0x1304 <send_system+0x6>
    1304:	1f 92       	push	r1
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
    130a:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <USB_DeviceState>
    130e:	24 30       	cpi	r18, 0x04	; 4
    1310:	21 f5       	brne	.+72     	; 0x135a <send_system+0x5c>
    report_extra_t r = {
    1312:	22 e0       	ldi	r18, 0x02	; 2
    1314:	29 83       	std	Y+1, r18	; 0x01
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1322:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1326:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1328:	95 fd       	sbrc	r25, 5
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <send_system+0x3a>
    132c:	95 ed       	ldi	r25, 0xD5	; 213
    132e:	9a 95       	dec	r25
    1330:	f1 f7       	brne	.-4      	; 0x132e <send_system+0x30>
    1332:	00 00       	nop
    1334:	81 11       	cpse	r24, r1
    1336:	f5 cf       	rjmp	.-22     	; 0x1322 <send_system+0x24>
    1338:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    133c:	85 ff       	sbrs	r24, 5
    133e:	0d c0       	rjmp	.+26     	; 0x135a <send_system+0x5c>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	63 e0       	ldi	r22, 0x03	; 3
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	0e 94 27 0c 	call	0x184e	; 0x184e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1350:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1354:	8e 77       	andi	r24, 0x7E	; 126
    1356:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <send_mouse>:
{
    1366:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1368:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	f9 f4       	brne	.+62     	; 0x13ae <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1376:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1378:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    137c:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    137e:	85 fd       	sbrc	r24, 5
    1380:	06 c0       	rjmp	.+12     	; 0x138e <send_mouse+0x28>
    1382:	85 ed       	ldi	r24, 0xD5	; 213
    1384:	8a 95       	dec	r24
    1386:	f1 f7       	brne	.-4      	; 0x1384 <send_mouse+0x1e>
    1388:	00 00       	nop
    138a:	91 11       	cpse	r25, r1
    138c:	f5 cf       	rjmp	.-22     	; 0x1378 <send_mouse+0x12>
    138e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1392:	85 ff       	sbrs	r24, 5
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	65 e0       	ldi	r22, 0x05	; 5
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	c9 01       	movw	r24, r18
    13a0:	0e 94 27 0c 	call	0x184e	; 0x184e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13a8:	8e 77       	andi	r24, 0x7E	; 126
    13aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    13ae:	08 95       	ret

000013b0 <send_keyboard>:
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    13b6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	f9 f4       	brne	.+62     	; 0x13fc <send_keyboard+0x4c>
    if (keyboard_protocol && keyboard_nkro) {
    13be:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    13c2:	88 23       	and	r24, r24
    13c4:	f1 f0       	breq	.+60     	; 0x1402 <send_keyboard+0x52>
    13c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    13ca:	88 23       	and	r24, r24
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <send_keyboard+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13ce:	85 e0       	ldi	r24, 0x05	; 5
    13d0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13d6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13da:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    13dc:	95 fd       	sbrc	r25, 5
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <send_keyboard+0x3c>
    13e0:	9a e2       	ldi	r25, 0x2A	; 42
    13e2:	9a 95       	dec	r25
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <send_keyboard+0x32>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <send_keyboard+0x38>
    13e8:	81 11       	cpse	r24, r1
    13ea:	f5 cf       	rjmp	.-22     	; 0x13d6 <send_keyboard+0x26>
    13ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	60 e2       	ldi	r22, 0x20	; 32
    13f6:	70 e0       	ldi	r23, 0x00	; 0
        if (!Endpoint_IsReadWriteAllowed()) return;
    13f8:	85 fd       	sbrc	r24, 5
    13fa:	1a c0       	rjmp	.+52     	; 0x1430 <send_keyboard+0x80>
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    140a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    140e:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1410:	95 fd       	sbrc	r25, 5
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <send_keyboard+0x70>
    1414:	95 ed       	ldi	r25, 0xD5	; 213
    1416:	9a 95       	dec	r25
    1418:	f1 f7       	brne	.-4      	; 0x1416 <send_keyboard+0x66>
    141a:	00 00       	nop
    141c:	81 11       	cpse	r24, r1
    141e:	f5 cf       	rjmp	.-22     	; 0x140a <send_keyboard+0x5a>
    1420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1424:	85 ff       	sbrs	r24, 5
    1426:	ea cf       	rjmp	.-44     	; 0x13fc <send_keyboard+0x4c>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	68 e0       	ldi	r22, 0x08	; 8
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	ce 01       	movw	r24, r28
    1432:	0e 94 27 0c 	call	0x184e	; 0x184e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1436:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    143a:	8e 77       	andi	r24, 0x7E	; 126
    143c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	fe 01       	movw	r30, r28
    1444:	a4 e5       	ldi	r26, 0x54	; 84
    1446:	b1 e0       	ldi	r27, 0x01	; 1
    1448:	01 90       	ld	r0, Z+
    144a:	0d 92       	st	X+, r0
    144c:	8a 95       	dec	r24
    144e:	e1 f7       	brne	.-8      	; 0x1448 <send_keyboard+0x98>
    1450:	d5 cf       	rjmp	.-86     	; 0x13fc <send_keyboard+0x4c>

00001452 <EVENT_USB_Device_Connect>:
    print("[C]");
    1452:	85 e4       	ldi	r24, 0x45	; 69
    1454:	92 e0       	ldi	r25, 0x02	; 2
    1456:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    if (!USB_IsInitialized) {
    145a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_IsInitialized>
    145e:	81 11       	cpse	r24, r1
    1460:	09 c0       	rjmp	.+18     	; 0x1474 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1462:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <USB_Disable>
        USB_Init();
    1466:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    146a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    146e:	84 60       	ori	r24, 0x04	; 4
    1470:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
}
    1474:	08 95       	ret

00001476 <EVENT_USB_Device_Disconnect>:
    print("[D]");
    1476:	81 e4       	ldi	r24, 0x41	; 65
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    USB_IsInitialized = false;
    147e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_IsInitialized>
}
    1482:	08 95       	ret

00001484 <EVENT_USB_Device_Reset>:
}
    1484:	08 95       	ret

00001486 <EVENT_USB_Device_StartOfFrame>:
    if (++count % 50) return;
    1486:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <count.4840>
    148a:	2f 5f       	subi	r18, 0xFF	; 255
    148c:	82 2f       	mov	r24, r18
    148e:	62 e3       	ldi	r22, 0x32	; 50
    1490:	0e 94 11 2b 	call	0x5622	; 0x5622 <__udivmodqi4>
    1494:	99 23       	and	r25, r25
    1496:	19 f0       	breq	.+6      	; 0x149e <EVENT_USB_Device_StartOfFrame+0x18>
    1498:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <count.4840>
    149c:	08 95       	ret
    count = 0;
    149e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <count.4840>
    if (!console_flush) return;
    14a2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <console_flush>
    14a6:	88 23       	and	r24, r24
    14a8:	e9 f0       	breq	.+58     	; 0x14e4 <EVENT_USB_Device_StartOfFrame+0x5e>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    14aa:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	b9 f4       	brne	.+46     	; 0x14e0 <EVENT_USB_Device_StartOfFrame+0x5a>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14b2:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    14b6:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14b8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    14bc:	80 fd       	sbrc	r24, 0
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <EVENT_USB_Device_StartOfFrame+0x60>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14c2:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    14ca:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14ce:	90 ff       	sbrs	r25, 0
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <EVENT_USB_Device_StartOfFrame+0x54>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14d2:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <EVENT_USB_Device_StartOfFrame+0x68>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14da:	8f 70       	andi	r24, 0x0F	; 15
    14dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    console_flush = false;
    14e0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <console_flush>
}
    14e4:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	ec cf       	rjmp	.-40     	; 0x14c2 <EVENT_USB_Device_StartOfFrame+0x3c>
				UEDATX = Data;
    14ea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    while (Endpoint_IsReadWriteAllowed())
    14f2:	95 fd       	sbrc	r25, 5
    14f4:	fa cf       	rjmp	.-12     	; 0x14ea <EVENT_USB_Device_StartOfFrame+0x64>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14f6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (Endpoint_IsINReady()) {
    14fa:	90 ff       	sbrs	r25, 0
    14fc:	ee cf       	rjmp	.-36     	; 0x14da <EVENT_USB_Device_StartOfFrame+0x54>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14fe:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1502:	9e 77       	andi	r25, 0x7E	; 126
    1504:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1508:	e8 cf       	rjmp	.-48     	; 0x14da <EVENT_USB_Device_StartOfFrame+0x54>

0000150a <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    150a:	42 e0       	ldi	r20, 0x02	; 2
    150c:	61 ec       	ldi	r22, 0xC1	; 193
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
    1514:	42 e0       	ldi	r20, 0x02	; 2
    1516:	61 ec       	ldi	r22, 0xC1	; 193
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
    151e:	42 e0       	ldi	r20, 0x02	; 2
    1520:	61 ec       	ldi	r22, 0xC1	; 193
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
    1528:	42 e2       	ldi	r20, 0x22	; 34
    152a:	61 ec       	ldi	r22, 0xC1	; 193
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
    1532:	42 e2       	ldi	r20, 0x22	; 34
    1534:	61 ec       	ldi	r22, 0xC1	; 193
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>

0000153c <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    153c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_ControlRequest+0x1>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	09 f4       	brne	.+2      	; 0x1546 <EVENT_USB_Device_ControlRequest+0xa>
    1544:	55 c0       	rjmp	.+170    	; 0x15f0 <EVENT_USB_Device_ControlRequest+0xb4>
    1546:	30 f4       	brcc	.+12     	; 0x1554 <EVENT_USB_Device_ControlRequest+0x18>
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	71 f1       	breq	.+92     	; 0x15a8 <EVENT_USB_Device_ControlRequest+0x6c>
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	09 f4       	brne	.+2      	; 0x1552 <EVENT_USB_Device_ControlRequest+0x16>
    1550:	91 c0       	rjmp	.+290    	; 0x1674 <EVENT_USB_Device_ControlRequest+0x138>
    1552:	08 95       	ret
    1554:	8a 30       	cpi	r24, 0x0A	; 10
    1556:	09 f4       	brne	.+2      	; 0x155a <EVENT_USB_Device_ControlRequest+0x1e>
    1558:	7d c0       	rjmp	.+250    	; 0x1654 <EVENT_USB_Device_ControlRequest+0x118>
    155a:	8b 30       	cpi	r24, 0x0B	; 11
    155c:	09 f4       	brne	.+2      	; 0x1560 <EVENT_USB_Device_ControlRequest+0x24>
    155e:	63 c0       	rjmp	.+198    	; 0x1626 <EVENT_USB_Device_ControlRequest+0xea>
    1560:	89 30       	cpi	r24, 0x09	; 9
    1562:	09 f0       	breq	.+2      	; 0x1566 <EVENT_USB_Device_ControlRequest+0x2a>
    1564:	44 c0       	rjmp	.+136    	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1566:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    156a:	81 32       	cpi	r24, 0x21	; 33
    156c:	09 f0       	breq	.+2      	; 0x1570 <EVENT_USB_Device_ControlRequest+0x34>
    156e:	3f c0       	rjmp	.+126    	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
                switch (USB_ControlRequest.wIndex) {
    1570:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1574:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	11 f0       	breq	.+4      	; 0x1580 <EVENT_USB_Device_ControlRequest+0x44>
    157c:	04 97       	sbiw	r24, 0x04	; 4
    157e:	b9 f5       	brne	.+110    	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1584:	87 7f       	andi	r24, 0xF7	; 247
    1586:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    158a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    158e:	82 ff       	sbrs	r24, 2
    1590:	2a c0       	rjmp	.+84     	; 0x15e6 <EVENT_USB_Device_ControlRequest+0xaa>
				return UEDATX;
    1592:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1596:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    159a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    159e:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    15a4:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15a8:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    15ac:	81 3a       	cpi	r24, 0xA1	; 161
    15ae:	f9 f4       	brne	.+62     	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    15b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15b4:	87 7f       	andi	r24, 0xF7	; 247
    15b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    15ba:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    15be:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    15c2:	89 2b       	or	r24, r25
    15c4:	61 f4       	brne	.+24     	; 0x15de <EVENT_USB_Device_ControlRequest+0xa2>
                    ReportSize = sizeof(keyboard_report_sent);
    15c6:	60 e2       	ldi	r22, 0x20	; 32
                    ReportData = (uint8_t*)&keyboard_report_sent;
    15c8:	84 e5       	ldi	r24, 0x54	; 84
    15ca:	91 e0       	ldi	r25, 0x01	; 1
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15d6:	8b 77       	andi	r24, 0x7B	; 123
    15d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15dc:	08 95       	ret
    uint8_t  ReportSize = 0;
    15de:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	f3 cf       	rjmp	.-26     	; 0x15cc <EVENT_USB_Device_ControlRequest+0x90>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    15e6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    15ea:	81 11       	cpse	r24, r1
    15ec:	ce cf       	rjmp	.-100    	; 0x158a <EVENT_USB_Device_ControlRequest+0x4e>
}
    15ee:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15f0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    15f4:	81 3a       	cpi	r24, 0xA1	; 161
    15f6:	d9 f7       	brne	.-10     	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15f8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    15fc:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    1600:	89 2b       	or	r24, r25
    1602:	a9 f7       	brne	.-22     	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1604:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1608:	87 7f       	andi	r24, 0xF7	; 247
    160a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    160e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    1612:	80 ff       	sbrs	r24, 0
    1614:	fc cf       	rjmp	.-8      	; 0x160e <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1616:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
				UEDATX = Data;
    161a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    161e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1622:	8e 77       	andi	r24, 0x7E	; 126
    1624:	bd cf       	rjmp	.-134    	; 0x15a0 <EVENT_USB_Device_ControlRequest+0x64>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1626:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    162a:	81 32       	cpi	r24, 0x21	; 33
    162c:	01 f7       	brne	.-64     	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    162e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1632:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x5>
    1636:	89 2b       	or	r24, r25
    1638:	d1 f6       	brne	.-76     	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    163a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    163e:	87 7f       	andi	r24, 0xF7	; 247
    1640:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    1644:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1648:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    164c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <keyboard_protocol>
                    clear_keyboard();
    1650:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1654:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    1658:	81 32       	cpi	r24, 0x21	; 33
    165a:	49 f6       	brne	.-110    	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
    165c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1660:	87 7f       	andi	r24, 0xF7	; 247
    1662:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1666:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    166a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x3>
    166e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <keyboard_idle>
    1672:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1674:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    1678:	81 3a       	cpi	r24, 0xA1	; 161
    167a:	09 f0       	breq	.+2      	; 0x167e <EVENT_USB_Device_ControlRequest+0x142>
    167c:	b8 cf       	rjmp	.-144    	; 0x15ee <EVENT_USB_Device_ControlRequest+0xb2>
    167e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1682:	87 7f       	andi	r24, 0xF7	; 247
    1684:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1688:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    168c:	80 ff       	sbrs	r24, 0
    168e:	fc cf       	rjmp	.-8      	; 0x1688 <EVENT_USB_Device_ControlRequest+0x14c>
                Endpoint_Write_8(keyboard_idle);
    1690:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    1694:	c2 cf       	rjmp	.-124    	; 0x161a <EVENT_USB_Device_ControlRequest+0xde>

00001696 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1696:	08 95       	ret

00001698 <hook_late_init>:
    1698:	08 95       	ret

0000169a <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    169a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <keyboard_led_stats>
    169e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_led_stats>
    keyboard_led_stats = 0;
    16a2:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <keyboard_led_stats>
    led_set(keyboard_led_stats);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 de 08 	call	0x11bc	; 0x11bc <led_set>

    matrix_clear();
    16ac:	0e 94 2a 12 	call	0x2454	; 0x2454 <matrix_clear>
    clear_keyboard();
    16b0:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <clear_keyboard>

000016b4 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    16b4:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <hook_usb_suspend_entry>

000016b8 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    16b8:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    16bc:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_Device_RemoteWakeupEnabled>
    16c0:	88 23       	and	r24, r24
    16c2:	29 f0       	breq	.+10     	; 0x16ce <hook_usb_suspend_loop+0x16>
    16c4:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <suspend_wakeup_condition>
    16c8:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    16ca:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <USB_Device_SendRemoteWakeup>
    }
}
    16ce:	08 95       	ret

000016d0 <main>:
    MCUSR &= ~(1 << WDRF);
    16d0:	84 b7       	in	r24, 0x34	; 52
    16d2:	87 7f       	andi	r24, 0xF7	; 247
    16d4:	84 bf       	out	0x34, r24	; 52
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	a8 95       	wdr
    16dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    16e0:	88 61       	ori	r24, 0x18	; 24
    16e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    16e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    16ea:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    16ec:	80 e8       	ldi	r24, 0x80	; 128
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    16f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    16fc:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    16fe:	88 ee       	ldi	r24, 0xE8	; 232
    1700:	98 e0       	ldi	r25, 0x08	; 8
    1702:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <print_set_sendchar>
    print("\r\ninit\n");
    1706:	89 e3       	ldi	r24, 0x39	; 57
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    hook_early_init();
    170e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <hook_early_init>
    keyboard_setup();
    1712:	0e 94 57 11 	call	0x22ae	; 0x22ae <keyboard_setup>
    USB_Disable();
    1716:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <USB_Disable>
    USB_Init();
    171a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <USB_Init>
    171e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    sei();
    1728:	78 94       	sei
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    172a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	e1 f7       	brne	.-8      	; 0x172a <main+0x5a>
    print("USB configured.\n");
    1732:	88 e2       	ldi	r24, 0x28	; 40
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    keyboard_init();
    173a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <keyboard_init>
    host_set_driver(&lufa_driver);
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 95 10 	call	0x212a	; 0x212a <host_set_driver>
    print("Keyboard start.\n");
    1746:	87 e1       	ldi	r24, 0x17	; 23
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    hook_late_init();
    174e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <hook_late_init>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1752:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1756:	85 30       	cpi	r24, 0x05	; 5
    1758:	19 f0       	breq	.+6      	; 0x1760 <main+0x90>
        keyboard_task();
    175a:	0e 94 5f 11 	call	0x22be	; 0x22be <keyboard_task>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    175e:	f9 cf       	rjmp	.-14     	; 0x1752 <main+0x82>
            hook_usb_suspend_loop();
    1760:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <hook_usb_suspend_loop>
    1764:	f6 cf       	rjmp	.-20     	; 0x1752 <main+0x82>

00001766 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1766:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    176a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_led_stats>
    176e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <keyboard_led_stats>
}
    1772:	08 95       	ret

00001774 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    1774:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <hook_usb_wakeup>

00001778 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1778:	29 2f       	mov	r18, r25
    177a:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    177c:	23 30       	cpi	r18, 0x03	; 3
    177e:	31 05       	cpc	r19, r1
    1780:	79 f1       	breq	.+94     	; 0x17e0 <CALLBACK_USB_GetDescriptor+0x68>
    1782:	58 f4       	brcc	.+22     	; 0x179a <CALLBACK_USB_GetDescriptor+0x22>
    1784:	21 30       	cpi	r18, 0x01	; 1
    1786:	31 05       	cpc	r19, r1
    1788:	f1 f0       	breq	.+60     	; 0x17c6 <CALLBACK_USB_GetDescriptor+0x4e>
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	19 f1       	breq	.+70     	; 0x17d6 <CALLBACK_USB_GetDescriptor+0x5e>
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	1a c0       	rjmp	.+52     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x56>
    switch (DescriptorType)
    179a:	21 32       	cpi	r18, 0x21	; 33
    179c:	31 05       	cpc	r19, r1
    179e:	99 f1       	breq	.+102    	; 0x1806 <CALLBACK_USB_GetDescriptor+0x8e>
    17a0:	22 32       	cpi	r18, 0x22	; 34
    17a2:	31 05       	cpc	r19, r1
    17a4:	a9 f7       	brne	.-22     	; 0x1790 <CALLBACK_USB_GetDescriptor+0x18>
    17a6:	65 30       	cpi	r22, 0x05	; 5
    17a8:	98 f7       	brcc	.-26     	; 0x1790 <CALLBACK_USB_GetDescriptor+0x18>
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	fb 01       	movw	r30, r22
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	e6 5e       	subi	r30, 0xE6	; 230
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	20 81       	ld	r18, Z
    17b8:	31 81       	ldd	r19, Z+1	; 0x01
    17ba:	6b 5e       	subi	r22, 0xEB	; 235
    17bc:	7e 4f       	sbci	r23, 0xFE	; 254
    17be:	fb 01       	movw	r30, r22
    17c0:	80 81       	ld	r24, Z
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <CALLBACK_USB_GetDescriptor+0x56>
            Size    = sizeof(USB_Descriptor_Device_t);
    17c6:	82 e1       	ldi	r24, 0x12	; 18
    17c8:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    17ca:	2a ef       	ldi	r18, 0xFA	; 250
    17cc:	32 e0       	ldi	r19, 0x02	; 2
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    17ce:	fa 01       	movw	r30, r20
    17d0:	31 83       	std	Z+1, r19	; 0x01
    17d2:	20 83       	st	Z, r18
    return Size;
}
    17d4:	08 95       	ret
            Size    = sizeof(USB_Descriptor_Configuration_t);
    17d6:	8d e8       	ldi	r24, 0x8D	; 141
    17d8:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    17da:	2d e6       	ldi	r18, 0x6D	; 109
    17dc:	32 e0       	ldi	r19, 0x02	; 2
            break;
    17de:	f7 cf       	rjmp	.-18     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x56>
            switch (DescriptorIndex )
    17e0:	99 27       	eor	r25, r25
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	61 f0       	breq	.+24     	; 0x1800 <CALLBACK_USB_GetDescriptor+0x88>
    17e8:	28 f0       	brcs	.+10     	; 0x17f4 <CALLBACK_USB_GetDescriptor+0x7c>
    17ea:	02 97       	sbiw	r24, 0x02	; 2
    17ec:	89 f6       	brne	.-94     	; 0x1790 <CALLBACK_USB_GetDescriptor+0x18>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    17ee:	e9 e4       	ldi	r30, 0x49	; 73
    17f0:	f2 e0       	ldi	r31, 0x02	; 2
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <CALLBACK_USB_GetDescriptor+0x80>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    17f4:	e9 e6       	ldi	r30, 0x69	; 105
    17f6:	f2 e0       	ldi	r31, 0x02	; 2
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    17f8:	84 91       	lpm	r24, Z
    17fa:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    17fc:	9f 01       	movw	r18, r30
                    break;
    17fe:	e7 cf       	rjmp	.-50     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x56>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1800:	e5 e5       	ldi	r30, 0x55	; 85
    1802:	f2 e0       	ldi	r31, 0x02	; 2
    1804:	f9 cf       	rjmp	.-14     	; 0x17f8 <CALLBACK_USB_GetDescriptor+0x80>
    1806:	65 30       	cpi	r22, 0x05	; 5
    1808:	08 f0       	brcs	.+2      	; 0x180c <CALLBACK_USB_GetDescriptor+0x94>
    180a:	c2 cf       	rjmp	.-124    	; 0x1790 <CALLBACK_USB_GetDescriptor+0x18>
    180c:	e6 2f       	mov	r30, r22
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	ec 5d       	subi	r30, 0xDC	; 220
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	20 81       	ld	r18, Z
    181a:	31 81       	ldd	r19, Z+1	; 0x01
        case HID_DTYPE_HID:
    181c:	89 e0       	ldi	r24, 0x09	; 9
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	d6 cf       	rjmp	.-84     	; 0x17ce <CALLBACK_USB_GetDescriptor+0x56>

00001822 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1822:	80 e1       	ldi	r24, 0x10	; 16
    1824:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1826:	82 e1       	ldi	r24, 0x12	; 18
    1828:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    182a:	09 b4       	in	r0, 0x29	; 41
    182c:	00 fe       	sbrs	r0, 0
    182e:	fd cf       	rjmp	.-6      	; 0x182a <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1830:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1834:	8f 7d       	andi	r24, 0xDF	; 223
    1836:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    183a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    183e:	82 60       	ori	r24, 0x02	; 2
    1840:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1844:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1848:	81 fd       	sbrc	r24, 1
    184a:	fc cf       	rjmp	.-8      	; 0x1844 <USB_Device_SendRemoteWakeup+0x22>
}
    184c:	08 95       	ret

0000184e <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    184e:	af 92       	push	r10
    1850:	bf 92       	push	r11
    1852:	cf 92       	push	r12
    1854:	df 92       	push	r13
    1856:	ff 92       	push	r15
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	6c 01       	movw	r12, r24
    1862:	eb 01       	movw	r28, r22
    1864:	8a 01       	movw	r16, r20
    1866:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <Endpoint_WaitUntilReady>
    186a:	f8 2e       	mov	r15, r24
    186c:	81 11       	cpse	r24, r1
    186e:	23 c0       	rjmp	.+70     	; 0x18b6 <Endpoint_Write_Stream_LE+0x68>
    1870:	01 15       	cp	r16, r1
    1872:	11 05       	cpc	r17, r1
    1874:	39 f0       	breq	.+14     	; 0x1884 <Endpoint_Write_Stream_LE+0x36>
    1876:	f8 01       	movw	r30, r16
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	c8 1b       	sub	r28, r24
    187e:	d9 0b       	sbc	r29, r25
    1880:	c8 0e       	add	r12, r24
    1882:	d9 1e       	adc	r13, r25
    1884:	b1 2c       	mov	r11, r1
    1886:	a1 2c       	mov	r10, r1
    1888:	20 97       	sbiw	r28, 0x00	; 0
    188a:	a9 f0       	breq	.+42     	; 0x18b6 <Endpoint_Write_Stream_LE+0x68>
    188c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1890:	85 fd       	sbrc	r24, 5
    1892:	22 c0       	rjmp	.+68     	; 0x18d8 <Endpoint_Write_Stream_LE+0x8a>
    1894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1898:	8e 77       	andi	r24, 0x7E	; 126
    189a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189e:	01 15       	cp	r16, r1
    18a0:	11 05       	cpc	r17, r1
    18a2:	a1 f0       	breq	.+40     	; 0x18cc <Endpoint_Write_Stream_LE+0x7e>
    18a4:	f8 01       	movw	r30, r16
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	a8 0e       	add	r10, r24
    18ac:	b9 1e       	adc	r11, r25
    18ae:	b1 82       	std	Z+1, r11	; 0x01
    18b0:	a0 82       	st	Z, r10
    18b2:	85 e0       	ldi	r24, 0x05	; 5
    18b4:	f8 2e       	mov	r15, r24
    18b6:	8f 2d       	mov	r24, r15
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	08 95       	ret
    18cc:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <Endpoint_WaitUntilReady>
    18d0:	88 23       	and	r24, r24
    18d2:	d1 f2       	breq	.-76     	; 0x1888 <Endpoint_Write_Stream_LE+0x3a>
    18d4:	f8 2e       	mov	r15, r24
    18d6:	ef cf       	rjmp	.-34     	; 0x18b6 <Endpoint_Write_Stream_LE+0x68>
    18d8:	f6 01       	movw	r30, r12
    18da:	81 91       	ld	r24, Z+
    18dc:	6f 01       	movw	r12, r30
    18de:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18e2:	21 97       	sbiw	r28, 0x01	; 1
    18e4:	ff ef       	ldi	r31, 0xFF	; 255
    18e6:	af 1a       	sub	r10, r31
    18e8:	bf 0a       	sbc	r11, r31
    18ea:	ce cf       	rjmp	.-100    	; 0x1888 <Endpoint_Write_Stream_LE+0x3a>

000018ec <Endpoint_Write_Control_Stream_LE>:
    18ec:	fc 01       	movw	r30, r24
    18ee:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USB_ControlRequest+0x6>
    18f2:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <USB_ControlRequest+0x7>
    18f6:	86 17       	cp	r24, r22
    18f8:	97 07       	cpc	r25, r23
    18fa:	a0 f0       	brcs	.+40     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x38>
    18fc:	61 15       	cp	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	29 f4       	brne	.+10     	; 0x190c <Endpoint_Write_Control_Stream_LE+0x20>
    1902:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1906:	9e 77       	andi	r25, 0x7E	; 126
    1908:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	51 f4       	brne	.+20     	; 0x1928 <Endpoint_Write_Control_Stream_LE+0x3c>
    1914:	91 11       	cpse	r25, r1
    1916:	08 c0       	rjmp	.+16     	; 0x1928 <Endpoint_Write_Control_Stream_LE+0x3c>
    1918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    191c:	82 ff       	sbrs	r24, 2
    191e:	35 c0       	rjmp	.+106    	; 0x198a <Endpoint_Write_Control_Stream_LE+0x9e>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	08 95       	ret
    1924:	bc 01       	movw	r22, r24
    1926:	f2 cf       	rjmp	.-28     	; 0x190c <Endpoint_Write_Control_Stream_LE+0x20>
    1928:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    192c:	88 23       	and	r24, r24
    192e:	c9 f1       	breq	.+114    	; 0x19a2 <Endpoint_Write_Control_Stream_LE+0xb6>
    1930:	85 30       	cpi	r24, 0x05	; 5
    1932:	c9 f1       	breq	.+114    	; 0x19a6 <Endpoint_Write_Control_Stream_LE+0xba>
    1934:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1938:	83 fd       	sbrc	r24, 3
    193a:	31 c0       	rjmp	.+98     	; 0x199e <Endpoint_Write_Control_Stream_LE+0xb2>
    193c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1940:	82 fd       	sbrc	r24, 2
    1942:	ea cf       	rjmp	.-44     	; 0x1918 <Endpoint_Write_Control_Stream_LE+0x2c>
    1944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1948:	80 ff       	sbrs	r24, 0
    194a:	e1 cf       	rjmp	.-62     	; 0x190e <Endpoint_Write_Control_Stream_LE+0x22>
    194c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1950:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1954:	32 2f       	mov	r19, r18
    1956:	28 2f       	mov	r18, r24
    1958:	61 15       	cp	r22, r1
    195a:	71 05       	cpc	r23, r1
    195c:	19 f0       	breq	.+6      	; 0x1964 <Endpoint_Write_Control_Stream_LE+0x78>
    195e:	28 30       	cpi	r18, 0x08	; 8
    1960:	31 05       	cpc	r19, r1
    1962:	58 f0       	brcs	.+22     	; 0x197a <Endpoint_Write_Control_Stream_LE+0x8e>
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	28 30       	cpi	r18, 0x08	; 8
    1968:	31 05       	cpc	r19, r1
    196a:	09 f0       	breq	.+2      	; 0x196e <Endpoint_Write_Control_Stream_LE+0x82>
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1972:	2e 77       	andi	r18, 0x7E	; 126
    1974:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1978:	ca cf       	rjmp	.-108    	; 0x190e <Endpoint_Write_Control_Stream_LE+0x22>
    197a:	81 91       	ld	r24, Z+
    197c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1980:	61 50       	subi	r22, 0x01	; 1
    1982:	71 09       	sbc	r23, r1
    1984:	2f 5f       	subi	r18, 0xFF	; 255
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	e7 cf       	rjmp	.-50     	; 0x1958 <Endpoint_Write_Control_Stream_LE+0x6c>
    198a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    198e:	88 23       	and	r24, r24
    1990:	41 f0       	breq	.+16     	; 0x19a2 <Endpoint_Write_Control_Stream_LE+0xb6>
    1992:	85 30       	cpi	r24, 0x05	; 5
    1994:	41 f0       	breq	.+16     	; 0x19a6 <Endpoint_Write_Control_Stream_LE+0xba>
    1996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    199a:	83 ff       	sbrs	r24, 3
    199c:	bd cf       	rjmp	.-134    	; 0x1918 <Endpoint_Write_Control_Stream_LE+0x2c>
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	08 95       	ret
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	08 95       	ret
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	08 95       	ret

000019aa <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    19aa:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19ac:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USB_ControlRequest+0x6>
    19b0:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <USB_ControlRequest+0x7>
    19b4:	86 17       	cp	r24, r22
    19b6:	97 07       	cpc	r25, r23
    19b8:	a0 f0       	brcs	.+40     	; 0x19e2 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19ba:	61 15       	cp	r22, r1
    19bc:	71 05       	cpc	r23, r1
    19be:	29 f4       	brne	.+10     	; 0x19ca <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19c4:	8e 77       	andi	r24, 0x7E	; 126
    19c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19ca:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	51 f4       	brne	.+20     	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x3c>
    19d2:	91 11       	cpse	r25, r1
    19d4:	08 c0       	rjmp	.+16     	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19da:	82 ff       	sbrs	r24, 2
    19dc:	36 c0       	rjmp	.+108    	; 0x1a4a <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	08 95       	ret
    19e2:	bc 01       	movw	r22, r24
    19e4:	f2 cf       	rjmp	.-28     	; 0x19ca <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19e6:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19ea:	88 23       	and	r24, r24
    19ec:	d1 f1       	breq	.+116    	; 0x1a62 <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ee:	85 30       	cpi	r24, 0x05	; 5
    19f0:	d1 f1       	breq	.+116    	; 0x1a66 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    19f6:	83 fd       	sbrc	r24, 3
    19f8:	32 c0       	rjmp	.+100    	; 0x1a5e <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    19fe:	82 fd       	sbrc	r24, 2
    1a00:	ea cf       	rjmp	.-44     	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1a06:	80 ff       	sbrs	r24, 0
    1a08:	e1 cf       	rjmp	.-62     	; 0x19cc <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1a0a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a0e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a12:	32 2f       	mov	r19, r18
    1a14:	28 2f       	mov	r18, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a16:	61 15       	cp	r22, r1
    1a18:	71 05       	cpc	r23, r1
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <Endpoint_Write_Control_PStream_LE+0x78>
    1a1c:	28 30       	cpi	r18, 0x08	; 8
    1a1e:	31 05       	cpc	r19, r1
    1a20:	58 f0       	brcs	.+22     	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	28 30       	cpi	r18, 0x08	; 8
    1a26:	31 05       	cpc	r19, r1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <Endpoint_Write_Control_PStream_LE+0x82>
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a30:	8e 77       	andi	r24, 0x7E	; 126
    1a32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a36:	ca cf       	rjmp	.-108    	; 0x19cc <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a38:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a3a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a3e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a40:	61 50       	subi	r22, 0x01	; 1
    1a42:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	e6 cf       	rjmp	.-52     	; 0x1a16 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a4a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a4e:	88 23       	and	r24, r24
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a52:	85 30       	cpi	r24, 0x05	; 5
    1a54:	41 f0       	breq	.+16     	; 0x1a66 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1a5a:	83 ff       	sbrs	r24, 3
    1a5c:	bc cf       	rjmp	.-136    	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
}
    1a60:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	08 95       	ret

00001a6a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a6a:	98 2f       	mov	r25, r24
    1a6c:	97 30       	cpi	r25, 0x07	; 7
    1a6e:	28 f0       	brcs	.+10     	; 0x1a7a <Endpoint_ConfigureEndpoint_Prv+0x10>
    1a70:	8f 70       	andi	r24, 0x0F	; 15
    1a72:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret
    1a7a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a7e:	24 2f       	mov	r18, r20
    1a80:	76 2f       	mov	r23, r22
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	98 17       	cp	r25, r24
    1a86:	31 f0       	breq	.+12     	; 0x1a94 <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1a88:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a8c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1a90:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1a94:	21 fd       	sbrc	r18, 1
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <Endpoint_ConfigureEndpoint_Prv+0x32>
    1a98:	9f 5f       	subi	r25, 0xFF	; 255
    1a9a:	e8 cf       	rjmp	.-48     	; 0x1a6c <Endpoint_ConfigureEndpoint_Prv+0x2>
    1a9c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aa0:	3e 7f       	andi	r19, 0xFE	; 254
    1aa2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aa6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1aaa:	3d 7f       	andi	r19, 0xFD	; 253
    1aac:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ab0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ab4:	31 60       	ori	r19, 0x01	; 1
    1ab6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aba:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1abe:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1ac2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1ac6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1aca:	27 fd       	sbrc	r18, 7
    1acc:	e5 cf       	rjmp	.-54     	; 0x1a98 <Endpoint_ConfigureEndpoint_Prv+0x2e>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	08 95       	ret

00001ad2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ad2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>
    1ad6:	87 ff       	sbrs	r24, 7
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ada:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1ade:	82 ff       	sbrs	r24, 2
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ae2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ae6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1aee:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1af2:	81 11       	cpse	r24, r1
    1af4:	f2 cf       	rjmp	.-28     	; 0x1ada <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1af6:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1af8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    1afc:	88 23       	and	r24, r24
    1afe:	d9 f3       	breq	.-10     	; 0x1af6 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1b04:	80 ff       	sbrs	r24, 0
    1b06:	f8 cf       	rjmp	.-16     	; 0x1af8 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b0c:	8e 77       	andi	r24, 0x7E	; 126
    1b0e:	ec cf       	rjmp	.-40     	; 0x1ae8 <Endpoint_ClearStatusStage+0x16>

00001b10 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b10:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b14:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1b18:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b1a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1b1e:	90 ff       	sbrs	r25, 0
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b22:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b26:	90 ff       	sbrs	r25, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b2e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b32:	92 fd       	sbrc	r25, 2
    1b34:	fa cf       	rjmp	.-12     	; 0x1b2a <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b36:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b3a:	99 23       	and	r25, r25
    1b3c:	91 f0       	breq	.+36     	; 0x1b62 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b3e:	95 30       	cpi	r25, 0x05	; 5
    1b40:	91 f0       	breq	.+36     	; 0x1b66 <Endpoint_WaitUntilReady+0x56>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b42:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b46:	95 fd       	sbrc	r25, 5
    1b48:	10 c0       	rjmp	.+32     	; 0x1b6a <Endpoint_WaitUntilReady+0x5a>
    1b4a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1b4e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b52:	24 17       	cp	r18, r20
    1b54:	35 07       	cpc	r19, r21
    1b56:	09 f3       	breq	.-62     	; 0x1b1a <Endpoint_WaitUntilReady+0xa>
    1b58:	81 50       	subi	r24, 0x01	; 1
    1b5a:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b5c:	f1 f6       	brne	.-68     	; 0x1b1a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
    1b60:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1b6c:	08 95       	ret

00001b6e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b6e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b72:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b76:	e0 ee       	ldi	r30, 0xE0	; 224
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b80:	e8 ed       	ldi	r30, 0xD8	; 216
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8f 77       	andi	r24, 0x7F	; 127
    1b88:	80 83       	st	Z, r24
				PLLCSR = 0;
    1b8a:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1b8c:	a7 ed       	ldi	r26, 0xD7	; 215
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	8c 91       	ld	r24, X
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1b96:	80 81       	ld	r24, Z
    1b98:	8f 7e       	andi	r24, 0xEF	; 239
    1b9a:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b9c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_IsInitialized>
}
    1ba0:	08 95       	ret

00001ba2 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1baa:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bae:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bb2:	c8 ed       	ldi	r28, 0xD8	; 216
    1bb4:	d0 e0       	ldi	r29, 0x00	; 0
    1bb6:	88 81       	ld	r24, Y
    1bb8:	8f 77       	andi	r24, 0x7F	; 127
    1bba:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1bbc:	88 81       	ld	r24, Y
    1bbe:	80 68       	ori	r24, 0x80	; 128
    1bc0:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1bc2:	88 81       	ld	r24, Y
    1bc4:	8f 7d       	andi	r24, 0xDF	; 223
    1bc6:	88 83       	st	Y, r24
				PLLCSR = 0;
    1bc8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bca:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1bce:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bd2:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bd6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bda:	00 ee       	ldi	r16, 0xE0	; 224
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
    1bde:	f8 01       	movw	r30, r16
    1be0:	80 81       	ld	r24, Z
    1be2:	8b 7f       	andi	r24, 0xFB	; 251
    1be4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1be6:	88 81       	ld	r24, Y
    1be8:	81 60       	ori	r24, 0x01	; 1
    1bea:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bec:	42 e0       	ldi	r20, 0x02	; 2
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bf6:	e1 ee       	ldi	r30, 0xE1	; 225
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1c00:	e2 ee       	ldi	r30, 0xE2	; 226
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1c10:	f8 01       	movw	r30, r16
    1c12:	80 81       	ld	r24, Z
    1c14:	8e 7f       	andi	r24, 0xFE	; 254
    1c16:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1c18:	88 81       	ld	r24, Y
    1c1a:	80 61       	ori	r24, 0x10	; 16
    1c1c:	88 83       	st	Y, r24
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1c28:	e8 ed       	ldi	r30, 0xD8	; 216
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8f 7e       	andi	r24, 0xEF	; 239
    1c30:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1c32:	e7 ed       	ldi	r30, 0xD7	; 215
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	81 60       	ori	r24, 0x01	; 1
    1c3a:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <USB_IsInitialized>
	USB_ResetInterface();
    1c46:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <USB_ResetInterface>

00001c4a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c4a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	8e 7f       	andi	r24, 0xFE	; 254
    1c52:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c54:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1c58:	08 95       	ret

00001c5a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c5a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c5e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1c62:	08 95       	ret

00001c64 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c8a:	82 ff       	sbrs	r24, 2
    1c8c:	0b c0       	rjmp	.+22     	; 0x1ca4 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1c8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c92:	82 ff       	sbrs	r24, 2
    1c94:	07 c0       	rjmp	.+14     	; 0x1ca4 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1c96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c9a:	8b 7f       	andi	r24, 0xFB	; 251
    1c9c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ca0:	0e 94 43 0a 	call	0x1486	; 0x1486 <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
    1ca4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ca8:	80 ff       	sbrs	r24, 0
    1caa:	19 c0       	rjmp	.+50     	; 0x1cde <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1cac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1cb0:	80 ff       	sbrs	r24, 0
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1cb4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1cb8:	8e 7f       	andi	r24, 0xFE	; 254
    1cba:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1cbe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1cc2:	80 ff       	sbrs	r24, 0
    1cc4:	94 c0       	rjmp	.+296    	; 0x1dee <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    1cc6:	80 e1       	ldi	r24, 0x10	; 16
    1cc8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cca:	82 e1       	ldi	r24, 0x12	; 18
    1ccc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1cce:	09 b4       	in	r0, 0x29	; 41
    1cd0:	00 fe       	sbrs	r0, 0
    1cd2:	fd cf       	rjmp	.-6      	; 0x1cce <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1cda:	0e 94 29 0a 	call	0x1452	; 0x1452 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1cde:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1ce2:	80 ff       	sbrs	r24, 0
    1ce4:	19 c0       	rjmp	.+50     	; 0x1d18 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1ce6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cea:	80 ff       	sbrs	r24, 0
    1cec:	15 c0       	rjmp	.+42     	; 0x1d18 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1cee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cf2:	8e 7f       	andi	r24, 0xFE	; 254
    1cf4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1cf8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cfc:	80 61       	ori	r24, 0x10	; 16
    1cfe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1d02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d06:	80 62       	ori	r24, 0x20	; 32
    1d08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1d0c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d0e:	85 e0       	ldi	r24, 0x05	; 5
    1d10:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1d14:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1d18:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d1c:	84 ff       	sbrs	r24, 4
    1d1e:	29 c0       	rjmp	.+82     	; 0x1d72 <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    1d20:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d24:	84 ff       	sbrs	r24, 4
    1d26:	25 c0       	rjmp	.+74     	; 0x1d72 <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    1d28:	80 e1       	ldi	r24, 0x10	; 16
    1d2a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d2c:	82 e1       	ldi	r24, 0x12	; 18
    1d2e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d30:	09 b4       	in	r0, 0x29	; 41
    1d32:	00 fe       	sbrs	r0, 0
    1d34:	fd cf       	rjmp	.-6      	; 0x1d30 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1d36:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1d40:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d44:	8f 7e       	andi	r24, 0xEF	; 239
    1d46:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1d4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d4e:	8f 7e       	andi	r24, 0xEF	; 239
    1d50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1d54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d58:	81 60       	ori	r24, 0x01	; 1
    1d5a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d5e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
    1d62:	88 23       	and	r24, r24
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <__vector_10+0x104>
    1d66:	49 c0       	rjmp	.+146    	; 0x1dfa <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d68:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d6a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d6e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1d72:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d76:	83 ff       	sbrs	r24, 3
    1d78:	29 c0       	rjmp	.+82     	; 0x1dcc <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    1d7a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d7e:	83 ff       	sbrs	r24, 3
    1d80:	25 c0       	rjmp	.+74     	; 0x1dcc <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    1d82:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d86:	87 7f       	andi	r24, 0xF7	; 247
    1d88:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d92:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1d96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d9a:	8e 7f       	andi	r24, 0xFE	; 254
    1d9c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1da0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1da4:	8e 7f       	andi	r24, 0xFE	; 254
    1da6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1daa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dae:	80 61       	ori	r24, 0x10	; 16
    1db0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1db4:	42 e0       	ldi	r20, 0x02	; 2
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1dbe:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1dc2:	88 60       	ori	r24, 0x08	; 8
    1dc4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1dc8:	0e 94 42 0a 	call	0x1484	; 0x1484 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1dcc:	ff 91       	pop	r31
    1dce:	ef 91       	pop	r30
    1dd0:	bf 91       	pop	r27
    1dd2:	af 91       	pop	r26
    1dd4:	9f 91       	pop	r25
    1dd6:	8f 91       	pop	r24
    1dd8:	7f 91       	pop	r23
    1dda:	6f 91       	pop	r22
    1ddc:	5f 91       	pop	r21
    1dde:	4f 91       	pop	r20
    1de0:	3f 91       	pop	r19
    1de2:	2f 91       	pop	r18
    1de4:	0f 90       	pop	r0
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	0f 90       	pop	r0
    1dea:	1f 90       	pop	r1
    1dec:	18 95       	reti
				PLLCSR = 0;
    1dee:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1df0:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1df4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <EVENT_USB_Device_Disconnect>
    1df8:	72 cf       	rjmp	.-284    	; 0x1cde <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1dfa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1dfe:	87 fd       	sbrc	r24, 7
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <__vector_10+0x1a2>
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	b2 cf       	rjmp	.-156    	; 0x1d6a <__vector_10+0x106>
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	b0 cf       	rjmp	.-160    	; 0x1d6a <__vector_10+0x106>

00001e0a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	11 24       	eor	r1, r1
    1e14:	2f 93       	push	r18
    1e16:	3f 93       	push	r19
    1e18:	4f 93       	push	r20
    1e1a:	5f 93       	push	r21
    1e1c:	6f 93       	push	r22
    1e1e:	7f 93       	push	r23
    1e20:	8f 93       	push	r24
    1e22:	9f 93       	push	r25
    1e24:	af 93       	push	r26
    1e26:	bf 93       	push	r27
    1e28:	cf 93       	push	r28
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e2e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1e32:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e34:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e38:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1e3c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e40:	87 7f       	andi	r24, 0xF7	; 247
    1e42:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e46:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e48:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <USB_Device_ProcessControlRequest>
    1e4c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1e50:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e54:	88 60       	ori	r24, 0x08	; 8
    1e56:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1e5a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	cf 91       	pop	r28
    1e64:	bf 91       	pop	r27
    1e66:	af 91       	pop	r26
    1e68:	9f 91       	pop	r25
    1e6a:	8f 91       	pop	r24
    1e6c:	7f 91       	pop	r23
    1e6e:	6f 91       	pop	r22
    1e70:	5f 91       	pop	r21
    1e72:	4f 91       	pop	r20
    1e74:	3f 91       	pop	r19
    1e76:	2f 91       	pop	r18
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	0f 90       	pop	r0
    1e7e:	1f 90       	pop	r1
    1e80:	18 95       	reti

00001e82 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	aa 97       	sbiw	r28, 0x2a	; 42
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	eb e4       	ldi	r30, 0x4B	; 75
    1e9a:	f2 e0       	ldi	r31, 0x02	; 2
				return UEDATX;
    1e9c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1ea0:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1ea2:	22 e0       	ldi	r18, 0x02	; 2
    1ea4:	e3 35       	cpi	r30, 0x53	; 83
    1ea6:	f2 07       	cpc	r31, r18
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1eaa:	0e 94 9e 0a 	call	0x153c	; 0x153c <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1eae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1eb2:	83 ff       	sbrs	r24, 3
    1eb4:	42 c0       	rjmp	.+132    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1eb6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1eba:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <USB_ControlRequest+0x1>
    1ebe:	9a 30       	cpi	r25, 0x0A	; 10
    1ec0:	08 f0       	brcs	.+2      	; 0x1ec4 <USB_Device_ProcessControlRequest+0x42>
    1ec2:	3b c0       	rjmp	.+118    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
    1ec4:	e9 2f       	mov	r30, r25
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	e8 59       	subi	r30, 0x98	; 152
    1eca:	f0 4f       	sbci	r31, 0xF0	; 240
    1ecc:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <__tablejump2__>
    1ed0:	72 0f       	add	r23, r18
    1ed2:	96 0f       	add	r25, r22
    1ed4:	9d 0f       	add	r25, r29
    1ed6:	96 0f       	add	r25, r22
    1ed8:	9d 0f       	add	r25, r29
    1eda:	f1 0f       	add	r31, r17
    1edc:	13 10       	cpse	r1, r3
    1ede:	9d 0f       	add	r25, r29
    1ee0:	68 10       	cpse	r6, r8
    1ee2:	75 10       	cpse	r7, r5
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ee4:	80 38       	cpi	r24, 0x80	; 128
    1ee6:	79 f0       	breq	.+30     	; 0x1f06 <USB_Device_ProcessControlRequest+0x84>
    1ee8:	82 38       	cpi	r24, 0x82	; 130
    1eea:	39 f5       	brne	.+78     	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1eec:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1ef0:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ef6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1efa:	85 fb       	bst	r24, 5
    1efc:	88 27       	eor	r24, r24
    1efe:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f00:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f04:	06 c0       	rjmp	.+12     	; 0x1f12 <USB_Device_ProcessControlRequest+0x90>
	uint8_t CurrentStatus = 0;
    1f06:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1f0a:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <USB_Device_RemoteWakeupEnabled>
    1f0e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f10:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1f12:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f16:	97 7f       	andi	r25, 0xF7	; 247
    1f18:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1f20:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f28:	8e 77       	andi	r24, 0x7E	; 126
    1f2a:	2d c0       	rjmp	.+90     	; 0x1f86 <USB_Device_ProcessControlRequest+0x104>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	2d 7f       	andi	r18, 0xFD	; 253
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f32:	88 23       	and	r24, r24
    1f34:	d1 f0       	breq	.+52     	; 0x1f6a <USB_Device_ProcessControlRequest+0xe8>
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	59 f1       	breq	.+86     	; 0x1f90 <USB_Device_ProcessControlRequest+0x10e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1f3e:	83 ff       	sbrs	r24, 3
    1f40:	0a c0       	rjmp	.+20     	; 0x1f56 <USB_Device_ProcessControlRequest+0xd4>
				UEINTX &= ~(1 << RXSTPI);
    1f42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f46:	87 7f       	andi	r24, 0xF7	; 247
    1f48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1f4c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f50:	80 62       	ori	r24, 0x20	; 32
    1f52:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1f56:	aa 96       	adiw	r28, 0x2a	; 42
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f6a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	21 f7       	brne	.-56     	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f72:	93 30       	cpi	r25, 0x03	; 3
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <USB_Device_ProcessControlRequest+0xf6>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1f80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f84:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1f8a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
    1f8e:	d5 cf       	rjmp	.-86     	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f90:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    1f94:	81 11       	cpse	r24, r1
    1f96:	f2 cf       	rjmp	.-28     	; 0x1f7c <USB_Device_ProcessControlRequest+0xfa>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f98:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    1f9c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1f9e:	69 f2       	breq	.-102    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fa0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1fa4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1fa8:	20 ff       	sbrs	r18, 0
    1faa:	e8 cf       	rjmp	.-48     	; 0x1f7c <USB_Device_ProcessControlRequest+0xfa>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1fac:	93 30       	cpi	r25, 0x03	; 3
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <USB_Device_ProcessControlRequest+0x13a>
				UECONX |= (1 << STALLRQ);
    1fb0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fb4:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1fb6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fba:	e0 cf       	rjmp	.-64     	; 0x1f7c <USB_Device_ProcessControlRequest+0xfa>
				UECONX |= (1 << STALLRQC);
    1fbc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fc0:	90 61       	ori	r25, 0x10	; 16
    1fc2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1fc6:	21 e0       	ldi	r18, 0x01	; 1
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <USB_Device_ProcessControlRequest+0x14c>
    1fcc:	22 0f       	add	r18, r18
    1fce:	8a 95       	dec	r24
    1fd0:	ea f7       	brpl	.-6      	; 0x1fcc <USB_Device_ProcessControlRequest+0x14a>
    1fd2:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1fd6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1fda:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fde:	88 60       	ori	r24, 0x08	; 8
    1fe0:	ea cf       	rjmp	.-44     	; 0x1fb6 <USB_Device_ProcessControlRequest+0x134>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	aa cf       	rjmp	.-172    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fe6:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    1fea:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fec:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ff0:	80 78       	andi	r24, 0x80	; 128
    1ff2:	81 2b       	or	r24, r17
    1ff4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1ff8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ffc:	87 7f       	andi	r24, 0xF7	; 247
    1ffe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    2002:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2006:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    200a:	80 ff       	sbrs	r24, 0
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <USB_Device_ProcessControlRequest+0x184>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    200e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2012:	80 68       	ori	r24, 0x80	; 128
    2014:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	11 11       	cpse	r17, r1
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <USB_Device_ProcessControlRequest+0x19e>
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
    2024:	8a cf       	rjmp	.-236    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2026:	80 58       	subi	r24, 0x80	; 128
    2028:	82 30       	cpi	r24, 0x02	; 2
    202a:	08 f0       	brcs	.+2      	; 0x202e <USB_Device_ProcessControlRequest+0x1ac>
    202c:	86 cf       	rjmp	.-244    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    202e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    2032:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <USB_ControlRequest+0x3>
    2036:	8c 3d       	cpi	r24, 0xDC	; 220
    2038:	23 e0       	ldi	r18, 0x03	; 3
    203a:	92 07       	cpc	r25, r18
    203c:	a1 f5       	brne	.+104    	; 0x20a6 <USB_Device_ProcessControlRequest+0x224>
	SignatureDescriptor.Header.Type = DTYPE_String;
    203e:	83 e0       	ldi	r24, 0x03	; 3
    2040:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2042:	8a e2       	ldi	r24, 0x2A	; 42
    2044:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2046:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2048:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    204a:	de 01       	movw	r26, r28
    204c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    204e:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2050:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2052:	51 e2       	ldi	r21, 0x21	; 33
    2054:	e3 2f       	mov	r30, r19
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    205c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    205e:	20 ff       	sbrs	r18, 0
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <USB_Device_ProcessControlRequest+0x1e6>
					{
						SerialByte >>= 4;
    2062:	e2 95       	swap	r30
    2064:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2066:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2068:	ef 70       	andi	r30, 0x0F	; 15
    206a:	8e 2f       	mov	r24, r30
    206c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    206e:	ea 30       	cpi	r30, 0x0A	; 10
    2070:	c0 f0       	brcs	.+48     	; 0x20a2 <USB_Device_ProcessControlRequest+0x220>
    2072:	c7 96       	adiw	r24, 0x37	; 55
    2074:	8d 93       	st	X+, r24
    2076:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2078:	2f 5f       	subi	r18, 0xFF	; 255
    207a:	24 31       	cpi	r18, 0x14	; 20
    207c:	59 f7       	brne	.-42     	; 0x2054 <USB_Device_ProcessControlRequest+0x1d2>
				SREG = GlobalIntState;
    207e:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    2080:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2084:	87 7f       	andi	r24, 0xF7	; 247
    2086:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    208a:	6a e2       	ldi	r22, 0x2A	; 42
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	ce 01       	movw	r24, r28
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2096:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    209a:	8b 77       	andi	r24, 0x7B	; 123
    209c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20a0:	4c cf       	rjmp	.-360    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    20a2:	c0 96       	adiw	r24, 0x30	; 48
    20a4:	e7 cf       	rjmp	.-50     	; 0x2074 <USB_Device_ProcessControlRequest+0x1f2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    20a6:	ae 01       	movw	r20, r28
    20a8:	4f 5f       	subi	r20, 0xFF	; 255
    20aa:	5f 4f       	sbci	r21, 0xFF	; 255
    20ac:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <USB_ControlRequest+0x4>
    20b0:	0e 94 bc 0b 	call	0x1778	; 0x1778 <CALLBACK_USB_GetDescriptor>
    20b4:	bc 01       	movw	r22, r24
    20b6:	89 2b       	or	r24, r25
    20b8:	09 f4       	brne	.+2      	; 0x20bc <USB_Device_ProcessControlRequest+0x23a>
    20ba:	3f cf       	rjmp	.-386    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    20bc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20c0:	97 7f       	andi	r25, 0xF7	; 247
    20c2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <Endpoint_Write_Control_PStream_LE>
    20ce:	e3 cf       	rjmp	.-58     	; 0x2096 <USB_Device_ProcessControlRequest+0x214>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    20d0:	80 38       	cpi	r24, 0x80	; 128
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <USB_Device_ProcessControlRequest+0x254>
    20d4:	32 cf       	rjmp	.-412    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
    20d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20da:	87 7f       	andi	r24, 0xF7	; 247
    20dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20e0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    20e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    20e8:	1d cf       	rjmp	.-454    	; 0x1f24 <USB_Device_ProcessControlRequest+0xa2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20ea:	81 11       	cpse	r24, r1
    20ec:	26 cf       	rjmp	.-436    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20ee:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <USB_ControlRequest+0x2>
    20f2:	92 30       	cpi	r25, 0x02	; 2
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <USB_Device_ProcessControlRequest+0x276>
    20f6:	21 cf       	rjmp	.-446    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
				UEINTX &= ~(1 << RXSTPI);
    20f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20fc:	87 7f       	andi	r24, 0xF7	; 247
    20fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2102:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    2106:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    210a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <USB_Device_ConfigurationNumber>
    210e:	88 23       	and	r24, r24
    2110:	31 f0       	breq	.+12     	; 0x211e <USB_Device_ProcessControlRequest+0x29c>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    2118:	0e 94 85 0a 	call	0x150a	; 0x150a <EVENT_USB_Device_ConfigurationChanged>
    211c:	0e cf       	rjmp	.-484    	; 0x1f3a <USB_Device_ProcessControlRequest+0xb8>
				return (UDADDR & (1 << ADDEN));
    211e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2122:	87 fd       	sbrc	r24, 7
    2124:	f6 cf       	rjmp	.-20     	; 0x2112 <USB_Device_ProcessControlRequest+0x290>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	f5 cf       	rjmp	.-22     	; 0x2114 <USB_Device_ProcessControlRequest+0x292>

0000212a <host_set_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    212a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <driver+0x1>
    212e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <driver>
    2132:	08 95       	ret

00002134 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2134:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    2138:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    213c:	30 97       	sbiw	r30, 0x00	; 0
    213e:	21 f0       	breq	.+8      	; 0x2148 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2140:	01 90       	ld	r0, Z+
    2142:	f0 81       	ld	r31, Z
    2144:	e0 2d       	mov	r30, r0
    2146:	09 94       	ijmp
}
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	08 95       	ret

0000214c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	8c 01       	movw	r16, r24
    if (!driver) return;
    215a:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    215e:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2162:	30 97       	sbiw	r30, 0x00	; 0
    2164:	c1 f1       	breq	.+112    	; 0x21d6 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2166:	02 80       	ldd	r0, Z+2	; 0x02
    2168:	f3 81       	ldd	r31, Z+3	; 0x03
    216a:	e0 2d       	mov	r30, r0
    216c:	09 95       	icall

    if (debug_keyboard) {
    216e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2172:	82 ff       	sbrs	r24, 2
    2174:	30 c0       	rjmp	.+96     	; 0x21d6 <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    2176:	80 ff       	sbrs	r24, 0
    2178:	04 c0       	rjmp	.+8      	; 0x2182 <host_keyboard_send+0x36>
    217a:	80 e5       	ldi	r24, 0x50	; 80
    217c:	94 e0       	ldi	r25, 0x04	; 4
    217e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
{
    2182:	d0 e0       	ldi	r29, 0x00	; 0
    2184:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2186:	8a e4       	ldi	r24, 0x4A	; 74
    2188:	e8 2e       	mov	r14, r24
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	f8 2e       	mov	r15, r24
    218e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2192:	80 ff       	sbrs	r24, 0
    2194:	0e c0       	rjmp	.+28     	; 0x21b2 <host_keyboard_send+0x66>
    2196:	f8 01       	movw	r30, r16
    2198:	ec 0f       	add	r30, r28
    219a:	fd 1f       	adc	r31, r29
    219c:	80 81       	ld	r24, Z
    219e:	1f 92       	push	r1
    21a0:	8f 93       	push	r24
    21a2:	ff 92       	push	r15
    21a4:	ef 92       	push	r14
    21a6:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    21b4:	c0 32       	cpi	r28, 0x20	; 32
    21b6:	d1 05       	cpc	r29, r1
    21b8:	51 f7       	brne	.-44     	; 0x218e <host_keyboard_send+0x42>
        }
        dprint("\n");
    21ba:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    21be:	80 ff       	sbrs	r24, 0
    21c0:	0a c0       	rjmp	.+20     	; 0x21d6 <host_keyboard_send+0x8a>
    21c2:	88 e4       	ldi	r24, 0x48	; 72
    21c4:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	ef 90       	pop	r14
        dprint("\n");
    21d2:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <xputs>
}
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    21e4:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    21e8:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	21 f0       	breq	.+8      	; 0x21f8 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    21f0:	04 80       	ldd	r0, Z+4	; 0x04
    21f2:	f5 81       	ldd	r31, Z+5	; 0x05
    21f4:	e0 2d       	mov	r30, r0
    21f6:	09 94       	ijmp
}
    21f8:	08 95       	ret

000021fa <host_system_send>:

void host_system_send(uint16_t report)
{
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    2200:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <last_system_report>
    2204:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <last_system_report+0x1>
    2208:	8c 17       	cp	r24, r28
    220a:	9d 07       	cpc	r25, r29
    220c:	01 f1       	breq	.+64     	; 0x224e <host_system_send+0x54>
    last_system_report = report;
    220e:	d0 93 79 01 	sts	0x0179, r29	; 0x800179 <last_system_report+0x1>
    2212:	c0 93 78 01 	sts	0x0178, r28	; 0x800178 <last_system_report>

    if (!driver) return;
    2216:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    221a:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    221e:	30 97       	sbiw	r30, 0x00	; 0
    2220:	b1 f0       	breq	.+44     	; 0x224e <host_system_send+0x54>
    (*driver->send_system)(report);
    2222:	06 80       	ldd	r0, Z+6	; 0x06
    2224:	f7 81       	ldd	r31, Z+7	; 0x07
    2226:	e0 2d       	mov	r30, r0
    2228:	ce 01       	movw	r24, r28
    222a:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    222c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2230:	85 70       	andi	r24, 0x05	; 5
    2232:	85 30       	cpi	r24, 0x05	; 5
    2234:	61 f4       	brne	.+24     	; 0x224e <host_system_send+0x54>
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	8a e3       	ldi	r24, 0x3A	; 58
    223c:	94 e0       	ldi	r25, 0x04	; 4
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    }
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    225a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <last_consumer_report>
    225e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <last_consumer_report+0x1>
    2262:	8c 17       	cp	r24, r28
    2264:	9d 07       	cpc	r25, r29
    2266:	01 f1       	breq	.+64     	; 0x22a8 <host_consumer_send+0x54>
    last_consumer_report = report;
    2268:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <last_consumer_report+0x1>
    226c:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <last_consumer_report>

    if (!driver) return;
    2270:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <driver>
    2274:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <driver+0x1>
    2278:	30 97       	sbiw	r30, 0x00	; 0
    227a:	b1 f0       	breq	.+44     	; 0x22a8 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    227c:	00 84       	ldd	r0, Z+8	; 0x08
    227e:	f1 85       	ldd	r31, Z+9	; 0x09
    2280:	e0 2d       	mov	r30, r0
    2282:	ce 01       	movw	r24, r28
    2284:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    2286:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    228a:	85 70       	andi	r24, 0x05	; 5
    228c:	85 30       	cpi	r24, 0x05	; 5
    228e:	61 f4       	brne	.+24     	; 0x22a8 <host_consumer_send+0x54>
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	8a e2       	ldi	r24, 0x2A	; 42
    2296:	94 e0       	ldi	r25, 0x04	; 4
    2298:	9f 93       	push	r25
    229a:	8f 93       	push	r24
    229c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    }
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	08 95       	ret

000022ae <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    22ae:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <matrix_setup>

000022b2 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    22b2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <timer_init>
    matrix_init();
    22b6:	0e 94 45 07 	call	0xe8a	; 0xe8a <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    22ba:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <bootmagic>

000022be <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    22be:	5f 92       	push	r5
    22c0:	6f 92       	push	r6
    22c2:	7f 92       	push	r7
    22c4:	8f 92       	push	r8
    22c6:	9f 92       	push	r9
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	00 d0       	rcall	.+0      	; 0x22de <keyboard_task+0x20>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <keyboard_task+0x22>
    22e0:	1f 92       	push	r1
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    22e6:	0e 94 76 07 	call	0xeec	; 0xeec <matrix_scan>
    22ea:	0d e7       	ldi	r16, 0x7D	; 125
    22ec:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    22ee:	51 2c       	mov	r5, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    22f0:	66 24       	eor	r6, r6
    22f2:	63 94       	inc	r6
    22f4:	71 2c       	mov	r7, r1
        matrix_row = matrix_get_row(r);
    22f6:	85 2d       	mov	r24, r5
    22f8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <matrix_get_row>
    22fc:	5c 01       	movw	r10, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    22fe:	f8 01       	movw	r30, r16
    2300:	c0 80       	ld	r12, Z
    2302:	d1 80       	ldd	r13, Z+1	; 0x01
        if (matrix_change) {
    2304:	c8 16       	cp	r12, r24
    2306:	d9 06       	cpc	r13, r25
    2308:	09 f4       	brne	.+2      	; 0x230c <keyboard_task+0x4e>
    230a:	40 c0       	rjmp	.+128    	; 0x238c <keyboard_task+0xce>
            if (debug_matrix) matrix_print();
    230c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    2310:	81 fd       	sbrc	r24, 1
    2312:	0e 94 2c 12 	call	0x2458	; 0x2458 <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2316:	f1 2c       	mov	r15, r1
    2318:	e1 2c       	mov	r14, r1
        matrix_change = matrix_row ^ matrix_prev[r];
    231a:	ca 24       	eor	r12, r10
    231c:	db 24       	eor	r13, r11
                if (matrix_change & ((matrix_row_t)1<<c)) {
    231e:	43 01       	movw	r8, r6
    2320:	0e 2c       	mov	r0, r14
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <keyboard_task+0x6a>
    2324:	88 0c       	add	r8, r8
    2326:	99 1c       	adc	r9, r9
    2328:	0a 94       	dec	r0
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <keyboard_task+0x66>
    232c:	c6 01       	movw	r24, r12
    232e:	88 21       	and	r24, r8
    2330:	99 21       	and	r25, r9
    2332:	89 2b       	or	r24, r25
    2334:	21 f1       	breq	.+72     	; 0x237e <keyboard_task+0xc0>
                    keyevent_t e = (keyevent_t){
    2336:	e9 82       	std	Y+1, r14	; 0x01
    2338:	5a 82       	std	Y+2, r5	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    233a:	21 e0       	ldi	r18, 0x01	; 1
    233c:	c4 01       	movw	r24, r8
    233e:	8a 21       	and	r24, r10
    2340:	9b 21       	and	r25, r11
    2342:	89 2b       	or	r24, r25
    2344:	09 f4       	brne	.+2      	; 0x2348 <keyboard_task+0x8a>
    2346:	20 e0       	ldi	r18, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2348:	2b 83       	std	Y+3, r18	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    234a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <timer_read>
    234e:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2350:	78 2f       	mov	r23, r24
    2352:	9d 83       	std	Y+5, r25	; 0x05
    2354:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2356:	49 81       	ldd	r20, Y+1	; 0x01
    2358:	5a 81       	ldd	r21, Y+2	; 0x02
    235a:	6b 81       	ldd	r22, Y+3	; 0x03
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <action_exec>
                    hook_matrix_change(e);
    2362:	49 81       	ldd	r20, Y+1	; 0x01
    2364:	5a 81       	ldd	r21, Y+2	; 0x02
    2366:	6b 81       	ldd	r22, Y+3	; 0x03
    2368:	7c 81       	ldd	r23, Y+4	; 0x04
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2370:	f8 01       	movw	r30, r16
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	88 26       	eor	r8, r24
    2378:	99 26       	eor	r9, r25
    237a:	91 82       	std	Z+1, r9	; 0x01
    237c:	80 82       	st	Z, r8
    237e:	ff ef       	ldi	r31, 0xFF	; 255
    2380:	ef 1a       	sub	r14, r31
    2382:	ff 0a       	sbc	r15, r31
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2384:	8f e0       	ldi	r24, 0x0F	; 15
    2386:	e8 16       	cp	r14, r24
    2388:	f1 04       	cpc	r15, r1
    238a:	49 f6       	brne	.-110    	; 0x231e <keyboard_task+0x60>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    238c:	53 94       	inc	r5
    238e:	0e 5f       	subi	r16, 0xFE	; 254
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	e5 e0       	ldi	r30, 0x05	; 5
    2394:	5e 12       	cpse	r5, r30
    2396:	af cf       	rjmp	.-162    	; 0x22f6 <keyboard_task+0x38>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	8a 83       	std	Y+2, r24	; 0x02
    239e:	1b 82       	std	Y+3, r1	; 0x03
    23a0:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <timer_read>
    23a4:	81 60       	ori	r24, 0x01	; 1
    23a6:	78 2f       	mov	r23, r24
    23a8:	9d 83       	std	Y+5, r25	; 0x05
    23aa:	8c 83       	std	Y+4, r24	; 0x04
    23ac:	49 81       	ldd	r20, Y+1	; 0x01
    23ae:	5a 81       	ldd	r21, Y+2	; 0x02
    23b0:	6b 81       	ldd	r22, Y+3	; 0x03
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	0e 94 62 12 	call	0x24c4	; 0x24c4 <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    23b8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    23bc:	0e 94 36 24 	call	0x486c	; 0x486c <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    23c0:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    23c4:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <led_status.4871>
    23c8:	89 17       	cp	r24, r25
    23ca:	69 f1       	breq	.+90     	; 0x2426 <keyboard_task+0x168>
        led_status = host_keyboard_leds();
    23cc:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    23d0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <led_status.4871>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    23d4:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    23d8:	95 70       	andi	r25, 0x05	; 5
    23da:	95 30       	cpi	r25, 0x05	; 5
    23dc:	61 f4       	brne	.+24     	; 0x23f6 <keyboard_task+0x138>
    23de:	1f 92       	push	r1
    23e0:	8f 93       	push	r24
    23e2:	8b e5       	ldi	r24, 0x5B	; 91
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    23f6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <led_status.4871>
    }
}
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
    241c:	7f 90       	pop	r7
    241e:	6f 90       	pop	r6
    2420:	5f 90       	pop	r5
        hook_keyboard_leds_change(led_status);
    2422:	0c 94 61 1e 	jmp	0x3cc2	; 0x3cc2 <hook_keyboard_leds_change>
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	9f 90       	pop	r9
    2446:	8f 90       	pop	r8
    2448:	7f 90       	pop	r7
    244a:	6f 90       	pop	r6
    244c:	5f 90       	pop	r5
    244e:	08 95       	ret

00002450 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2450:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <led_set>

00002454 <matrix_clear>:
    2454:	08 95       	ret

00002456 <matrix_setup>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix_get_row(row) & (1<<col));
}
    2456:	08 95       	ret

00002458 <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
#elif (MATRIX_COLS <= 16)
    print("r/c 0123456789ABCDEF\n");
    2464:	85 e7       	ldi	r24, 0x75	; 117
    2466:	94 e0       	ldi	r25, 0x04	; 4
    2468:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    246e:	c0 e0       	ldi	r28, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
#elif (MATRIX_COLS <= 16)
        xprintf("%02X: %016b%s\n", row, bitrev16(matrix_get_row(row)),
    2470:	8e e2       	ldi	r24, 0x2E	; 46
    2472:	e8 2e       	mov	r14, r24
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	f8 2e       	mov	r15, r24
    2478:	06 e6       	ldi	r16, 0x66	; 102
    247a:	14 e0       	ldi	r17, 0x04	; 4
    247c:	8c 2f       	mov	r24, r28
    247e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <matrix_get_row>
    2482:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <bitrev16>
    2486:	ff 92       	push	r15
    2488:	ef 92       	push	r14
    248a:	9f 93       	push	r25
    248c:	8f 93       	push	r24
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	1f 93       	push	r17
    2494:	0f 93       	push	r16
    2496:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    249a:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    249c:	8d b7       	in	r24, 0x3d	; 61
    249e:	9e b7       	in	r25, 0x3e	; 62
    24a0:	08 96       	adiw	r24, 0x08	; 8
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	9e bf       	out	0x3e, r25	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	8d bf       	out	0x3d, r24	; 61
    24ac:	c5 30       	cpi	r28, 0x05	; 5
    24ae:	d1 05       	cpc	r29, r1
    24b0:	29 f7       	brne	.-54     	; 0x247c <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	08 95       	ret

000024c0 <matrix_power_up>:
    24c0:	08 95       	ret

000024c2 <matrix_power_down>:
    24c2:	08 95       	ret

000024c4 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	2b 97       	sbiw	r28, 0x0b	; 11
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	94 2f       	mov	r25, r20
    24da:	4f 83       	std	Y+7, r20	; 0x07
    24dc:	25 2f       	mov	r18, r21
    24de:	58 87       	std	Y+8, r21	; 0x08
    24e0:	69 87       	std	Y+9, r22	; 0x09
    24e2:	7a 87       	std	Y+10, r23	; 0x0a
    24e4:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    24e6:	4a 85       	ldd	r20, Y+10	; 0x0a
    24e8:	5b 85       	ldd	r21, Y+11	; 0x0b
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	45 2b       	or	r20, r21
    24ee:	31 f0       	breq	.+12     	; 0x24fc <action_exec+0x38>
    24f0:	2f 3f       	cpi	r18, 0xFF	; 255
    24f2:	19 f4       	brne	.+6      	; 0x24fa <action_exec+0x36>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	9f 3f       	cpi	r25, 0xFF	; 255
    24f8:	09 f0       	breq	.+2      	; 0x24fc <action_exec+0x38>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    24fc:	80 fd       	sbrc	r24, 0
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <action_exec+0x4a>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2500:	4f 81       	ldd	r20, Y+7	; 0x07
    2502:	58 85       	ldd	r21, Y+8	; 0x08
    2504:	69 85       	ldd	r22, Y+9	; 0x09
    2506:	7a 85       	ldd	r23, Y+10	; 0x0a
    2508:	8b 85       	ldd	r24, Y+11	; 0x0b
    250a:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    250e:	1e 82       	std	Y+6, r1	; 0x06
    2510:	1d 82       	std	Y+5, r1	; 0x05
    2512:	85 e0       	ldi	r24, 0x05	; 5
    2514:	fe 01       	movw	r30, r28
    2516:	37 96       	adiw	r30, 0x07	; 7
    2518:	de 01       	movw	r26, r28
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	01 90       	ld	r0, Z+
    251e:	0d 92       	st	X+, r0
    2520:	8a 95       	dec	r24
    2522:	e1 f7       	brne	.-8      	; 0x251c <action_exec+0x58>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2524:	49 81       	ldd	r20, Y+1	; 0x01
    2526:	5a 81       	ldd	r21, Y+2	; 0x02
    2528:	6b 81       	ldd	r22, Y+3	; 0x03
    252a:	7c 81       	ldd	r23, Y+4	; 0x04
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2530:	2b 96       	adiw	r28, 0x0b	; 11
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    action_tapping_process(record);
    2540:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <action_tapping_process>

00002544 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2544:	cf 93       	push	r28
    2546:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <register_code+0xa>
    254c:	d4 c0       	rjmp	.+424    	; 0x26f6 <register_code+0x1b2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    254e:	82 38       	cpi	r24, 0x82	; 130
    2550:	c1 f4       	brne	.+48     	; 0x2582 <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2552:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    2556:	81 fd       	sbrc	r24, 1
    2558:	ce c0       	rjmp	.+412    	; 0x26f6 <register_code+0x1b2>
#endif
        add_key(KC_CAPSLOCK);
    255a:	89 e3       	ldi	r24, 0x39	; 57
    255c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    2560:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    2564:	2f ef       	ldi	r18, 0xFF	; 255
    2566:	81 ee       	ldi	r24, 0xE1	; 225
    2568:	94 e0       	ldi	r25, 0x04	; 4
    256a:	21 50       	subi	r18, 0x01	; 1
    256c:	80 40       	sbci	r24, 0x00	; 0
    256e:	90 40       	sbci	r25, 0x00	; 0
    2570:	e1 f7       	brne	.-8      	; 0x256a <register_code+0x26>
    2572:	00 c0       	rjmp	.+0      	; 0x2574 <register_code+0x30>
    2574:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2576:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    2578:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    257c:	cf 91       	pop	r28
        send_keyboard_report();
    257e:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2582:	83 38       	cpi	r24, 0x83	; 131
    2584:	a1 f4       	brne	.+40     	; 0x25ae <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2586:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    258a:	80 fd       	sbrc	r24, 0
    258c:	b4 c0       	rjmp	.+360    	; 0x26f6 <register_code+0x1b2>
        add_key(KC_NUMLOCK);
    258e:	83 e5       	ldi	r24, 0x53	; 83
    2590:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    2594:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    2598:	2f ef       	ldi	r18, 0xFF	; 255
    259a:	81 ee       	ldi	r24, 0xE1	; 225
    259c:	94 e0       	ldi	r25, 0x04	; 4
    259e:	21 50       	subi	r18, 0x01	; 1
    25a0:	80 40       	sbci	r24, 0x00	; 0
    25a2:	90 40       	sbci	r25, 0x00	; 0
    25a4:	e1 f7       	brne	.-8      	; 0x259e <register_code+0x5a>
    25a6:	00 c0       	rjmp	.+0      	; 0x25a8 <register_code+0x64>
    25a8:	00 00       	nop
        del_key(KC_NUMLOCK);
    25aa:	83 e5       	ldi	r24, 0x53	; 83
    25ac:	e5 cf       	rjmp	.-54     	; 0x2578 <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    25ae:	84 38       	cpi	r24, 0x84	; 132
    25b0:	a1 f4       	brne	.+40     	; 0x25da <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    25b2:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    25b6:	82 fd       	sbrc	r24, 2
    25b8:	9e c0       	rjmp	.+316    	; 0x26f6 <register_code+0x1b2>
        add_key(KC_SCROLLLOCK);
    25ba:	87 e4       	ldi	r24, 0x47	; 71
    25bc:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    25c0:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    25c4:	2f ef       	ldi	r18, 0xFF	; 255
    25c6:	81 ee       	ldi	r24, 0xE1	; 225
    25c8:	94 e0       	ldi	r25, 0x04	; 4
    25ca:	21 50       	subi	r18, 0x01	; 1
    25cc:	80 40       	sbci	r24, 0x00	; 0
    25ce:	90 40       	sbci	r25, 0x00	; 0
    25d0:	e1 f7       	brne	.-8      	; 0x25ca <register_code+0x86>
    25d2:	00 c0       	rjmp	.+0      	; 0x25d4 <register_code+0x90>
    25d4:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    25d6:	87 e4       	ldi	r24, 0x47	; 71
    25d8:	cf cf       	rjmp	.-98     	; 0x2578 <register_code+0x34>
    else if IS_KEY(code) {
    25da:	8c ef       	ldi	r24, 0xFC	; 252
    25dc:	8c 0f       	add	r24, r28
    25de:	81 3a       	cpi	r24, 0xA1	; 161
    25e0:	48 f4       	brcc	.+18     	; 0x25f4 <register_code+0xb0>
        if (command_proc(code)) return;
    25e2:	8c 2f       	mov	r24, r28
    25e4:	0e 94 95 28 	call	0x512a	; 0x512a <command_proc>
    25e8:	81 11       	cpse	r24, r1
    25ea:	85 c0       	rjmp	.+266    	; 0x26f6 <register_code+0x1b2>
            add_key(code);
    25ec:	8c 2f       	mov	r24, r28
    25ee:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
    25f2:	c4 cf       	rjmp	.-120    	; 0x257c <register_code+0x38>
    else if IS_MOD(code) {
    25f4:	80 e2       	ldi	r24, 0x20	; 32
    25f6:	8c 0f       	add	r24, r28
    25f8:	88 30       	cpi	r24, 0x08	; 8
    25fa:	48 f4       	brcc	.+18     	; 0x260e <register_code+0xca>
        add_mods(MOD_BIT(code));
    25fc:	c7 70       	andi	r28, 0x07	; 7
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <register_code+0xc0>
    2602:	88 0f       	add	r24, r24
    2604:	ca 95       	dec	r28
    2606:	ea f7       	brpl	.-6      	; 0x2602 <register_code+0xbe>
    2608:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_mods>
    260c:	b7 cf       	rjmp	.-146    	; 0x257c <register_code+0x38>
    else if IS_SYSTEM(code) {
    260e:	8b e5       	ldi	r24, 0x5B	; 91
    2610:	8c 0f       	add	r24, r28
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	68 f4       	brcc	.+26     	; 0x2630 <register_code+0xec>
        host_system_send(KEYCODE2SYSTEM(code));
    2616:	81 e8       	ldi	r24, 0x81	; 129
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	c5 3a       	cpi	r28, 0xA5	; 165
    261c:	31 f0       	breq	.+12     	; 0x262a <register_code+0xe6>
    261e:	83 e8       	ldi	r24, 0x83	; 131
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	c6 3a       	cpi	r28, 0xA6	; 166
    2624:	11 f4       	brne	.+4      	; 0x262a <register_code+0xe6>
    2626:	82 e8       	ldi	r24, 0x82	; 130
    2628:	90 e0       	ldi	r25, 0x00	; 0
}
    262a:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    262c:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <host_system_send>
    else if IS_CONSUMER(code) {
    2630:	88 e5       	ldi	r24, 0x58	; 88
    2632:	8c 0f       	add	r24, r28
    2634:	85 31       	cpi	r24, 0x15	; 21
    2636:	08 f0       	brcs	.+2      	; 0x263a <register_code+0xf6>
    2638:	5e c0       	rjmp	.+188    	; 0x26f6 <register_code+0x1b2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    263a:	82 ee       	ldi	r24, 0xE2	; 226
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	c8 3a       	cpi	r28, 0xA8	; 168
    2640:	09 f4       	brne	.+2      	; 0x2644 <register_code+0x100>
    2642:	56 c0       	rjmp	.+172    	; 0x26f0 <register_code+0x1ac>
    2644:	89 ee       	ldi	r24, 0xE9	; 233
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	c9 3a       	cpi	r28, 0xA9	; 169
    264a:	09 f4       	brne	.+2      	; 0x264e <register_code+0x10a>
    264c:	51 c0       	rjmp	.+162    	; 0x26f0 <register_code+0x1ac>
    264e:	8a ee       	ldi	r24, 0xEA	; 234
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	ca 3a       	cpi	r28, 0xAA	; 170
    2654:	09 f4       	brne	.+2      	; 0x2658 <register_code+0x114>
    2656:	4c c0       	rjmp	.+152    	; 0x26f0 <register_code+0x1ac>
    2658:	85 eb       	ldi	r24, 0xB5	; 181
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	cb 3a       	cpi	r28, 0xAB	; 171
    265e:	09 f4       	brne	.+2      	; 0x2662 <register_code+0x11e>
    2660:	47 c0       	rjmp	.+142    	; 0x26f0 <register_code+0x1ac>
    2662:	86 eb       	ldi	r24, 0xB6	; 182
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	cc 3a       	cpi	r28, 0xAC	; 172
    2668:	09 f4       	brne	.+2      	; 0x266c <register_code+0x128>
    266a:	42 c0       	rjmp	.+132    	; 0x26f0 <register_code+0x1ac>
    266c:	83 eb       	ldi	r24, 0xB3	; 179
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	cd 3a       	cpi	r28, 0xAD	; 173
    2672:	f1 f1       	breq	.+124    	; 0x26f0 <register_code+0x1ac>
    2674:	84 eb       	ldi	r24, 0xB4	; 180
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	ce 3a       	cpi	r28, 0xAE	; 174
    267a:	d1 f1       	breq	.+116    	; 0x26f0 <register_code+0x1ac>
    267c:	87 eb       	ldi	r24, 0xB7	; 183
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	cf 3a       	cpi	r28, 0xAF	; 175
    2682:	b1 f1       	breq	.+108    	; 0x26f0 <register_code+0x1ac>
    2684:	8c ec       	ldi	r24, 0xCC	; 204
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	c1 3b       	cpi	r28, 0xB1	; 177
    268a:	91 f1       	breq	.+100    	; 0x26f0 <register_code+0x1ac>
    268c:	8d ec       	ldi	r24, 0xCD	; 205
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	c0 3b       	cpi	r28, 0xB0	; 176
    2692:	71 f1       	breq	.+92     	; 0x26f0 <register_code+0x1ac>
    2694:	83 e8       	ldi	r24, 0x83	; 131
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	c2 3b       	cpi	r28, 0xB2	; 178
    269a:	51 f1       	breq	.+84     	; 0x26f0 <register_code+0x1ac>
    269c:	8a e8       	ldi	r24, 0x8A	; 138
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	c3 3b       	cpi	r28, 0xB3	; 179
    26a2:	31 f1       	breq	.+76     	; 0x26f0 <register_code+0x1ac>
    26a4:	82 e9       	ldi	r24, 0x92	; 146
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	c4 3b       	cpi	r28, 0xB4	; 180
    26aa:	11 f1       	breq	.+68     	; 0x26f0 <register_code+0x1ac>
    26ac:	84 e9       	ldi	r24, 0x94	; 148
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	c5 3b       	cpi	r28, 0xB5	; 181
    26b2:	f1 f0       	breq	.+60     	; 0x26f0 <register_code+0x1ac>
    26b4:	81 e2       	ldi	r24, 0x21	; 33
    26b6:	92 e0       	ldi	r25, 0x02	; 2
    26b8:	c6 3b       	cpi	r28, 0xB6	; 182
    26ba:	d1 f0       	breq	.+52     	; 0x26f0 <register_code+0x1ac>
    26bc:	83 e2       	ldi	r24, 0x23	; 35
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	c7 3b       	cpi	r28, 0xB7	; 183
    26c2:	b1 f0       	breq	.+44     	; 0x26f0 <register_code+0x1ac>
    26c4:	84 e2       	ldi	r24, 0x24	; 36
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	c8 3b       	cpi	r28, 0xB8	; 184
    26ca:	91 f0       	breq	.+36     	; 0x26f0 <register_code+0x1ac>
    26cc:	85 e2       	ldi	r24, 0x25	; 37
    26ce:	92 e0       	ldi	r25, 0x02	; 2
    26d0:	c9 3b       	cpi	r28, 0xB9	; 185
    26d2:	71 f0       	breq	.+28     	; 0x26f0 <register_code+0x1ac>
    26d4:	86 e2       	ldi	r24, 0x26	; 38
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	ca 3b       	cpi	r28, 0xBA	; 186
    26da:	51 f0       	breq	.+20     	; 0x26f0 <register_code+0x1ac>
    26dc:	87 e2       	ldi	r24, 0x27	; 39
    26de:	92 e0       	ldi	r25, 0x02	; 2
    26e0:	cb 3b       	cpi	r28, 0xBB	; 187
    26e2:	31 f0       	breq	.+12     	; 0x26f0 <register_code+0x1ac>
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	cc 3b       	cpi	r28, 0xBC	; 188
    26ea:	11 f4       	brne	.+4      	; 0x26f0 <register_code+0x1ac>
    26ec:	8a e2       	ldi	r24, 0x2A	; 42
    26ee:	92 e0       	ldi	r25, 0x02	; 2
}
    26f0:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    26f2:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <host_consumer_send>
}
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    26fa:	88 23       	and	r24, r24
    26fc:	09 f4       	brne	.+2      	; 0x2700 <unregister_code+0x6>
    26fe:	66 c0       	rjmp	.+204    	; 0x27cc <unregister_code+0xd2>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2700:	82 38       	cpi	r24, 0x82	; 130
    2702:	b9 f4       	brne	.+46     	; 0x2732 <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2704:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    2708:	81 ff       	sbrs	r24, 1
    270a:	60 c0       	rjmp	.+192    	; 0x27cc <unregister_code+0xd2>
#endif
        add_key(KC_CAPSLOCK);
    270c:	89 e3       	ldi	r24, 0x39	; 57
    270e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    2712:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    2716:	2f ef       	ldi	r18, 0xFF	; 255
    2718:	81 ee       	ldi	r24, 0xE1	; 225
    271a:	94 e0       	ldi	r25, 0x04	; 4
    271c:	21 50       	subi	r18, 0x01	; 1
    271e:	80 40       	sbci	r24, 0x00	; 0
    2720:	90 40       	sbci	r25, 0x00	; 0
    2722:	e1 f7       	brne	.-8      	; 0x271c <unregister_code+0x22>
    2724:	00 c0       	rjmp	.+0      	; 0x2726 <unregister_code+0x2c>
    2726:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    2728:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    272a:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <del_key>
        send_keyboard_report();
    272e:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    2732:	83 38       	cpi	r24, 0x83	; 131
    2734:	a1 f4       	brne	.+40     	; 0x275e <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2736:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    273a:	80 ff       	sbrs	r24, 0
    273c:	47 c0       	rjmp	.+142    	; 0x27cc <unregister_code+0xd2>
        add_key(KC_NUMLOCK);
    273e:	83 e5       	ldi	r24, 0x53	; 83
    2740:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    2744:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    2748:	2f ef       	ldi	r18, 0xFF	; 255
    274a:	81 ee       	ldi	r24, 0xE1	; 225
    274c:	94 e0       	ldi	r25, 0x04	; 4
    274e:	21 50       	subi	r18, 0x01	; 1
    2750:	80 40       	sbci	r24, 0x00	; 0
    2752:	90 40       	sbci	r25, 0x00	; 0
    2754:	e1 f7       	brne	.-8      	; 0x274e <unregister_code+0x54>
    2756:	00 c0       	rjmp	.+0      	; 0x2758 <unregister_code+0x5e>
    2758:	00 00       	nop
        del_key(KC_NUMLOCK);
    275a:	83 e5       	ldi	r24, 0x53	; 83
    275c:	e6 cf       	rjmp	.-52     	; 0x272a <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    275e:	84 38       	cpi	r24, 0x84	; 132
    2760:	a1 f4       	brne	.+40     	; 0x278a <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2762:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    2766:	82 ff       	sbrs	r24, 2
    2768:	31 c0       	rjmp	.+98     	; 0x27cc <unregister_code+0xd2>
#endif
        add_key(KC_SCROLLLOCK);
    276a:	87 e4       	ldi	r24, 0x47	; 71
    276c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <add_key>
        send_keyboard_report();
    2770:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    2774:	2f ef       	ldi	r18, 0xFF	; 255
    2776:	81 ee       	ldi	r24, 0xE1	; 225
    2778:	94 e0       	ldi	r25, 0x04	; 4
    277a:	21 50       	subi	r18, 0x01	; 1
    277c:	80 40       	sbci	r24, 0x00	; 0
    277e:	90 40       	sbci	r25, 0x00	; 0
    2780:	e1 f7       	brne	.-8      	; 0x277a <unregister_code+0x80>
    2782:	00 c0       	rjmp	.+0      	; 0x2784 <unregister_code+0x8a>
    2784:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    2786:	87 e4       	ldi	r24, 0x47	; 71
    2788:	d0 cf       	rjmp	.-96     	; 0x272a <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    278a:	9c ef       	ldi	r25, 0xFC	; 252
    278c:	98 0f       	add	r25, r24
    278e:	91 3a       	cpi	r25, 0xA1	; 161
    2790:	60 f2       	brcs	.-104    	; 0x272a <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2792:	90 e2       	ldi	r25, 0x20	; 32
    2794:	98 0f       	add	r25, r24
    2796:	98 30       	cpi	r25, 0x08	; 8
    2798:	50 f4       	brcc	.+20     	; 0x27ae <unregister_code+0xb4>
        del_mods(MOD_BIT(code));
    279a:	87 70       	andi	r24, 0x07	; 7
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <unregister_code+0xa8>
    27a0:	99 0f       	add	r25, r25
    27a2:	8a 95       	dec	r24
    27a4:	ea f7       	brpl	.-6      	; 0x27a0 <unregister_code+0xa6>
    27a6:	89 2f       	mov	r24, r25
    27a8:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <del_mods>
    27ac:	c0 cf       	rjmp	.-128    	; 0x272e <unregister_code+0x34>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    27ae:	9b e5       	ldi	r25, 0x5B	; 91
    27b0:	98 0f       	add	r25, r24
    27b2:	93 30       	cpi	r25, 0x03	; 3
    27b4:	20 f4       	brcc	.+8      	; 0x27be <unregister_code+0xc4>
        host_system_send(0);
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <host_system_send>
    }
    else if IS_CONSUMER(code) {
    27be:	88 5a       	subi	r24, 0xA8	; 168
    27c0:	85 31       	cpi	r24, 0x15	; 21
    27c2:	20 f4       	brcc	.+8      	; 0x27cc <unregister_code+0xd2>
        host_consumer_send(0);
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <host_consumer_send>
    }
}
    27cc:	08 95       	ret

000027ce <register_mods>:

void register_mods(uint8_t mods)
{
    if (mods) {
    27ce:	88 23       	and	r24, r24
    27d0:	21 f0       	breq	.+8      	; 0x27da <register_mods+0xc>
        add_mods(mods);
    27d2:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_mods>
        send_keyboard_report();
    27d6:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <send_keyboard_report>
    }
}
    27da:	08 95       	ret

000027dc <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    27dc:	88 23       	and	r24, r24
    27de:	21 f0       	breq	.+8      	; 0x27e8 <unregister_mods+0xc>
        del_mods(mods);
    27e0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <del_mods>
        send_keyboard_report();
    27e4:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <send_keyboard_report>
    }
}
    27e8:	08 95       	ret

000027ea <process_action>:
{
    27ea:	af 92       	push	r10
    27ec:	bf 92       	push	r11
    27ee:	cf 92       	push	r12
    27f0:	df 92       	push	r13
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <process_action+0x16>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <process_action+0x18>
    2802:	1f 92       	push	r1
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    280a:	85 e0       	ldi	r24, 0x05	; 5
    280c:	f5 01       	movw	r30, r10
    280e:	de 01       	movw	r26, r28
    2810:	11 96       	adiw	r26, 0x01	; 1
    2812:	01 90       	ld	r0, Z+
    2814:	0d 92       	st	X+, r0
    2816:	8a 95       	dec	r24
    2818:	e1 f7       	brne	.-8      	; 0x2812 <process_action+0x28>
    281a:	f5 01       	movw	r30, r10
    281c:	40 81       	ld	r20, Z
    281e:	51 81       	ldd	r21, Z+1	; 0x01
    2820:	23 81       	ldd	r18, Z+3	; 0x03
    2822:	34 81       	ldd	r19, Z+4	; 0x04
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	21 15       	cp	r18, r1
    2828:	31 05       	cpc	r19, r1
    282a:	31 f0       	breq	.+12     	; 0x2838 <process_action+0x4e>
    282c:	5f 3f       	cpi	r21, 0xFF	; 255
    282e:	19 f4       	brne	.+6      	; 0x2836 <process_action+0x4c>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	4f 3f       	cpi	r20, 0xFF	; 255
    2834:	09 f0       	breq	.+2      	; 0x2838 <process_action+0x4e>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return; }
    2838:	80 fd       	sbrc	r24, 0
    283a:	c5 c0       	rjmp	.+394    	; 0x29c6 <process_action+0x1dc>
    keyevent_t event = record->event;
    283c:	f5 01       	movw	r30, r10
    283e:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2840:	e5 80       	ldd	r14, Z+5	; 0x05
    2842:	e2 94       	swap	r14
    2844:	6f e0       	ldi	r22, 0x0F	; 15
    2846:	e6 22       	and	r14, r22
    action_t action = layer_switch_get_action(event);
    2848:	72 2f       	mov	r23, r18
    284a:	3d 83       	std	Y+5, r19	; 0x05
    284c:	2c 83       	std	Y+4, r18	; 0x04
    284e:	6f 2d       	mov	r22, r15
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <layer_switch_get_action>
    2856:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2858:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    285c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <default_layer_debug>
    switch (action.kind.id) {
    2860:	e1 2f       	mov	r30, r17
    2862:	e2 95       	swap	r30
    2864:	ef 70       	andi	r30, 0x0F	; 15
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	e8 5c       	subi	r30, 0xC8	; 200
    286a:	fb 4e       	sbci	r31, 0xEB	; 235
    286c:	0c 94 31 2b 	jmp	0x5662	; 0x5662 <__tablejump2__>
    2870:	48 14       	cp	r4, r8
    2872:	48 14       	cp	r4, r8
    2874:	85 14       	cp	r8, r5
    2876:	85 14       	cp	r8, r5
    2878:	16 15       	cp	r17, r6
    287a:	4b 15       	cp	r20, r11
    287c:	e3 14       	cp	r14, r3
    287e:	e3 14       	cp	r14, r3
    2880:	64 15       	cp	r22, r4
    2882:	e3 14       	cp	r14, r3
    2884:	50 16       	cp	r5, r16
    2886:	50 16       	cp	r5, r16
    2888:	f6 16       	cp	r15, r22
    288a:	e3 14       	cp	r14, r3
    288c:	e3 14       	cp	r14, r3
    288e:	0d 17       	cp	r16, r29
    2890:	f1 2f       	mov	r31, r17
    2892:	ff 70       	andi	r31, 0x0F	; 15
    2894:	ef 2e       	mov	r14, r31
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2896:	10 7f       	andi	r17, 0xF0	; 240
    2898:	19 f0       	breq	.+6      	; 0x28a0 <process_action+0xb6>
    289a:	e2 94       	swap	r14
    289c:	90 ef       	ldi	r25, 0xF0	; 240
    289e:	e9 22       	and	r14, r25
                if (event.pressed) {
    28a0:	ff 20       	and	r15, r15
    28a2:	c9 f0       	breq	.+50     	; 0x28d6 <process_action+0xec>
                    if (mods) {
    28a4:	ee 20       	and	r14, r14
    28a6:	29 f0       	breq	.+10     	; 0x28b2 <process_action+0xc8>
                        add_weak_mods(mods);
    28a8:	8e 2d       	mov	r24, r14
    28aa:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <add_weak_mods>
                        send_keyboard_report();
    28ae:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
                            register_code(action.layer_tap.code);
    28b2:	80 2f       	mov	r24, r16
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	bf 90       	pop	r11
    28d0:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    28d2:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <register_code>
                    unregister_code(action.key.code);
    28d6:	80 2f       	mov	r24, r16
    28d8:	0e 94 7d 13 	call	0x26fa	; 0x26fa <unregister_code>
                    if (mods) {
    28dc:	ee 20       	and	r14, r14
    28de:	09 f4       	brne	.+2      	; 0x28e2 <process_action+0xf8>
    28e0:	72 c0       	rjmp	.+228    	; 0x29c6 <process_action+0x1dc>
                        del_weak_mods(mods);
    28e2:	8e 2d       	mov	r24, r14
    28e4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <del_weak_mods>
}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	ff 90       	pop	r15
    28fc:	ef 90       	pop	r14
    28fe:	df 90       	pop	r13
    2900:	cf 90       	pop	r12
    2902:	bf 90       	pop	r11
    2904:	af 90       	pop	r10
                        send_keyboard_report();
    2906:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <send_keyboard_report>
    290a:	81 2f       	mov	r24, r17
    290c:	8f 70       	andi	r24, 0x0F	; 15
    290e:	d8 2e       	mov	r13, r24
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2910:	10 7f       	andi	r17, 0xF0	; 240
    2912:	10 32       	cpi	r17, 0x20	; 32
    2914:	19 f0       	breq	.+6      	; 0x291c <process_action+0x132>
    2916:	d2 94       	swap	r13
    2918:	80 ef       	ldi	r24, 0xF0	; 240
    291a:	d8 22       	and	r13, r24
                switch (action.key.code) {
    291c:	00 23       	and	r16, r16
    291e:	79 f0       	breq	.+30     	; 0x293e <process_action+0x154>
    2920:	01 30       	cpi	r16, 0x01	; 1
    2922:	09 f4       	brne	.+2      	; 0x2926 <process_action+0x13c>
    2924:	60 c0       	rjmp	.+192    	; 0x29e6 <process_action+0x1fc>
                        if (event.pressed) {
    2926:	ff 20       	and	r15, r15
    2928:	09 f4       	brne	.+2      	; 0x292c <process_action+0x142>
    292a:	6c c0       	rjmp	.+216    	; 0x2a04 <process_action+0x21a>
                            if (tap_count > 0) {
    292c:	ee 20       	and	r14, r14
    292e:	59 f0       	breq	.+22     	; 0x2946 <process_action+0x15c>
                                if (record->tap.interrupted) {
    2930:	f5 01       	movw	r30, r10
    2932:	85 81       	ldd	r24, Z+5	; 0x05
    2934:	80 ff       	sbrs	r24, 0
    2936:	bd cf       	rjmp	.-134    	; 0x28b2 <process_action+0xc8>
                                    record->tap.count = 0;
    2938:	8f 70       	andi	r24, 0x0F	; 15
    293a:	85 83       	std	Z+5, r24	; 0x05
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <process_action+0x15c>
                        if (event.pressed) {
    293e:	ff 20       	and	r15, r15
    2940:	49 f1       	breq	.+82     	; 0x2994 <process_action+0x1aa>
                            if (tap_count == 0) {
    2942:	e1 10       	cpse	r14, r1
    2944:	12 c0       	rjmp	.+36     	; 0x296a <process_action+0x180>
                                    register_mods(mods);
    2946:	8d 2d       	mov	r24, r13
}
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
                                    register_mods(mods);
    2966:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <register_mods>
                            else if (tap_count == 1) {
    296a:	e1 e0       	ldi	r30, 0x01	; 1
                                set_oneshot_mods(mods);
    296c:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    296e:	ee 12       	cpse	r14, r30
    2970:	eb cf       	rjmp	.-42     	; 0x2948 <process_action+0x15e>
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    2990:	0c 94 e9 1d 	jmp	0x3bd2	; 0x3bd2 <set_oneshot_mods>
                            if (tap_count == 0) {
    2994:	e1 10       	cpse	r14, r1
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <process_action+0x1d6>
                                clear_oneshot_mods();
    2998:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <clear_oneshot_mods>
                                unregister_mods(mods);
    299c:	8d 2d       	mov	r24, r13
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	bf 90       	pop	r11
    29ba:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    29bc:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <unregister_mods>
                            else if (tap_count == 1) {
    29c0:	f1 e0       	ldi	r31, 0x01	; 1
    29c2:	ef 12       	cpse	r14, r31
    29c4:	e9 cf       	rjmp	.-46     	; 0x2998 <process_action+0x1ae>
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	bf 90       	pop	r11
    29e2:	af 90       	pop	r10
    29e4:	08 95       	ret
                        if (event.pressed) {
    29e6:	ff 20       	and	r15, r15
    29e8:	49 f0       	breq	.+18     	; 0x29fc <process_action+0x212>
                            if (tap_count <= TAPPING_TOGGLE) {
    29ea:	85 e0       	ldi	r24, 0x05	; 5
    29ec:	8e 15       	cp	r24, r14
    29ee:	58 f3       	brcs	.-42     	; 0x29c6 <process_action+0x1dc>
                                if (mods & get_mods()) {
    29f0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <get_mods>
    29f4:	8d 21       	and	r24, r13
    29f6:	09 f4       	brne	.+2      	; 0x29fa <process_action+0x210>
    29f8:	a6 cf       	rjmp	.-180    	; 0x2946 <process_action+0x15c>
    29fa:	d0 cf       	rjmp	.-96     	; 0x299c <process_action+0x1b2>
                            if (tap_count < TAPPING_TOGGLE) {
    29fc:	e4 e0       	ldi	r30, 0x04	; 4
    29fe:	ee 15       	cp	r30, r14
    2a00:	10 f3       	brcs	.-60     	; 0x29c6 <process_action+0x1dc>
    2a02:	cc cf       	rjmp	.-104    	; 0x299c <process_action+0x1b2>
                            if (tap_count > 0) {
    2a04:	ee 20       	and	r14, r14
    2a06:	51 f2       	breq	.-108    	; 0x299c <process_action+0x1b2>
                            unregister_code(action.layer_tap.code);
    2a08:	80 2f       	mov	r24, r16
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    2a28:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <unregister_code>
            switch (action.usage.page) {
    2a2c:	81 2f       	mov	r24, r17
    2a2e:	86 95       	lsr	r24
    2a30:	86 95       	lsr	r24
    2a32:	83 70       	andi	r24, 0x03	; 3
    2a34:	c9 f0       	breq	.+50     	; 0x2a68 <process_action+0x27e>
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	31 f6       	brne	.-116    	; 0x29c6 <process_action+0x1dc>
                        host_consumer_send(action.usage.code);
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2a3e:	f1 10       	cpse	r15, r1
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <process_action+0x25c>
                        host_consumer_send(0);
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	80 e0       	ldi	r24, 0x00	; 0
}
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	ff 90       	pop	r15
    2a5a:	ef 90       	pop	r14
    2a5c:	df 90       	pop	r13
    2a5e:	cf 90       	pop	r12
    2a60:	bf 90       	pop	r11
    2a62:	af 90       	pop	r10
                        host_consumer_send(0);
    2a64:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <host_consumer_send>
                        host_system_send(action.usage.code);
    2a68:	c8 01       	movw	r24, r16
    2a6a:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2a6c:	f1 10       	cpse	r15, r1
    2a6e:	02 c0       	rjmp	.+4      	; 0x2a74 <process_action+0x28a>
                        host_system_send(0);
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	80 e0       	ldi	r24, 0x00	; 0
}
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
    2a8e:	bf 90       	pop	r11
    2a90:	af 90       	pop	r10
                        host_system_send(0);
    2a92:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <host_system_send>
                mousekey_on(action.key.code);
    2a96:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2a98:	ff 20       	and	r15, r15
    2a9a:	99 f0       	breq	.+38     	; 0x2ac2 <process_action+0x2d8>
                mousekey_on(action.key.code);
    2a9c:	0e 94 bd 22 	call	0x457a	; 0x457a <mousekey_on>
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	bf 90       	pop	r11
    2abc:	af 90       	pop	r10
                mousekey_send();
    2abe:	0c 94 a9 23 	jmp	0x4752	; 0x4752 <mousekey_send>
                mousekey_off(action.key.code);
    2ac2:	0e 94 25 23 	call	0x464a	; 0x464a <mousekey_off>
    2ac6:	ec cf       	rjmp	.-40     	; 0x2aa0 <process_action+0x2b6>
            if (action.layer_bitop.on == 0) {
    2ac8:	81 2f       	mov	r24, r17
    2aca:	83 70       	andi	r24, 0x03	; 3
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <process_action+0x2e6>
    2ace:	71 c0       	rjmp	.+226    	; 0x2bb2 <process_action+0x3c8>
                if (!event.pressed) {
    2ad0:	f1 10       	cpse	r15, r1
    2ad2:	79 cf       	rjmp	.-270    	; 0x29c6 <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    2ad4:	20 2f       	mov	r18, r16
    2ad6:	22 95       	swap	r18
    2ad8:	26 95       	lsr	r18
    2ada:	27 70       	andi	r18, 0x07	; 7
    2adc:	22 0f       	add	r18, r18
    2ade:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ae0:	60 2f       	mov	r22, r16
    2ae2:	6f 70       	andi	r22, 0x0F	; 15
    2ae4:	c6 2e       	mov	r12, r22
    2ae6:	d1 2c       	mov	r13, r1
    2ae8:	f1 2c       	mov	r15, r1
    2aea:	e1 2c       	mov	r14, r1
    2aec:	02 2e       	mov	r0, r18
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <process_action+0x30e>
    2af0:	cc 0c       	add	r12, r12
    2af2:	dd 1c       	adc	r13, r13
    2af4:	ee 1c       	adc	r14, r14
    2af6:	ff 1c       	adc	r15, r15
    2af8:	0a 94       	dec	r0
    2afa:	d2 f7       	brpl	.-12     	; 0x2af0 <process_action+0x306>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	cb 01       	movw	r24, r22
    2b02:	04 ff       	sbrs	r16, 4
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <process_action+0x33a>
    2b06:	6f e0       	ldi	r22, 0x0F	; 15
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <process_action+0x32e>
    2b10:	66 0f       	add	r22, r22
    2b12:	77 1f       	adc	r23, r23
    2b14:	88 1f       	adc	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	2a 95       	dec	r18
    2b1a:	d2 f7       	brpl	.-12     	; 0x2b10 <process_action+0x326>
    2b1c:	60 95       	com	r22
    2b1e:	70 95       	com	r23
    2b20:	80 95       	com	r24
    2b22:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2b24:	16 95       	lsr	r17
    2b26:	16 95       	lsr	r17
    2b28:	13 70       	andi	r17, 0x03	; 3
    2b2a:	12 30       	cpi	r17, 0x02	; 2
    2b2c:	c1 f0       	breq	.+48     	; 0x2b5e <process_action+0x374>
    2b2e:	60 f5       	brcc	.+88     	; 0x2b88 <process_action+0x39e>
    2b30:	6c 29       	or	r22, r12
    2b32:	7d 29       	or	r23, r13
    2b34:	8e 29       	or	r24, r14
    2b36:	9f 29       	or	r25, r15
    2b38:	11 30       	cpi	r17, 0x01	; 1
    2b3a:	51 f1       	breq	.+84     	; 0x2b90 <process_action+0x3a6>
}
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	df 90       	pop	r13
    2b54:	cf 90       	pop	r12
    2b56:	bf 90       	pop	r11
    2b58:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2b5a:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b5e:	6c 29       	or	r22, r12
    2b60:	7d 29       	or	r23, r13
    2b62:	8e 29       	or	r24, r14
    2b64:	9f 29       	or	r25, r15
}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	df 90       	pop	r13
    2b7e:	cf 90       	pop	r12
    2b80:	bf 90       	pop	r11
    2b82:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b84:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2b88:	0e 94 8f 1b 	call	0x371e	; 0x371e <default_layer_and>
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	b6 01       	movw	r22, r12
}
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	ff 90       	pop	r15
    2ba4:	ef 90       	pop	r14
    2ba6:	df 90       	pop	r13
    2ba8:	cf 90       	pop	r12
    2baa:	bf 90       	pop	r11
    2bac:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2bae:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2bb2:	86 95       	lsr	r24
    2bb4:	ff 20       	and	r15, r15
    2bb6:	11 f0       	breq	.+4      	; 0x2bbc <process_action+0x3d2>
    2bb8:	81 2f       	mov	r24, r17
    2bba:	81 70       	andi	r24, 0x01	; 1
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <process_action+0x3d8>
    2bc0:	02 cf       	rjmp	.-508    	; 0x29c6 <process_action+0x1dc>
                    uint8_t shift = action.layer_bitop.part*4;
    2bc2:	20 2f       	mov	r18, r16
    2bc4:	22 95       	swap	r18
    2bc6:	26 95       	lsr	r18
    2bc8:	27 70       	andi	r18, 0x07	; 7
    2bca:	22 0f       	add	r18, r18
    2bcc:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2bce:	60 2f       	mov	r22, r16
    2bd0:	6f 70       	andi	r22, 0x0F	; 15
    2bd2:	c6 2e       	mov	r12, r22
    2bd4:	d1 2c       	mov	r13, r1
    2bd6:	f1 2c       	mov	r15, r1
    2bd8:	e1 2c       	mov	r14, r1
    2bda:	02 2e       	mov	r0, r18
    2bdc:	04 c0       	rjmp	.+8      	; 0x2be6 <process_action+0x3fc>
    2bde:	cc 0c       	add	r12, r12
    2be0:	dd 1c       	adc	r13, r13
    2be2:	ee 1c       	adc	r14, r14
    2be4:	ff 1c       	adc	r15, r15
    2be6:	0a 94       	dec	r0
    2be8:	d2 f7       	brpl	.-12     	; 0x2bde <process_action+0x3f4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	cb 01       	movw	r24, r22
    2bf0:	04 ff       	sbrs	r16, 4
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <process_action+0x428>
    2bf4:	6f e0       	ldi	r22, 0x0F	; 15
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <process_action+0x41c>
    2bfe:	66 0f       	add	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	88 1f       	adc	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	2a 95       	dec	r18
    2c08:	d2 f7       	brpl	.-12     	; 0x2bfe <process_action+0x414>
    2c0a:	60 95       	com	r22
    2c0c:	70 95       	com	r23
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2c12:	16 95       	lsr	r17
    2c14:	16 95       	lsr	r17
    2c16:	13 70       	andi	r17, 0x03	; 3
    2c18:	12 30       	cpi	r17, 0x02	; 2
    2c1a:	c1 f0       	breq	.+48     	; 0x2c4c <process_action+0x462>
    2c1c:	60 f5       	brcc	.+88     	; 0x2c76 <process_action+0x48c>
    2c1e:	6c 29       	or	r22, r12
    2c20:	7d 29       	or	r23, r13
    2c22:	8e 29       	or	r24, r14
    2c24:	9f 29       	or	r25, r15
    2c26:	11 30       	cpi	r17, 0x01	; 1
    2c28:	51 f1       	breq	.+84     	; 0x2c7e <process_action+0x494>
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	bf 90       	pop	r11
    2c46:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2c48:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2c4c:	6c 29       	or	r22, r12
    2c4e:	7d 29       	or	r23, r13
    2c50:	8e 29       	or	r24, r14
    2c52:	9f 29       	or	r25, r15
}
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	df 90       	pop	r13
    2c6c:	cf 90       	pop	r12
    2c6e:	bf 90       	pop	r11
    2c70:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2c72:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2c76:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <layer_and>
    2c7a:	c7 01       	movw	r24, r14
    2c7c:	b6 01       	movw	r22, r12
}
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	ef 90       	pop	r14
    2c94:	df 90       	pop	r13
    2c96:	cf 90       	pop	r12
    2c98:	bf 90       	pop	r11
    2c9a:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2c9c:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <layer_or>
            switch (action.layer_tap.code) {
    2ca0:	00 3f       	cpi	r16, 0xF0	; 240
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <process_action+0x4bc>
    2ca4:	45 c0       	rjmp	.+138    	; 0x2d30 <process_action+0x546>
    2ca6:	60 f4       	brcc	.+24     	; 0x2cc0 <process_action+0x4d6>
    2ca8:	80 e4       	ldi	r24, 0x40	; 64
    2caa:	80 0f       	add	r24, r16
    2cac:	80 32       	cpi	r24, 0x20	; 32
    2cae:	28 f1       	brcs	.+74     	; 0x2cfa <process_action+0x510>
                    if (event.pressed) {
    2cb0:	ff 20       	and	r15, r15
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <process_action+0x4cc>
    2cb4:	96 c0       	rjmp	.+300    	; 0x2de2 <process_action+0x5f8>
                        if (tap_count > 0) {
    2cb6:	e1 10       	cpse	r14, r1
    2cb8:	fc cd       	rjmp	.-1032   	; 0x28b2 <process_action+0xc8>
                            layer_on(action.layer_tap.val);
    2cba:	81 2f       	mov	r24, r17
    2cbc:	8f 71       	andi	r24, 0x1F	; 31
    2cbe:	5a c0       	rjmp	.+180    	; 0x2d74 <process_action+0x58a>
            switch (action.layer_tap.code) {
    2cc0:	02 3f       	cpi	r16, 0xF2	; 242
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <process_action+0x4dc>
    2cc4:	68 c0       	rjmp	.+208    	; 0x2d96 <process_action+0x5ac>
    2cc6:	08 f4       	brcc	.+2      	; 0x2cca <process_action+0x4e0>
    2cc8:	51 c0       	rjmp	.+162    	; 0x2d6c <process_action+0x582>
    2cca:	03 3f       	cpi	r16, 0xF3	; 243
    2ccc:	89 f7       	brne	.-30     	; 0x2cb0 <process_action+0x4c6>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cce:	ff 20       	and	r15, r15
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <process_action+0x4ea>
    2cd2:	76 c0       	rjmp	.+236    	; 0x2dc0 <process_action+0x5d6>
    2cd4:	81 2f       	mov	r24, r17
    2cd6:	8f 71       	andi	r24, 0x1F	; 31
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	ff 90       	pop	r15
    2cec:	ef 90       	pop	r14
    2cee:	df 90       	pop	r13
    2cf0:	cf 90       	pop	r12
    2cf2:	bf 90       	pop	r11
    2cf4:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2cf6:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <layer_move>
            switch (action.layer_tap.code) {
    2cfa:	c0 2e       	mov	r12, r16
    2cfc:	81 2f       	mov	r24, r17
    2cfe:	8f 71       	andi	r24, 0x1F	; 31
    2d00:	10 2f       	mov	r17, r16
    2d02:	10 71       	andi	r17, 0x10	; 16
                    if (event.pressed) {
    2d04:	ff 20       	and	r15, r15
    2d06:	51 f0       	breq	.+20     	; 0x2d1c <process_action+0x532>
                        layer_on(action.layer_tap.val);
    2d08:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2d0c:	8c 2d       	mov	r24, r12
    2d0e:	82 95       	swap	r24
    2d10:	80 7f       	andi	r24, 0xF0	; 240
    2d12:	11 11       	cpse	r17, r1
    2d14:	19 ce       	rjmp	.-974    	; 0x2948 <process_action+0x15e>
    2d16:	80 2f       	mov	r24, r16
    2d18:	8f 70       	andi	r24, 0x0F	; 15
    2d1a:	16 ce       	rjmp	.-980    	; 0x2948 <process_action+0x15e>
                        layer_off(action.layer_tap.val);
    2d1c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2d20:	8c 2d       	mov	r24, r12
    2d22:	82 95       	swap	r24
    2d24:	80 7f       	andi	r24, 0xF0	; 240
    2d26:	11 11       	cpse	r17, r1
    2d28:	3a ce       	rjmp	.-908    	; 0x299e <process_action+0x1b4>
    2d2a:	80 2f       	mov	r24, r16
    2d2c:	8f 70       	andi	r24, 0x0F	; 15
    2d2e:	37 ce       	rjmp	.-914    	; 0x299e <process_action+0x1b4>
                    if (event.pressed) {
    2d30:	ff 20       	and	r15, r15
    2d32:	b9 f0       	breq	.+46     	; 0x2d62 <process_action+0x578>
                        if (tap_count < TAPPING_TOGGLE) {
    2d34:	f4 e0       	ldi	r31, 0x04	; 4
    2d36:	fe 15       	cp	r31, r14
    2d38:	08 f4       	brcc	.+2      	; 0x2d3c <process_action+0x552>
    2d3a:	45 ce       	rjmp	.-886    	; 0x29c6 <process_action+0x1dc>
                            layer_invert(action.layer_tap.val);
    2d3c:	81 2f       	mov	r24, r17
    2d3e:	8f 71       	andi	r24, 0x1F	; 31
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	ff 90       	pop	r15
    2d54:	ef 90       	pop	r14
    2d56:	df 90       	pop	r13
    2d58:	cf 90       	pop	r12
    2d5a:	bf 90       	pop	r11
    2d5c:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2d5e:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2d62:	85 e0       	ldi	r24, 0x05	; 5
    2d64:	8e 15       	cp	r24, r14
    2d66:	08 f4       	brcc	.+2      	; 0x2d6a <process_action+0x580>
    2d68:	2e ce       	rjmp	.-932    	; 0x29c6 <process_action+0x1dc>
    2d6a:	e8 cf       	rjmp	.-48     	; 0x2d3c <process_action+0x552>
    2d6c:	81 2f       	mov	r24, r17
    2d6e:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_on(action.layer_tap.val) :
    2d70:	ff 20       	and	r15, r15
    2d72:	a9 f0       	breq	.+42     	; 0x2d9e <process_action+0x5b4>
}
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	df 90       	pop	r13
    2d8c:	cf 90       	pop	r12
    2d8e:	bf 90       	pop	r11
    2d90:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2d92:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <layer_on>
    2d96:	81 2f       	mov	r24, r17
    2d98:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_off(action.layer_tap.val) :
    2d9a:	ff 20       	and	r15, r15
    2d9c:	59 f3       	breq	.-42     	; 0x2d74 <process_action+0x58a>
}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	df 90       	pop	r13
    2db6:	cf 90       	pop	r12
    2db8:	bf 90       	pop	r11
    2dba:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2dbc:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <layer_off>
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	af 90       	pop	r10
                                    layer_clear();
    2dde:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <layer_clear>
                        if (tap_count > 0) {
    2de2:	e1 10       	cpse	r14, r1
    2de4:	11 ce       	rjmp	.-990    	; 0x2a08 <process_action+0x21e>
                            layer_off(action.layer_tap.val);
    2de6:	81 2f       	mov	r24, r17
    2de8:	8f 71       	andi	r24, 0x1F	; 31
    2dea:	d9 cf       	rjmp	.-78     	; 0x2d9e <process_action+0x5b4>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2dec:	41 2f       	mov	r20, r17
    2dee:	4f 70       	andi	r20, 0x0F	; 15
    2df0:	60 2f       	mov	r22, r16
    2df2:	c5 01       	movw	r24, r10
    2df4:	0e 94 2c 07 	call	0xe58	; 0xe58 <action_get_macro>
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	bf 90       	pop	r11
    2e14:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2e16:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <action_macro_play>
            action_function(record, action.func.id, action.func.opt);
    2e1a:	41 2f       	mov	r20, r17
    2e1c:	4f 70       	andi	r20, 0x0F	; 15
    2e1e:	60 2f       	mov	r22, r16
    2e20:	c5 01       	movw	r24, r10
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	bf 90       	pop	r11
    2e3e:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2e40:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <action_function>

00002e44 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2e44:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <clear_weak_mods>
    clear_keys();
    2e48:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <clear_keys>
    send_keyboard_report();
    2e4c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2e50:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <mousekey_clear>
    mousekey_send();
    2e54:	0e 94 a9 23 	call	0x4752	; 0x4752 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <host_system_send>
    host_consumer_send(0);
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <host_consumer_send>

00002e68 <clear_keyboard>:
    clear_mods();
    2e68:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <clear_mods>
    clear_keyboard_but_mods();
    2e6c:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <clear_keyboard_but_mods>

00002e70 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <is_tap_key+0x8>
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <is_tap_key+0xa>
    2e7a:	1f 92       	push	r1
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	94 2f       	mov	r25, r20
    2e82:	49 83       	std	Y+1, r20	; 0x01
    2e84:	25 2f       	mov	r18, r21
    2e86:	5a 83       	std	Y+2, r21	; 0x02
    2e88:	6b 83       	std	Y+3, r22	; 0x03
    2e8a:	7c 83       	std	Y+4, r23	; 0x04
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	4c 81       	ldd	r20, Y+4	; 0x04
    2e90:	5d 81       	ldd	r21, Y+5	; 0x05
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	45 2b       	or	r20, r21
    2e96:	31 f0       	breq	.+12     	; 0x2ea4 <is_tap_key+0x34>
    2e98:	2f 3f       	cpi	r18, 0xFF	; 255
    2e9a:	19 f4       	brne	.+6      	; 0x2ea2 <is_tap_key+0x32>
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <is_tap_key+0x34>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    if (IS_NOEVENT(event)) { return false; }
    2ea4:	18 2f       	mov	r17, r24
    2ea6:	11 70       	andi	r17, 0x01	; 1
    2ea8:	80 fd       	sbrc	r24, 0
    2eaa:	3a c0       	rjmp	.+116    	; 0x2f20 <is_tap_key+0xb0>

    action_t action = layer_switch_get_action(event);
    2eac:	49 81       	ldd	r20, Y+1	; 0x01
    2eae:	5a 81       	ldd	r21, Y+2	; 0x02
    2eb0:	6b 81       	ldd	r22, Y+3	; 0x03
    2eb2:	7c 81       	ldd	r23, Y+4	; 0x04
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <layer_switch_get_action>

    switch (action.kind.id) {
    2eba:	29 2f       	mov	r18, r25
    2ebc:	22 95       	swap	r18
    2ebe:	2f 70       	andi	r18, 0x0F	; 15
    2ec0:	2c 30       	cpi	r18, 0x0C	; 12
    2ec2:	78 f4       	brcc	.+30     	; 0x2ee2 <is_tap_key+0x72>
    2ec4:	2a 30       	cpi	r18, 0x0A	; 10
    2ec6:	08 f5       	brcc	.+66     	; 0x2f0a <is_tap_key+0x9a>
    2ec8:	22 50       	subi	r18, 0x02	; 2
    2eca:	22 30       	cpi	r18, 0x02	; 2
    2ecc:	90 f0       	brcs	.+36     	; 0x2ef2 <is_tap_key+0x82>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2ece:	81 2f       	mov	r24, r17
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	1f 91       	pop	r17
    2ee0:	08 95       	ret
    switch (action.kind.id) {
    2ee2:	2c 30       	cpi	r18, 0x0C	; 12
    2ee4:	11 f0       	breq	.+4      	; 0x2eea <is_tap_key+0x7a>
    2ee6:	2f 30       	cpi	r18, 0x0F	; 15
    2ee8:	91 f7       	brne	.-28     	; 0x2ece <is_tap_key+0x5e>
            if (action.func.opt & FUNC_TAP) { return true; }
    2eea:	93 fb       	bst	r25, 3
    2eec:	11 27       	eor	r17, r17
    2eee:	10 f9       	bld	r17, 0
    2ef0:	ee cf       	rjmp	.-36     	; 0x2ece <is_tap_key+0x5e>
            switch (action.key.code) {
    2ef2:	85 3a       	cpi	r24, 0xA5	; 165
    2ef4:	30 f4       	brcc	.+12     	; 0x2f02 <is_tap_key+0x92>
    2ef6:	84 30       	cpi	r24, 0x04	; 4
    2ef8:	10 f4       	brcc	.+4      	; 0x2efe <is_tap_key+0x8e>
    2efa:	82 30       	cpi	r24, 0x02	; 2
    2efc:	30 f4       	brcc	.+12     	; 0x2f0a <is_tap_key+0x9a>
                    return true;
    2efe:	11 e0       	ldi	r17, 0x01	; 1
    2f00:	e6 cf       	rjmp	.-52     	; 0x2ece <is_tap_key+0x5e>
            switch (action.key.code) {
    2f02:	90 e2       	ldi	r25, 0x20	; 32
    2f04:	98 0f       	add	r25, r24
    2f06:	98 30       	cpi	r25, 0x08	; 8
    2f08:	d0 f3       	brcs	.-12     	; 0x2efe <is_tap_key+0x8e>
            switch (action.layer_tap.code) {
    2f0a:	88 3e       	cpi	r24, 0xE8	; 232
    2f0c:	30 f4       	brcc	.+12     	; 0x2f1a <is_tap_key+0xaa>
    2f0e:	80 3e       	cpi	r24, 0xE0	; 224
    2f10:	b0 f7       	brcc	.-20     	; 0x2efe <is_tap_key+0x8e>
    2f12:	84 50       	subi	r24, 0x04	; 4
    2f14:	81 3a       	cpi	r24, 0xA1	; 161
    2f16:	d8 f6       	brcc	.-74     	; 0x2ece <is_tap_key+0x5e>
    2f18:	f2 cf       	rjmp	.-28     	; 0x2efe <is_tap_key+0x8e>
    2f1a:	80 3f       	cpi	r24, 0xF0	; 240
    2f1c:	c1 f6       	brne	.-80     	; 0x2ece <is_tap_key+0x5e>
    2f1e:	ef cf       	rjmp	.-34     	; 0x2efe <is_tap_key+0x8e>
    if (IS_NOEVENT(event)) { return false; }
    2f20:	10 e0       	ldi	r17, 0x00	; 0
    2f22:	d5 cf       	rjmp	.-86     	; 0x2ece <is_tap_key+0x5e>

00002f24 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <debug_event+0x6>
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <debug_event+0x8>
    2f2c:	1f 92       	push	r1
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	08 95       	ret

00002f42 <debug_record>:

void debug_record(keyrecord_t record)
{
    2f42:	cf 93       	push	r28
    2f44:	df 93       	push	r29
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <debug_record+0x6>
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <debug_record+0x8>
    2f4a:	00 d0       	rcall	.+0      	; 0x2f4c <debug_record+0xa>
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2f50:	26 96       	adiw	r28, 0x06	; 6
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	08 95       	ret

00002f62 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f68:	c0 91 87 01 	lds	r28, 0x0187	; 0x800187 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f6c:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f6e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <waiting_buffer_head>
    2f72:	8c 13       	cpse	r24, r28
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f7e:	d0 e0       	ldi	r29, 0x00	; 0
    2f80:	1c 9f       	mul	r17, r28
    2f82:	f0 01       	movw	r30, r0
    2f84:	1d 9f       	mul	r17, r29
    2f86:	f0 0d       	add	r31, r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	e7 57       	subi	r30, 0x77	; 119
    2f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8e:	40 81       	ld	r20, Z
    2f90:	51 81       	ldd	r21, Z+1	; 0x01
    2f92:	62 81       	ldd	r22, Z+2	; 0x02
    2f94:	73 81       	ldd	r23, Z+3	; 0x03
    2f96:	84 81       	ldd	r24, Z+4	; 0x04
    2f98:	95 81       	ldd	r25, Z+5	; 0x05
    2f9a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f9e:	21 96       	adiw	r28, 0x01	; 1
    2fa0:	c7 70       	andi	r28, 0x07	; 7
    2fa2:	e5 cf       	rjmp	.-54     	; 0x2f6e <debug_waiting_buffer+0xc>

00002fa4 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2fa4:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <tapping_key>
    2fa8:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <tapping_key+0x1>
    2fac:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <tapping_key+0x2>
    2fb0:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <tapping_key+0x3>
    2fb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tapping_key+0x4>
    2fb8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <tapping_key+0x5>
    2fbc:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <debug_record>

00002fc0 <waiting_buffer_scan_tap>:
{
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2fc6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    2fca:	80 7f       	andi	r24, 0xF0	; 240
    2fcc:	d1 f4       	brne	.+52     	; 0x3002 <waiting_buffer_scan_tap+0x42>
    if (!tapping_key.event.pressed) return;
    2fce:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tapping_key+0x2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	b1 f0       	breq	.+44     	; 0x3002 <waiting_buffer_scan_tap+0x42>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fd6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    2fda:	d0 91 88 01 	lds	r29, 0x0188	; 0x800188 <waiting_buffer_head>
    2fde:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <tapping_key>
    2fe2:	c0 91 ba 01 	lds	r28, 0x01BA	; 0x8001ba <tapping_key+0x1>
    2fe6:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <tapping_key+0x3>
    2fea:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <tapping_key+0x4>
    2fee:	a1 e0       	ldi	r26, 0x01	; 1
    2ff0:	bf 3f       	cpi	r27, 0xFF	; 255
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <waiting_buffer_scan_tap+0x36>
    2ff4:	a0 e0       	ldi	r26, 0x00	; 0
    2ff6:	ba 01       	movw	r22, r20
    2ff8:	60 95       	com	r22
    2ffa:	70 95       	com	r23
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ffc:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ffe:	d8 13       	cpse	r29, r24
    3000:	04 c0       	rjmp	.+8      	; 0x300a <waiting_buffer_scan_tap+0x4a>
}
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	08 95       	ret
    300a:	21 e0       	ldi	r18, 0x01	; 1
    300c:	41 15       	cp	r20, r1
    300e:	51 05       	cpc	r21, r1
    3010:	21 f0       	breq	.+8      	; 0x301a <waiting_buffer_scan_tap+0x5a>
    3012:	2a 2f       	mov	r18, r26
    3014:	cf 3f       	cpi	r28, 0xFF	; 255
    3016:	09 f0       	breq	.+2      	; 0x301a <waiting_buffer_scan_tap+0x5a>
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    301c:	20 fd       	sbrc	r18, 0
    301e:	38 c0       	rjmp	.+112    	; 0x3090 <waiting_buffer_scan_tap+0xd0>
    3020:	18 9f       	mul	r17, r24
    3022:	f0 01       	movw	r30, r0
    3024:	19 9f       	mul	r17, r25
    3026:	f0 0d       	add	r31, r0
    3028:	11 24       	eor	r1, r1
    302a:	e7 57       	subi	r30, 0x77	; 119
    302c:	fe 4f       	sbci	r31, 0xFE	; 254
    302e:	21 81       	ldd	r18, Z+1	; 0x01
    3030:	2c 13       	cpse	r18, r28
    3032:	2e c0       	rjmp	.+92     	; 0x3090 <waiting_buffer_scan_tap+0xd0>
    3034:	20 81       	ld	r18, Z
    3036:	2b 13       	cpse	r18, r27
    3038:	2b c0       	rjmp	.+86     	; 0x3090 <waiting_buffer_scan_tap+0xd0>
    303a:	22 81       	ldd	r18, Z+2	; 0x02
    303c:	21 11       	cpse	r18, r1
    303e:	28 c0       	rjmp	.+80     	; 0x3090 <waiting_buffer_scan_tap+0xd0>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3040:	23 81       	ldd	r18, Z+3	; 0x03
    3042:	34 81       	ldd	r19, Z+4	; 0x04
    3044:	24 17       	cp	r18, r20
    3046:	35 07       	cpc	r19, r21
    3048:	00 f1       	brcs	.+64     	; 0x308a <waiting_buffer_scan_tap+0xca>
    304a:	24 1b       	sub	r18, r20
    304c:	35 0b       	sbc	r19, r21
    304e:	28 3c       	cpi	r18, 0xC8	; 200
    3050:	31 05       	cpc	r19, r1
    3052:	f0 f4       	brcc	.+60     	; 0x3090 <waiting_buffer_scan_tap+0xd0>
            tapping_key.tap.count = 1;
    3054:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tapping_key+0x5>
    3058:	2f 70       	andi	r18, 0x0F	; 15
    305a:	20 61       	ori	r18, 0x10	; 16
    305c:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    3060:	26 e0       	ldi	r18, 0x06	; 6
    3062:	28 9f       	mul	r18, r24
    3064:	f0 01       	movw	r30, r0
    3066:	29 9f       	mul	r18, r25
    3068:	f0 0d       	add	r31, r0
    306a:	11 24       	eor	r1, r1
    306c:	e2 57       	subi	r30, 0x72	; 114
    306e:	fe 4f       	sbci	r31, 0xFE	; 254
    3070:	80 81       	ld	r24, Z
    3072:	8f 70       	andi	r24, 0x0F	; 15
    3074:	80 61       	ori	r24, 0x10	; 16
    3076:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3078:	89 eb       	ldi	r24, 0xB9	; 185
    307a:	91 e0       	ldi	r25, 0x01	; 1
    307c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
}
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	1f 91       	pop	r17
            debug_waiting_buffer();
    3086:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <debug_waiting_buffer>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    308a:	26 0f       	add	r18, r22
    308c:	37 1f       	adc	r19, r23
    308e:	df cf       	rjmp	.-66     	; 0x304e <waiting_buffer_scan_tap+0x8e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3090:	01 96       	adiw	r24, 0x01	; 1
    3092:	87 70       	andi	r24, 0x07	; 7
    3094:	b4 cf       	rjmp	.-152    	; 0x2ffe <waiting_buffer_scan_tap+0x3e>

00003096 <process_tapping>:
{
    3096:	af 92       	push	r10
    3098:	bf 92       	push	r11
    309a:	cf 92       	push	r12
    309c:	df 92       	push	r13
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	61 97       	sbiw	r28, 0x11	; 17
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    30bc:	85 e0       	ldi	r24, 0x05	; 5
    30be:	f7 01       	movw	r30, r14
    30c0:	de 01       	movw	r26, r28
    30c2:	1d 96       	adiw	r26, 0x0d	; 13
    30c4:	01 90       	ld	r0, Z+
    30c6:	0d 92       	st	X+, r0
    30c8:	8a 95       	dec	r24
    30ca:	e1 f7       	brne	.-8      	; 0x30c4 <process_tapping+0x2e>
    30cc:	d7 01       	movw	r26, r14
    30ce:	4c 91       	ld	r20, X
    30d0:	11 96       	adiw	r26, 0x01	; 1
    30d2:	5c 91       	ld	r21, X
    30d4:	11 97       	sbiw	r26, 0x01	; 1
    30d6:	12 96       	adiw	r26, 0x02	; 2
    30d8:	dc 90       	ld	r13, X
    30da:	12 97       	sbiw	r26, 0x02	; 2
    30dc:	13 96       	adiw	r26, 0x03	; 3
    30de:	0d 91       	ld	r16, X+
    30e0:	1c 91       	ld	r17, X
    30e2:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <tapping_key>
    30e6:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tapping_key+0x1>
    30ea:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <tapping_key+0x3>
    30ee:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <tapping_key+0x4>
    30f2:	21 e0       	ldi	r18, 0x01	; 1
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	31 f0       	breq	.+12     	; 0x3104 <process_tapping+0x6e>
    30f8:	6f 3f       	cpi	r22, 0xFF	; 255
    30fa:	19 f4       	brne	.+6      	; 0x3102 <process_tapping+0x6c>
    30fc:	21 e0       	ldi	r18, 0x01	; 1
    30fe:	3f 3f       	cpi	r19, 0xFF	; 255
    3100:	09 f0       	breq	.+2      	; 0x3104 <process_tapping+0x6e>
    3102:	20 e0       	ldi	r18, 0x00	; 0
    if (IS_TAPPING_PRESSED()) {
    3104:	b2 2f       	mov	r27, r18
    3106:	b1 70       	andi	r27, 0x01	; 1
    3108:	bb 2e       	mov	r11, r27
    310a:	20 fd       	sbrc	r18, 0
    310c:	89 c1       	rjmp	.+786    	; 0x3420 <process_tapping+0x38a>
    310e:	a0 90 bb 01 	lds	r10, 0x01BB	; 0x8001bb <tapping_key+0x2>
    3112:	aa 20       	and	r10, r10
    3114:	09 f4       	brne	.+2      	; 0x3118 <process_tapping+0x82>
    3116:	25 c1       	rjmp	.+586    	; 0x3362 <process_tapping+0x2cc>
        if (WITHIN_TAPPING_TERM(event)) {
    3118:	08 17       	cp	r16, r24
    311a:	19 07       	cpc	r17, r25
    311c:	d8 f1       	brcs	.+118    	; 0x3194 <process_tapping+0xfe>
    311e:	f8 01       	movw	r30, r16
    3120:	e8 1b       	sub	r30, r24
    3122:	f9 0b       	sbc	r31, r25
    3124:	cf 01       	movw	r24, r30
    3126:	cc 24       	eor	r12, r12
    3128:	c3 94       	inc	r12
    312a:	88 3c       	cpi	r24, 0xC8	; 200
    312c:	91 05       	cpc	r25, r1
    312e:	08 f0       	brcs	.+2      	; 0x3132 <process_tapping+0x9c>
    3130:	c1 2c       	mov	r12, r1
    3132:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3136:	98 2f       	mov	r25, r24
    3138:	90 7f       	andi	r25, 0xF0	; 240
    313a:	cc 20       	and	r12, r12
    313c:	09 f4       	brne	.+2      	; 0x3140 <process_tapping+0xaa>
    313e:	c4 c0       	rjmp	.+392    	; 0x32c8 <process_tapping+0x232>
            if (tapping_key.tap.count == 0) {
    3140:	91 11       	cpse	r25, r1
    3142:	89 c0       	rjmp	.+274    	; 0x3256 <process_tapping+0x1c0>
    3144:	cd 2c       	mov	r12, r13
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3146:	65 13       	cpse	r22, r21
    3148:	2a c0       	rjmp	.+84     	; 0x319e <process_tapping+0x108>
    314a:	34 13       	cpse	r19, r20
    314c:	28 c0       	rjmp	.+80     	; 0x319e <process_tapping+0x108>
    314e:	d1 10       	cpse	r13, r1
    3150:	26 c0       	rjmp	.+76     	; 0x319e <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    3152:	8f 70       	andi	r24, 0x0F	; 15
    3154:	80 61       	ori	r24, 0x10	; 16
    3156:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    debug_tapping_key();
    315a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <debug_tapping_key>
                    process_action(&tapping_key);
    315e:	89 eb       	ldi	r24, 0xB9	; 185
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                    keyp->tap = tapping_key.tap;
    3166:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    316a:	d7 01       	movw	r26, r14
    316c:	15 96       	adiw	r26, 0x05	; 5
    316e:	8c 93       	st	X, r24
}
    3170:	8c 2d       	mov	r24, r12
    3172:	61 96       	adiw	r28, 0x11	; 17
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	df 90       	pop	r13
    318c:	cf 90       	pop	r12
    318e:	bf 90       	pop	r11
    3190:	af 90       	pop	r10
    3192:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    3194:	80 95       	com	r24
    3196:	90 95       	com	r25
    3198:	80 0f       	add	r24, r16
    319a:	91 1f       	adc	r25, r17
    319c:	c4 cf       	rjmp	.-120    	; 0x3126 <process_tapping+0x90>
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	01 15       	cp	r16, r1
    31a2:	11 05       	cpc	r17, r1
    31a4:	31 f0       	breq	.+12     	; 0x31b2 <process_tapping+0x11c>
    31a6:	5f 3f       	cpi	r21, 0xFF	; 255
    31a8:	19 f4       	brne	.+6      	; 0x31b0 <process_tapping+0x11a>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	4f 3f       	cpi	r20, 0xFF	; 255
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <process_tapping+0x11c>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    31b2:	80 fd       	sbrc	r24, 0
    31b4:	24 c0       	rjmp	.+72     	; 0x31fe <process_tapping+0x168>
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	8d 25       	eor	r24, r13
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    31ba:	b8 2f       	mov	r27, r24
    31bc:	b1 70       	andi	r27, 0x01	; 1
    31be:	ab 2e       	mov	r10, r27
    31c0:	80 ff       	sbrs	r24, 0
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31c4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    31c8:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31cc:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31ce:	82 13       	cpse	r24, r18
    31d0:	18 c0       	rjmp	.+48     	; 0x3202 <process_tapping+0x16c>
                    action_t action = layer_switch_get_action(event);
    31d2:	70 2f       	mov	r23, r16
    31d4:	19 8b       	std	Y+17, r17	; 0x11
    31d6:	08 8b       	std	Y+16, r16	; 0x10
    31d8:	6d 2d       	mov	r22, r13
    31da:	89 89       	ldd	r24, Y+17	; 0x11
    31dc:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <layer_switch_get_action>
                    switch (action.kind.id) {
    31e0:	29 2f       	mov	r18, r25
    31e2:	22 95       	swap	r18
    31e4:	2f 70       	andi	r18, 0x0F	; 15
    31e6:	22 30       	cpi	r18, 0x02	; 2
    31e8:	00 f1       	brcs	.+64     	; 0x322a <process_tapping+0x194>
    31ea:	24 30       	cpi	r18, 0x04	; 4
    31ec:	28 f5       	brcc	.+74     	; 0x3238 <process_tapping+0x1a2>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    31ee:	9f 70       	andi	r25, 0x0F	; 15
    31f0:	01 f1       	breq	.+64     	; 0x3232 <process_tapping+0x19c>
    31f2:	f7 01       	movw	r30, r14
    31f4:	95 81       	ldd	r25, Z+5	; 0x05
    31f6:	90 7f       	andi	r25, 0xF0	; 240
    31f8:	e1 f4       	brne	.+56     	; 0x3232 <process_tapping+0x19c>
    31fa:	cb 2c       	mov	r12, r11
    31fc:	b9 cf       	rjmp	.-142    	; 0x3170 <process_tapping+0xda>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	dc cf       	rjmp	.-72     	; 0x31ba <process_tapping+0x124>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	38 9f       	mul	r19, r24
    3206:	f0 01       	movw	r30, r0
    3208:	39 9f       	mul	r19, r25
    320a:	f0 0d       	add	r31, r0
    320c:	11 24       	eor	r1, r1
    320e:	e7 57       	subi	r30, 0x77	; 119
    3210:	fe 4f       	sbci	r31, 0xFE	; 254
    3212:	61 81       	ldd	r22, Z+1	; 0x01
    3214:	56 13       	cpse	r21, r22
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <process_tapping+0x18e>
    3218:	60 81       	ld	r22, Z
    321a:	46 13       	cpse	r20, r22
    321c:	03 c0       	rjmp	.+6      	; 0x3224 <process_tapping+0x18e>
    321e:	62 81       	ldd	r22, Z+2	; 0x02
    3220:	6d 11       	cpse	r22, r13
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <process_tapping+0x1ac>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	87 70       	andi	r24, 0x07	; 7
    3228:	d2 cf       	rjmp	.-92     	; 0x31ce <process_tapping+0x138>
                            if (action.key.mods && !action.key.code) return false;
    322a:	9f 70       	andi	r25, 0x0F	; 15
    322c:	11 f0       	breq	.+4      	; 0x3232 <process_tapping+0x19c>
    322e:	88 23       	and	r24, r24
    3230:	21 f3       	breq	.-56     	; 0x31fa <process_tapping+0x164>
                            if (IS_MOD(action.key.code)) return false;
    3232:	80 5e       	subi	r24, 0xE0	; 224
    3234:	88 30       	cpi	r24, 0x08	; 8
    3236:	08 f3       	brcs	.-62     	; 0x31fa <process_tapping+0x164>
                    process_action(keyp);
    3238:	c7 01       	movw	r24, r14
    323a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                    return true;
    323e:	ba 2c       	mov	r11, r10
    3240:	dc cf       	rjmp	.-72     	; 0x31fa <process_tapping+0x164>
                    if (event.pressed) {
    3242:	dd 20       	and	r13, r13
    3244:	09 f4       	brne	.+2      	; 0x3248 <process_tapping+0x1b2>
    3246:	94 cf       	rjmp	.-216    	; 0x3170 <process_tapping+0xda>
                        tapping_key.tap.interrupted = true;
    3248:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    324c:	81 60       	ori	r24, 0x01	; 1
    324e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    return false;
    3252:	c1 2c       	mov	r12, r1
    3254:	8d cf       	rjmp	.-230    	; 0x3170 <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3256:	65 13       	cpse	r22, r21
    3258:	06 c0       	rjmp	.+12     	; 0x3266 <process_tapping+0x1d0>
    325a:	34 13       	cpse	r19, r20
    325c:	04 c0       	rjmp	.+8      	; 0x3266 <process_tapping+0x1d0>
                    keyp->tap = tapping_key.tap;
    325e:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3260:	dd 20       	and	r13, r13
    3262:	09 f4       	brne	.+2      	; 0x3266 <process_tapping+0x1d0>
    3264:	a4 c0       	rjmp	.+328    	; 0x33ae <process_tapping+0x318>
                else if (is_tap_key(event) && event.pressed) {
    3266:	4d 87       	std	Y+13, r20	; 0x0d
    3268:	5e 87       	std	Y+14, r21	; 0x0e
    326a:	df 86       	std	Y+15, r13	; 0x0f
    326c:	70 2f       	mov	r23, r16
    326e:	19 8b       	std	Y+17, r17	; 0x11
    3270:	08 8b       	std	Y+16, r16	; 0x10
    3272:	6d 2d       	mov	r22, r13
    3274:	89 89       	ldd	r24, Y+17	; 0x11
    3276:	0e 94 38 17 	call	0x2e70	; 0x2e70 <is_tap_key>
    327a:	88 23       	and	r24, r24
    327c:	09 f4       	brne	.+2      	; 0x3280 <process_tapping+0x1ea>
    327e:	de c0       	rjmp	.+444    	; 0x343c <process_tapping+0x3a6>
    3280:	dd 20       	and	r13, r13
    3282:	09 f4       	brne	.+2      	; 0x3286 <process_tapping+0x1f0>
    3284:	db c0       	rjmp	.+438    	; 0x343c <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    3286:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    328a:	80 32       	cpi	r24, 0x20	; 32
    328c:	70 f0       	brcs	.+28     	; 0x32aa <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    328e:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <tapping_key>
    3292:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <tapping_key+0x1>
    3296:	38 87       	std	Y+8, r19	; 0x08
    3298:	2f 83       	std	Y+7, r18	; 0x07
    329a:	19 86       	std	Y+9, r1	; 0x09
    329c:	1b 87       	std	Y+11, r17	; 0x0b
    329e:	0a 87       	std	Y+10, r16	; 0x0a
    32a0:	8c 87       	std	Y+12, r24	; 0x0c
    32a2:	ce 01       	movw	r24, r28
    32a4:	07 96       	adiw	r24, 0x07	; 7
    32a6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                    tapping_key = *keyp;
    32aa:	86 e0       	ldi	r24, 0x06	; 6
    32ac:	f7 01       	movw	r30, r14
    32ae:	a9 eb       	ldi	r26, 0xB9	; 185
    32b0:	b1 e0       	ldi	r27, 0x01	; 1
    32b2:	01 90       	ld	r0, Z+
    32b4:	0d 92       	st	X+, r0
    32b6:	8a 95       	dec	r24
    32b8:	e1 f7       	brne	.-8      	; 0x32b2 <process_tapping+0x21c>
                    waiting_buffer_scan_tap();
    32ba:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    32be:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <debug_tapping_key>
                    return true;
    32c2:	cc 24       	eor	r12, r12
    32c4:	c3 94       	inc	r12
    32c6:	54 cf       	rjmp	.-344    	; 0x3170 <process_tapping+0xda>
            if (tapping_key.tap.count == 0) {
    32c8:	91 11       	cpse	r25, r1
    32ca:	15 c0       	rjmp	.+42     	; 0x32f6 <process_tapping+0x260>
                debug_event(event); debug("\n");
    32cc:	70 2f       	mov	r23, r16
    32ce:	19 8b       	std	Y+17, r17	; 0x11
    32d0:	08 8b       	std	Y+16, r16	; 0x10
    32d2:	6d 2d       	mov	r22, r13
    32d4:	89 89       	ldd	r24, Y+17	; 0x11
    32d6:	0e 94 92 17 	call	0x2f24	; 0x2f24 <debug_event>
                process_action(&tapping_key);
    32da:	89 eb       	ldi	r24, 0xB9	; 185
    32dc:	91 e0       	ldi	r25, 0x01	; 1
    32de:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                tapping_key = (keyrecord_t){};
    32e2:	86 e0       	ldi	r24, 0x06	; 6
    32e4:	e9 eb       	ldi	r30, 0xB9	; 185
    32e6:	f1 e0       	ldi	r31, 0x01	; 1
    32e8:	df 01       	movw	r26, r30
    32ea:	1d 92       	st	X+, r1
    32ec:	8a 95       	dec	r24
    32ee:	e9 f7       	brne	.-6      	; 0x32ea <process_tapping+0x254>
                debug_tapping_key();
    32f0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <debug_tapping_key>
                return false;
    32f4:	3d cf       	rjmp	.-390    	; 0x3170 <process_tapping+0xda>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32f6:	65 13       	cpse	r22, r21
    32f8:	12 c0       	rjmp	.+36     	; 0x331e <process_tapping+0x288>
    32fa:	34 13       	cpse	r19, r20
    32fc:	10 c0       	rjmp	.+32     	; 0x331e <process_tapping+0x288>
    32fe:	d1 10       	cpse	r13, r1
    3300:	0e c0       	rjmp	.+28     	; 0x331e <process_tapping+0x288>
                    keyp->tap = tapping_key.tap;
    3302:	f7 01       	movw	r30, r14
    3304:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3306:	c7 01       	movw	r24, r14
    3308:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                    tapping_key = (keyrecord_t){};
    330c:	e9 eb       	ldi	r30, 0xB9	; 185
    330e:	f1 e0       	ldi	r31, 0x01	; 1
    3310:	86 e0       	ldi	r24, 0x06	; 6
    3312:	df 01       	movw	r26, r30
    3314:	1d 92       	st	X+, r1
    3316:	8a 95       	dec	r24
    3318:	e9 f7       	brne	.-6      	; 0x3314 <process_tapping+0x27e>
                    return true;
    331a:	ca 2c       	mov	r12, r10
    331c:	29 cf       	rjmp	.-430    	; 0x3170 <process_tapping+0xda>
                else if (is_tap_key(event) && event.pressed) {
    331e:	4d 87       	std	Y+13, r20	; 0x0d
    3320:	5e 87       	std	Y+14, r21	; 0x0e
    3322:	df 86       	std	Y+15, r13	; 0x0f
    3324:	70 2f       	mov	r23, r16
    3326:	19 8b       	std	Y+17, r17	; 0x11
    3328:	08 8b       	std	Y+16, r16	; 0x10
    332a:	6d 2d       	mov	r22, r13
    332c:	89 89       	ldd	r24, Y+17	; 0x11
    332e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <is_tap_key>
    3332:	88 23       	and	r24, r24
    3334:	09 f4       	brne	.+2      	; 0x3338 <process_tapping+0x2a2>
    3336:	82 c0       	rjmp	.+260    	; 0x343c <process_tapping+0x3a6>
    3338:	dd 20       	and	r13, r13
    333a:	09 f4       	brne	.+2      	; 0x333e <process_tapping+0x2a8>
    333c:	7f c0       	rjmp	.+254    	; 0x343c <process_tapping+0x3a6>
                    if (tapping_key.tap.count > 1) {
    333e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3342:	80 32       	cpi	r24, 0x20	; 32
    3344:	08 f4       	brcc	.+2      	; 0x3348 <process_tapping+0x2b2>
    3346:	b1 cf       	rjmp	.-158    	; 0x32aa <process_tapping+0x214>
                        process_action(&(keyrecord_t){
    3348:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <tapping_key>
    334c:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <tapping_key+0x1>
    3350:	3a 83       	std	Y+2, r19	; 0x02
    3352:	29 83       	std	Y+1, r18	; 0x01
    3354:	1b 82       	std	Y+3, r1	; 0x03
    3356:	1d 83       	std	Y+5, r17	; 0x05
    3358:	0c 83       	std	Y+4, r16	; 0x04
    335a:	8e 83       	std	Y+6, r24	; 0x06
    335c:	ce 01       	movw	r24, r28
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	a2 cf       	rjmp	.-188    	; 0x32a6 <process_tapping+0x210>
        if (WITHIN_TAPPING_TERM(event)) {
    3362:	08 17       	cp	r16, r24
    3364:	19 07       	cpc	r17, r25
    3366:	88 f1       	brcs	.+98     	; 0x33ca <process_tapping+0x334>
    3368:	f8 01       	movw	r30, r16
    336a:	e8 1b       	sub	r30, r24
    336c:	f9 0b       	sbc	r31, r25
    336e:	cf 01       	movw	r24, r30
    3370:	c1 2c       	mov	r12, r1
    3372:	88 3c       	cpi	r24, 0xC8	; 200
    3374:	91 05       	cpc	r25, r1
    3376:	08 f0       	brcs	.+2      	; 0x337a <process_tapping+0x2e4>
    3378:	4b c0       	rjmp	.+150    	; 0x3410 <process_tapping+0x37a>
            if (event.pressed) {
    337a:	cd 2c       	mov	r12, r13
    337c:	dd 20       	and	r13, r13
    337e:	09 f4       	brne	.+2      	; 0x3382 <process_tapping+0x2ec>
    3380:	5d c0       	rjmp	.+186    	; 0x343c <process_tapping+0x3a6>
                if (IS_TAPPING_KEY(event.key)) {
    3382:	65 13       	cpse	r22, r21
    3384:	30 c0       	rjmp	.+96     	; 0x33e6 <process_tapping+0x350>
    3386:	34 13       	cpse	r19, r20
    3388:	2e c0       	rjmp	.+92     	; 0x33e6 <process_tapping+0x350>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    338a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    338e:	80 fd       	sbrc	r24, 0
    3390:	21 c0       	rjmp	.+66     	; 0x33d4 <process_tapping+0x33e>
    3392:	98 2f       	mov	r25, r24
    3394:	90 7f       	andi	r25, 0xF0	; 240
    3396:	f1 f0       	breq	.+60     	; 0x33d4 <process_tapping+0x33e>
                        keyp->tap = tapping_key.tap;
    3398:	d7 01       	movw	r26, r14
    339a:	15 96       	adiw	r26, 0x05	; 5
    339c:	8c 93       	st	X, r24
    339e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33a0:	90 3f       	cpi	r25, 0xF0	; 240
    33a2:	39 f0       	breq	.+14     	; 0x33b2 <process_tapping+0x31c>
    33a4:	98 2f       	mov	r25, r24
    33a6:	90 7f       	andi	r25, 0xF0	; 240
    33a8:	90 5f       	subi	r25, 0xF0	; 240
    33aa:	8f 70       	andi	r24, 0x0F	; 15
    33ac:	89 2b       	or	r24, r25
    33ae:	15 96       	adiw	r26, 0x05	; 5
    33b0:	8c 93       	st	X, r24
                        process_action(keyp);
    33b2:	c7 01       	movw	r24, r14
    33b4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                        tapping_key = *keyp;
    33b8:	86 e0       	ldi	r24, 0x06	; 6
    33ba:	f7 01       	movw	r30, r14
    33bc:	a9 eb       	ldi	r26, 0xB9	; 185
    33be:	b1 e0       	ldi	r27, 0x01	; 1
    33c0:	01 90       	ld	r0, Z+
    33c2:	0d 92       	st	X+, r0
    33c4:	8a 95       	dec	r24
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <process_tapping+0x32a>
    33c8:	93 cf       	rjmp	.-218    	; 0x32f0 <process_tapping+0x25a>
        if (WITHIN_TAPPING_TERM(event)) {
    33ca:	80 95       	com	r24
    33cc:	90 95       	com	r25
    33ce:	80 0f       	add	r24, r16
    33d0:	91 1f       	adc	r25, r17
    33d2:	ce cf       	rjmp	.-100    	; 0x3370 <process_tapping+0x2da>
                        tapping_key = *keyp;
    33d4:	86 e0       	ldi	r24, 0x06	; 6
    33d6:	f7 01       	movw	r30, r14
    33d8:	a9 eb       	ldi	r26, 0xB9	; 185
    33da:	b1 e0       	ldi	r27, 0x01	; 1
    33dc:	01 90       	ld	r0, Z+
    33de:	0d 92       	st	X+, r0
    33e0:	8a 95       	dec	r24
    33e2:	e1 f7       	brne	.-8      	; 0x33dc <process_tapping+0x346>
                        return true;
    33e4:	c5 ce       	rjmp	.-630    	; 0x3170 <process_tapping+0xda>
                } else if (is_tap_key(event)) {
    33e6:	4d 87       	std	Y+13, r20	; 0x0d
    33e8:	5e 87       	std	Y+14, r21	; 0x0e
    33ea:	df 86       	std	Y+15, r13	; 0x0f
    33ec:	70 2f       	mov	r23, r16
    33ee:	19 8b       	std	Y+17, r17	; 0x11
    33f0:	08 8b       	std	Y+16, r16	; 0x10
    33f2:	6d 2d       	mov	r22, r13
    33f4:	89 89       	ldd	r24, Y+17	; 0x11
    33f6:	0e 94 38 17 	call	0x2e70	; 0x2e70 <is_tap_key>
    33fa:	81 11       	cpse	r24, r1
    33fc:	56 cf       	rjmp	.-340    	; 0x32aa <process_tapping+0x214>
                    tapping_key.tap.interrupted = true;
    33fe:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tapping_key+0x5>
    3402:	81 60       	ori	r24, 0x01	; 1
    3404:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tapping_key+0x5>
                    process_action(keyp);
    3408:	c7 01       	movw	r24, r14
    340a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
                    return true;
    340e:	b0 ce       	rjmp	.-672    	; 0x3170 <process_tapping+0xda>
            debug_event(event); debug("\n");
    3410:	70 2f       	mov	r23, r16
    3412:	19 8b       	std	Y+17, r17	; 0x11
    3414:	08 8b       	std	Y+16, r16	; 0x10
    3416:	6d 2d       	mov	r22, r13
    3418:	89 89       	ldd	r24, Y+17	; 0x11
    341a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <debug_event>
    341e:	61 cf       	rjmp	.-318    	; 0x32e2 <process_tapping+0x24c>
        if (event.pressed && is_tap_key(event)) {
    3420:	dd 20       	and	r13, r13
    3422:	61 f0       	breq	.+24     	; 0x343c <process_tapping+0x3a6>
    3424:	4d 87       	std	Y+13, r20	; 0x0d
    3426:	5e 87       	std	Y+14, r21	; 0x0e
    3428:	df 86       	std	Y+15, r13	; 0x0f
    342a:	70 2f       	mov	r23, r16
    342c:	19 8b       	std	Y+17, r17	; 0x11
    342e:	08 8b       	std	Y+16, r16	; 0x10
    3430:	6d 2d       	mov	r22, r13
    3432:	89 89       	ldd	r24, Y+17	; 0x11
    3434:	0e 94 38 17 	call	0x2e70	; 0x2e70 <is_tap_key>
    3438:	81 11       	cpse	r24, r1
    343a:	37 cf       	rjmp	.-402    	; 0x32aa <process_tapping+0x214>
                    process_action(keyp);
    343c:	c7 01       	movw	r24, r14
    343e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <process_action>
    3442:	3f cf       	rjmp	.-386    	; 0x32c2 <process_tapping+0x22c>

00003444 <action_tapping_process>:
{
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	2c 97       	sbiw	r28, 0x0c	; 12
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	4f 83       	std	Y+7, r20	; 0x07
    345c:	58 87       	std	Y+8, r21	; 0x08
    345e:	69 87       	std	Y+9, r22	; 0x09
    3460:	7a 87       	std	Y+10, r23	; 0x0a
    3462:	8b 87       	std	Y+11, r24	; 0x0b
    3464:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3466:	ce 01       	movw	r24, r28
    3468:	07 96       	adiw	r24, 0x07	; 7
    346a:	0e 94 4b 18 	call	0x3096	; 0x3096 <process_tapping>
    346e:	88 23       	and	r24, r24
    3470:	09 f4       	brne	.+2      	; 0x3474 <action_tapping_process+0x30>
    3472:	42 c0       	rjmp	.+132    	; 0x34f8 <action_tapping_process+0xb4>
    3474:	9f 81       	ldd	r25, Y+7	; 0x07
    3476:	88 85       	ldd	r24, Y+8	; 0x08
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3478:	2a 85       	ldd	r18, Y+10	; 0x0a
    347a:	3b 85       	ldd	r19, Y+11	; 0x0b
    347c:	23 2b       	or	r18, r19
    347e:	39 f0       	breq	.+14     	; 0x348e <action_tapping_process+0x4a>
    3480:	8f 3f       	cpi	r24, 0xFF	; 255
    3482:	19 f4       	brne	.+6      	; 0x348a <action_tapping_process+0x46>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	9f 3f       	cpi	r25, 0xFF	; 255
    3488:	19 f0       	breq	.+6      	; 0x3490 <action_tapping_process+0x4c>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	01 c0       	rjmp	.+2      	; 0x3490 <action_tapping_process+0x4c>
    348e:	81 e0       	ldi	r24, 0x01	; 1
        if (!IS_NOEVENT(record.event)) {
    3490:	80 fd       	sbrc	r24, 0
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <action_tapping_process+0x60>
            debug("processed: "); debug_record(record); debug("\n");
    3494:	4f 81       	ldd	r20, Y+7	; 0x07
    3496:	58 85       	ldd	r21, Y+8	; 0x08
    3498:	69 85       	ldd	r22, Y+9	; 0x09
    349a:	7a 85       	ldd	r23, Y+10	; 0x0a
    349c:	8b 85       	ldd	r24, Y+11	; 0x0b
    349e:	9c 85       	ldd	r25, Y+12	; 0x0c
    34a0:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <debug_record>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34a4:	16 e0       	ldi	r17, 0x06	; 6
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34a6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    34aa:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <waiting_buffer_head>
    34ae:	89 17       	cp	r24, r25
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <action_tapping_process+0x70>
    34b2:	67 c0       	rjmp	.+206    	; 0x3582 <action_tapping_process+0x13e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34b4:	81 9f       	mul	r24, r17
    34b6:	c0 01       	movw	r24, r0
    34b8:	11 24       	eor	r1, r1
    34ba:	87 57       	subi	r24, 0x77	; 119
    34bc:	9e 4f       	sbci	r25, 0xFE	; 254
    34be:	0e 94 4b 18 	call	0x3096	; 0x3096 <process_tapping>
    34c2:	88 23       	and	r24, r24
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <action_tapping_process+0x84>
    34c6:	5d c0       	rjmp	.+186    	; 0x3582 <action_tapping_process+0x13e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    34c8:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <waiting_buffer_tail>
    34cc:	1e 9f       	mul	r17, r30
    34ce:	f0 01       	movw	r30, r0
    34d0:	11 24       	eor	r1, r1
    34d2:	e7 57       	subi	r30, 0x77	; 119
    34d4:	fe 4f       	sbci	r31, 0xFE	; 254
    34d6:	40 81       	ld	r20, Z
    34d8:	51 81       	ldd	r21, Z+1	; 0x01
    34da:	62 81       	ldd	r22, Z+2	; 0x02
    34dc:	73 81       	ldd	r23, Z+3	; 0x03
    34de:	84 81       	ldd	r24, Z+4	; 0x04
    34e0:	95 81       	ldd	r25, Z+5	; 0x05
    34e2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34e6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <waiting_buffer_tail>
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	87 70       	andi	r24, 0x07	; 7
    34f0:	99 27       	eor	r25, r25
    34f2:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <waiting_buffer_tail>
    34f6:	d7 cf       	rjmp	.-82     	; 0x34a6 <action_tapping_process+0x62>
    34f8:	86 e0       	ldi	r24, 0x06	; 6
    34fa:	fe 01       	movw	r30, r28
    34fc:	37 96       	adiw	r30, 0x07	; 7
    34fe:	de 01       	movw	r26, r28
    3500:	11 96       	adiw	r26, 0x01	; 1
    3502:	01 90       	ld	r0, Z+
    3504:	0d 92       	st	X+, r0
    3506:	8a 95       	dec	r24
    3508:	e1 f7       	brne	.-8      	; 0x3502 <action_tapping_process+0xbe>
    350a:	9f 81       	ldd	r25, Y+7	; 0x07
    350c:	88 85       	ldd	r24, Y+8	; 0x08
    350e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3510:	3b 85       	ldd	r19, Y+11	; 0x0b
    3512:	23 2b       	or	r18, r19
    3514:	39 f0       	breq	.+14     	; 0x3524 <action_tapping_process+0xe0>
    3516:	8f 3f       	cpi	r24, 0xFF	; 255
    3518:	19 f4       	brne	.+6      	; 0x3520 <action_tapping_process+0xdc>
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	9f 3f       	cpi	r25, 0xFF	; 255
    351e:	19 f0       	breq	.+6      	; 0x3526 <action_tapping_process+0xe2>
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	01 c0       	rjmp	.+2      	; 0x3526 <action_tapping_process+0xe2>
    3524:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(record.event)) {
    3526:	80 fd       	sbrc	r24, 0
    3528:	bd cf       	rjmp	.-134    	; 0x34a4 <action_tapping_process+0x60>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    352a:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <waiting_buffer_head>
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	c9 01       	movw	r24, r18
    3532:	01 96       	adiw	r24, 0x01	; 1
    3534:	87 70       	andi	r24, 0x07	; 7
    3536:	99 27       	eor	r25, r25
    3538:	40 91 87 01 	lds	r20, 0x0187	; 0x800187 <waiting_buffer_tail>
    353c:	48 17       	cp	r20, r24
    353e:	19 06       	cpc	r1, r25
    3540:	99 f0       	breq	.+38     	; 0x3568 <action_tapping_process+0x124>
    waiting_buffer[waiting_buffer_head] = record;
    3542:	96 e0       	ldi	r25, 0x06	; 6
    3544:	92 9f       	mul	r25, r18
    3546:	d0 01       	movw	r26, r0
    3548:	93 9f       	mul	r25, r19
    354a:	b0 0d       	add	r27, r0
    354c:	11 24       	eor	r1, r1
    354e:	a7 57       	subi	r26, 0x77	; 119
    3550:	be 4f       	sbci	r27, 0xFE	; 254
    3552:	fe 01       	movw	r30, r28
    3554:	31 96       	adiw	r30, 0x01	; 1
    3556:	01 90       	ld	r0, Z+
    3558:	0d 92       	st	X+, r0
    355a:	9a 95       	dec	r25
    355c:	e1 f7       	brne	.-8      	; 0x3556 <action_tapping_process+0x112>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    355e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3562:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <debug_waiting_buffer>
    3566:	9e cf       	rjmp	.-196    	; 0x34a4 <action_tapping_process+0x60>
            clear_keyboard();
    3568:	0e 94 34 17 	call	0x2e68	; 0x2e68 <clear_keyboard>
    waiting_buffer_head = 0;
    356c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3570:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    3574:	86 e0       	ldi	r24, 0x06	; 6
    3576:	e9 eb       	ldi	r30, 0xB9	; 185
    3578:	f1 e0       	ldi	r31, 0x01	; 1
    357a:	df 01       	movw	r26, r30
    357c:	1d 92       	st	X+, r1
    357e:	8a 95       	dec	r24
    3580:	e9 f7       	brne	.-6      	; 0x357c <action_tapping_process+0x138>
}
    3582:	2c 96       	adiw	r28, 0x0c	; 12
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	f8 94       	cli
    3588:	de bf       	out	0x3e, r29	; 62
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	cd bf       	out	0x3d, r28	; 61
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	08 95       	ret

00003596 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3596:	df 92       	push	r13
    3598:	ef 92       	push	r14
    359a:	ff 92       	push	r15
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    35a6:	89 2b       	or	r24, r25
    35a8:	b9 f0       	breq	.+46     	; 0x35d8 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    35aa:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    35ac:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    35ae:	dd 24       	eor	r13, r13
    35b0:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    35b2:	e8 01       	movw	r28, r16
    35b4:	21 96       	adiw	r28, 0x01	; 1
    35b6:	f8 01       	movw	r30, r16
    35b8:	84 91       	lpm	r24, Z
    35ba:	85 37       	cpi	r24, 0x75	; 117
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <action_macro_play+0x2a>
    35be:	6a c0       	rjmp	.+212    	; 0x3694 <action_macro_play+0xfe>
    35c0:	98 f4       	brcc	.+38     	; 0x35e8 <action_macro_play+0x52>
    35c2:	84 37       	cpi	r24, 0x74	; 116
    35c4:	08 f0       	brcs	.+2      	; 0x35c8 <action_macro_play+0x32>
    35c6:	59 c0       	rjmp	.+178    	; 0x367a <action_macro_play+0xe4>
    35c8:	84 30       	cpi	r24, 0x04	; 4
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <action_macro_play+0x38>
    35cc:	6f c0       	rjmp	.+222    	; 0x36ac <action_macro_play+0x116>
    35ce:	81 30       	cpi	r24, 0x01	; 1
    35d0:	11 f1       	breq	.+68     	; 0x3616 <action_macro_play+0x80>
    35d2:	82 30       	cpi	r24, 0x02	; 2
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <action_macro_play+0x42>
    35d6:	3c c0       	rjmp	.+120    	; 0x3650 <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	ff 90       	pop	r15
    35e2:	ef 90       	pop	r14
    35e4:	df 90       	pop	r13
    35e6:	08 95       	ret
        switch (MACRO_READ()) {
    35e8:	88 37       	cpi	r24, 0x78	; 120
    35ea:	09 f4       	brne	.+2      	; 0x35ee <action_macro_play+0x58>
    35ec:	5c c0       	rjmp	.+184    	; 0x36a6 <action_macro_play+0x110>
    35ee:	58 f4       	brcc	.+22     	; 0x3606 <action_macro_play+0x70>
    35f0:	86 37       	cpi	r24, 0x76	; 118
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <action_macro_play+0x60>
    35f4:	54 c0       	rjmp	.+168    	; 0x369e <action_macro_play+0x108>
    35f6:	87 37       	cpi	r24, 0x77	; 119
    35f8:	79 f7       	brne	.-34     	; 0x35d8 <action_macro_play+0x42>
                set_mods(mod_storage);
    35fa:	8e 2d       	mov	r24, r14
    35fc:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <set_mods>
                send_keyboard_report();
    3600:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
                break;
    3604:	1f c0       	rjmp	.+62     	; 0x3644 <action_macro_play+0xae>
        switch (MACRO_READ()) {
    3606:	9c e7       	ldi	r25, 0x7C	; 124
    3608:	98 0f       	add	r25, r24
    360a:	90 37       	cpi	r25, 0x70	; 112
    360c:	28 f7       	brcc	.-54     	; 0x35d8 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    360e:	8f 77       	andi	r24, 0x7F	; 127
    3610:	0e 94 7d 13 	call	0x26fa	; 0x26fa <unregister_code>
                break;
    3614:	17 c0       	rjmp	.+46     	; 0x3644 <action_macro_play+0xae>
                MACRO_READ();
    3616:	0e 5f       	subi	r16, 0xFE	; 254
    3618:	1f 4f       	sbci	r17, 0xFF	; 255
    361a:	fe 01       	movw	r30, r28
    361c:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    361e:	90 e2       	ldi	r25, 0x20	; 32
    3620:	98 0f       	add	r25, r24
    3622:	98 30       	cpi	r25, 0x08	; 8
    3624:	60 f4       	brcc	.+24     	; 0x363e <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    3626:	87 70       	andi	r24, 0x07	; 7
    3628:	fd 2d       	mov	r31, r13
    362a:	01 c0       	rjmp	.+2      	; 0x362e <action_macro_play+0x98>
    362c:	ff 0f       	add	r31, r31
    362e:	8a 95       	dec	r24
    3630:	ea f7       	brpl	.-6      	; 0x362c <action_macro_play+0x96>
    3632:	8f 2f       	mov	r24, r31
    3634:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <add_weak_mods>
                    send_keyboard_report();
    3638:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <send_keyboard_report>
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <action_macro_play+0xac>
                    register_code(macro);
    363e:	0e 94 a2 12 	call	0x2544	; 0x2544 <register_code>
                MACRO_READ();
    3642:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3644:	8f 2d       	mov	r24, r15
    3646:	81 50       	subi	r24, 0x01	; 1
    3648:	08 f0       	brcs	.+2      	; 0x364c <action_macro_play+0xb6>
    364a:	33 c0       	rjmp	.+102    	; 0x36b2 <action_macro_play+0x11c>
    364c:	8e 01       	movw	r16, r28
    364e:	b1 cf       	rjmp	.-158    	; 0x35b2 <action_macro_play+0x1c>
                MACRO_READ();
    3650:	0e 5f       	subi	r16, 0xFE	; 254
    3652:	1f 4f       	sbci	r17, 0xFF	; 255
    3654:	fe 01       	movw	r30, r28
    3656:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3658:	90 e2       	ldi	r25, 0x20	; 32
    365a:	98 0f       	add	r25, r24
    365c:	98 30       	cpi	r25, 0x08	; 8
    365e:	50 f4       	brcc	.+20     	; 0x3674 <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    3660:	87 70       	andi	r24, 0x07	; 7
    3662:	fd 2d       	mov	r31, r13
    3664:	01 c0       	rjmp	.+2      	; 0x3668 <action_macro_play+0xd2>
    3666:	ff 0f       	add	r31, r31
    3668:	8a 95       	dec	r24
    366a:	ea f7       	brpl	.-6      	; 0x3666 <action_macro_play+0xd0>
    366c:	8f 2f       	mov	r24, r31
    366e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <del_weak_mods>
    3672:	e2 cf       	rjmp	.-60     	; 0x3638 <action_macro_play+0xa2>
                    unregister_code(macro);
    3674:	0e 94 7d 13 	call	0x26fa	; 0x26fa <unregister_code>
    3678:	e4 cf       	rjmp	.-56     	; 0x3642 <action_macro_play+0xac>
                MACRO_READ();
    367a:	0e 5f       	subi	r16, 0xFE	; 254
    367c:	1f 4f       	sbci	r17, 0xFF	; 255
    367e:	fe 01       	movw	r30, r28
    3680:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3682:	c1 50       	subi	r28, 0x01	; 1
    3684:	f0 f2       	brcs	.-68     	; 0x3642 <action_macro_play+0xac>
    3686:	8f e9       	ldi	r24, 0x9F	; 159
    3688:	9f e0       	ldi	r25, 0x0F	; 15
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <action_macro_play+0xf4>
    368e:	00 c0       	rjmp	.+0      	; 0x3690 <action_macro_play+0xfa>
    3690:	00 00       	nop
    3692:	f7 cf       	rjmp	.-18     	; 0x3682 <action_macro_play+0xec>
                interval = MACRO_READ();
    3694:	0e 5f       	subi	r16, 0xFE	; 254
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	fe 01       	movw	r30, r28
    369a:	f4 90       	lpm	r15, Z
    369c:	d2 cf       	rjmp	.-92     	; 0x3642 <action_macro_play+0xac>
                mod_storage = get_mods();
    369e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <get_mods>
    36a2:	e8 2e       	mov	r14, r24
                break;
    36a4:	cf cf       	rjmp	.-98     	; 0x3644 <action_macro_play+0xae>
                clear_mods();
    36a6:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <clear_mods>
    36aa:	aa cf       	rjmp	.-172    	; 0x3600 <action_macro_play+0x6a>
                register_code(macro);
    36ac:	0e 94 a2 12 	call	0x2544	; 0x2544 <register_code>
                break;
    36b0:	c9 cf       	rjmp	.-110    	; 0x3644 <action_macro_play+0xae>
    36b2:	ef e9       	ldi	r30, 0x9F	; 159
    36b4:	ff e0       	ldi	r31, 0x0F	; 15
    36b6:	31 97       	sbiw	r30, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <action_macro_play+0x120>
    36ba:	00 c0       	rjmp	.+0      	; 0x36bc <action_macro_play+0x126>
    36bc:	00 00       	nop
    36be:	c3 cf       	rjmp	.-122    	; 0x3646 <action_macro_play+0xb0>

000036c0 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    36c0:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <layer_state>
    36c4:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <layer_state+0x1>
    36c8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <layer_state+0x2>
    36cc:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <layer_state+0x3>
    hook_layer_change(layer_state);
    36d0:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <hook_layer_change>

000036d4 <default_layer_debug>:
}
    36d4:	08 95       	ret

000036d6 <default_layer_set>:
    default_layer_state = state;
    36d6:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    36da:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    36de:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    36e2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    36e6:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <hook_default_layer_change>

000036ea <default_layer_or>:
{
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    36ee:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    36f2:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    36f6:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    36fa:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    36fe:	60 2b       	or	r22, r16
    3700:	71 2b       	or	r23, r17
    3702:	82 2b       	or	r24, r18
    3704:	93 2b       	or	r25, r19
    default_layer_state = state;
    3706:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    370a:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    370e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    3712:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    371a:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <hook_default_layer_change>

0000371e <default_layer_and>:
{
    371e:	0f 93       	push	r16
    3720:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3722:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    3726:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    372a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    372e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    3732:	60 23       	and	r22, r16
    3734:	71 23       	and	r23, r17
    3736:	82 23       	and	r24, r18
    3738:	93 23       	and	r25, r19
    default_layer_state = state;
    373a:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    373e:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    3742:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    3746:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    374e:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <hook_default_layer_change>

00003752 <default_layer_xor>:
{
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3756:	00 91 0e 02 	lds	r16, 0x020E	; 0x80020e <default_layer_state>
    375a:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <default_layer_state+0x1>
    375e:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <default_layer_state+0x2>
    3762:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <default_layer_state+0x3>
    3766:	60 27       	eor	r22, r16
    3768:	71 27       	eor	r23, r17
    376a:	82 27       	eor	r24, r18
    376c:	93 27       	eor	r25, r19
    default_layer_state = state;
    376e:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <default_layer_state>
    3772:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <default_layer_state+0x1>
    3776:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <default_layer_state+0x2>
    377a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <default_layer_state+0x3>
}
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3782:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <hook_default_layer_change>

00003786 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	cb 01       	movw	r24, r22
    378c:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

00003790 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	8a 01       	movw	r16, r20
    379e:	9b 01       	movw	r18, r22
    37a0:	04 c0       	rjmp	.+8      	; 0x37aa <layer_move+0x1a>
    37a2:	00 0f       	add	r16, r16
    37a4:	11 1f       	adc	r17, r17
    37a6:	22 1f       	adc	r18, r18
    37a8:	33 1f       	adc	r19, r19
    37aa:	8a 95       	dec	r24
    37ac:	d2 f7       	brpl	.-12     	; 0x37a2 <layer_move+0x12>
    37ae:	c9 01       	movw	r24, r18
    37b0:	b8 01       	movw	r22, r16
}
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    37b6:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

000037ba <layer_on>:

void layer_on(uint8_t layer)
{
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	50 e0       	ldi	r21, 0x00	; 0
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	04 c0       	rjmp	.+8      	; 0x37d0 <layer_on+0x16>
    37c8:	44 0f       	add	r20, r20
    37ca:	55 1f       	adc	r21, r21
    37cc:	66 1f       	adc	r22, r22
    37ce:	77 1f       	adc	r23, r23
    37d0:	8a 95       	dec	r24
    37d2:	d2 f7       	brpl	.-12     	; 0x37c8 <layer_on+0xe>
    37d4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <layer_state>
    37d8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <layer_state+0x1>
    37dc:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <layer_state+0x2>
    37e0:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <layer_state+0x3>
    37e4:	8a 01       	movw	r16, r20
    37e6:	9b 01       	movw	r18, r22
    37e8:	08 2b       	or	r16, r24
    37ea:	19 2b       	or	r17, r25
    37ec:	2a 2b       	or	r18, r26
    37ee:	3b 2b       	or	r19, r27
    37f0:	c9 01       	movw	r24, r18
    37f2:	b8 01       	movw	r22, r16
}
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    37f8:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

000037fc <layer_off>:

void layer_off(uint8_t layer)
{
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	04 c0       	rjmp	.+8      	; 0x3812 <layer_off+0x16>
    380a:	44 0f       	add	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	66 1f       	adc	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	8a 95       	dec	r24
    3814:	d2 f7       	brpl	.-12     	; 0x380a <layer_off+0xe>
    3816:	cb 01       	movw	r24, r22
    3818:	ba 01       	movw	r22, r20
    381a:	60 95       	com	r22
    381c:	70 95       	com	r23
    381e:	80 95       	com	r24
    3820:	90 95       	com	r25
    3822:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    3826:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    382a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    382e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    3832:	60 23       	and	r22, r16
    3834:	71 23       	and	r23, r17
    3836:	82 23       	and	r24, r18
    3838:	93 23       	and	r25, r19
}
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    383e:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

00003842 <layer_invert>:

void layer_invert(uint8_t layer)
{
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    3846:	41 e0       	ldi	r20, 0x01	; 1
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <layer_invert+0x16>
    3850:	44 0f       	add	r20, r20
    3852:	55 1f       	adc	r21, r21
    3854:	66 1f       	adc	r22, r22
    3856:	77 1f       	adc	r23, r23
    3858:	8a 95       	dec	r24
    385a:	d2 f7       	brpl	.-12     	; 0x3850 <layer_invert+0xe>
    385c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <layer_state>
    3860:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <layer_state+0x1>
    3864:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <layer_state+0x2>
    3868:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <layer_state+0x3>
    386c:	8a 01       	movw	r16, r20
    386e:	9b 01       	movw	r18, r22
    3870:	08 27       	eor	r16, r24
    3872:	19 27       	eor	r17, r25
    3874:	2a 27       	eor	r18, r26
    3876:	3b 27       	eor	r19, r27
    3878:	c9 01       	movw	r24, r18
    387a:	b8 01       	movw	r22, r16
}
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    3880:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

00003884 <layer_or>:

void layer_or(uint32_t state)
{
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3888:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    388c:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    3890:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    3894:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    3898:	60 2b       	or	r22, r16
    389a:	71 2b       	or	r23, r17
    389c:	82 2b       	or	r24, r18
    389e:	93 2b       	or	r25, r19
}
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    38a4:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

000038a8 <layer_and>:
void layer_and(uint32_t state)
{
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    38ac:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    38b0:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    38b4:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    38b8:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    38bc:	60 23       	and	r22, r16
    38be:	71 23       	and	r23, r17
    38c0:	82 23       	and	r24, r18
    38c2:	93 23       	and	r25, r19
}
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    38c8:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

000038cc <layer_xor>:
void layer_xor(uint32_t state)
{
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    38d0:	00 91 0a 02 	lds	r16, 0x020A	; 0x80020a <layer_state>
    38d4:	10 91 0b 02 	lds	r17, 0x020B	; 0x80020b <layer_state+0x1>
    38d8:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <layer_state+0x2>
    38dc:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <layer_state+0x3>
    38e0:	60 27       	eor	r22, r16
    38e2:	71 27       	eor	r23, r17
    38e4:	82 27       	eor	r24, r18
    38e6:	93 27       	eor	r25, r19
}
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    38ec:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <layer_state_set>

000038f0 <layer_debug>:
    38f0:	08 95       	ret

000038f2 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    38f2:	4f 92       	push	r4
    38f4:	5f 92       	push	r5
    38f6:	6f 92       	push	r6
    38f8:	7f 92       	push	r7
    38fa:	9f 92       	push	r9
    38fc:	af 92       	push	r10
    38fe:	bf 92       	push	r11
    3900:	cf 92       	push	r12
    3902:	df 92       	push	r13
    3904:	ef 92       	push	r14
    3906:	ff 92       	push	r15
    3908:	0f 93       	push	r16
    390a:	1f 93       	push	r17
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	00 d0       	rcall	.+0      	; 0x3912 <layer_switch_get_action+0x20>
    3912:	00 d0       	rcall	.+0      	; 0x3914 <layer_switch_get_action+0x22>
    3914:	1f 92       	push	r1
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	6b 83       	std	Y+3, r22	; 0x03
    391c:	7c 83       	std	Y+4, r23	; 0x04
    391e:	8d 83       	std	Y+5, r24	; 0x05
    3920:	8a 01       	movw	r16, r20
    3922:	8c 81       	ldd	r24, Y+4	; 0x04
    3924:	9d 81       	ldd	r25, Y+5	; 0x05
    3926:	89 2b       	or	r24, r25
    3928:	39 f0       	breq	.+14     	; 0x3938 <layer_switch_get_action+0x46>
    392a:	1f 3f       	cpi	r17, 0xFF	; 255
    392c:	19 f4       	brne	.+6      	; 0x3934 <layer_switch_get_action+0x42>
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	4f 3f       	cpi	r20, 0xFF	; 255
    3932:	19 f0       	breq	.+6      	; 0x393a <layer_switch_get_action+0x48>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	01 c0       	rjmp	.+2      	; 0x393a <layer_switch_get_action+0x48>
    3938:	81 e0       	ldi	r24, 0x01	; 1
    if (IS_NOEVENT(event)) return (action_t)ACTION_NO;
    393a:	80 fd       	sbrc	r24, 0
    393c:	6a c0       	rjmp	.+212    	; 0x3a12 <layer_switch_get_action+0x120>
    393e:	a1 2e       	mov	r10, r17
    3940:	b1 2c       	mov	r11, r1
    3942:	c0 2e       	mov	r12, r16
    3944:	d1 2c       	mov	r13, r1

    uint8_t layer = 0;
#ifndef NO_TRACK_KEY_PRESS
    if (event.pressed) {
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	88 23       	and	r24, r24
    394a:	09 f4       	brne	.+2      	; 0x394e <layer_switch_get_action+0x5c>
    394c:	56 c0       	rjmp	.+172    	; 0x39fa <layer_switch_get_action+0x108>
    uint32_t layers = layer_state | default_layer_state;
    394e:	40 90 0a 02 	lds	r4, 0x020A	; 0x80020a <layer_state>
    3952:	50 90 0b 02 	lds	r5, 0x020B	; 0x80020b <layer_state+0x1>
    3956:	60 90 0c 02 	lds	r6, 0x020C	; 0x80020c <layer_state+0x2>
    395a:	70 90 0d 02 	lds	r7, 0x020D	; 0x80020d <layer_state+0x3>
    395e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <default_layer_state>
    3962:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <default_layer_state+0x1>
    3966:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <default_layer_state+0x2>
    396a:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <default_layer_state+0x3>
    396e:	48 2a       	or	r4, r24
    3970:	59 2a       	or	r5, r25
    3972:	6a 2a       	or	r6, r26
    3974:	7b 2a       	or	r7, r27
    3976:	8f e1       	ldi	r24, 0x1F	; 31
    3978:	e8 2e       	mov	r14, r24
    397a:	f1 2c       	mov	r15, r1
    397c:	9e 2c       	mov	r9, r14
        if (layers & (1UL<<i)) {
    397e:	d3 01       	movw	r26, r6
    3980:	c2 01       	movw	r24, r4
    3982:	0e 2c       	mov	r0, r14
    3984:	04 c0       	rjmp	.+8      	; 0x398e <layer_switch_get_action+0x9c>
    3986:	b6 95       	lsr	r27
    3988:	a7 95       	ror	r26
    398a:	97 95       	ror	r25
    398c:	87 95       	ror	r24
    398e:	0a 94       	dec	r0
    3990:	d2 f7       	brpl	.-12     	; 0x3986 <layer_switch_get_action+0x94>
    3992:	80 fd       	sbrc	r24, 0
    3994:	2b c0       	rjmp	.+86     	; 0x39ec <layer_switch_get_action+0xfa>
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	e8 1a       	sub	r14, r24
    399a:	f1 08       	sbc	r15, r1
    399c:	78 f7       	brcc	.-34     	; 0x397c <layer_switch_get_action+0x8a>
    return 0;
    399e:	91 2c       	mov	r9, r1
        layer = current_layer_for_key(event.key);
        layer_pressed[event.key.row][event.key.col] = layer;
    39a0:	8f e0       	ldi	r24, 0x0F	; 15
    39a2:	8a 9d       	mul	r24, r10
    39a4:	f0 01       	movw	r30, r0
    39a6:	8b 9d       	mul	r24, r11
    39a8:	f0 0d       	add	r31, r0
    39aa:	11 24       	eor	r1, r1
    39ac:	e1 54       	subi	r30, 0x41	; 65
    39ae:	fe 4f       	sbci	r31, 0xFE	; 254
    39b0:	ec 0d       	add	r30, r12
    39b2:	fd 1d       	adc	r31, r13
    39b4:	90 82       	st	Z, r9
        layer = layer_pressed[event.key.row][event.key.col];
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
    39b6:	09 83       	std	Y+1, r16	; 0x01
    39b8:	1a 83       	std	Y+2, r17	; 0x02
    39ba:	69 81       	ldd	r22, Y+1	; 0x01
    39bc:	7a 81       	ldd	r23, Y+2	; 0x02
    39be:	89 2d       	mov	r24, r9
}
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	df 90       	pop	r13
    39d8:	cf 90       	pop	r12
    39da:	bf 90       	pop	r11
    39dc:	af 90       	pop	r10
    39de:	9f 90       	pop	r9
    39e0:	7f 90       	pop	r7
    39e2:	6f 90       	pop	r6
    39e4:	5f 90       	pop	r5
    39e6:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    39e8:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <action_for_key>
            action = action_for_key(i, key);
    39ec:	b8 01       	movw	r22, r16
    39ee:	8e 2d       	mov	r24, r14
    39f0:	0e 94 0c 20 	call	0x4018	; 0x4018 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	79 f2       	breq	.-98     	; 0x3996 <layer_switch_get_action+0xa4>
    39f8:	d3 cf       	rjmp	.-90     	; 0x39a0 <layer_switch_get_action+0xae>
        layer = layer_pressed[event.key.row][event.key.col];
    39fa:	8f e0       	ldi	r24, 0x0F	; 15
    39fc:	8a 9d       	mul	r24, r10
    39fe:	f0 01       	movw	r30, r0
    3a00:	8b 9d       	mul	r24, r11
    3a02:	f0 0d       	add	r31, r0
    3a04:	11 24       	eor	r1, r1
    3a06:	e1 54       	subi	r30, 0x41	; 65
    3a08:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0a:	ec 0d       	add	r30, r12
    3a0c:	fd 1d       	adc	r31, r13
    3a0e:	90 80       	ld	r9, Z
    3a10:	d2 cf       	rjmp	.-92     	; 0x39b6 <layer_switch_get_action+0xc4>
}
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	df 90       	pop	r13
    3a2e:	cf 90       	pop	r12
    3a30:	bf 90       	pop	r11
    3a32:	af 90       	pop	r10
    3a34:	9f 90       	pop	r9
    3a36:	7f 90       	pop	r7
    3a38:	6f 90       	pop	r6
    3a3a:	5f 90       	pop	r5
    3a3c:	4f 90       	pop	r4
    3a3e:	08 95       	ret

00003a40 <add_key>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
    3a40:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    3a44:	99 23       	and	r25, r25
    3a46:	69 f1       	breq	.+90     	; 0x3aa2 <add_key+0x62>
    3a48:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    3a4c:	99 23       	and	r25, r25
    3a4e:	49 f1       	breq	.+82     	; 0x3aa2 <add_key+0x62>
    3a50:	e8 2f       	mov	r30, r24
    3a52:	e6 95       	lsr	r30
    3a54:	e6 95       	lsr	r30
    3a56:	e6 95       	lsr	r30
    3a58:	ef 31       	cpi	r30, 0x1F	; 31
    3a5a:	91 f0       	breq	.+36     	; 0x3a80 <add_key+0x40>
    3a5c:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3a60:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3a64:	e2 0f       	add	r30, r18
    3a66:	f3 2f       	mov	r31, r19
    3a68:	f1 1d       	adc	r31, r1
    3a6a:	87 70       	andi	r24, 0x07	; 7
    3a6c:	21 e0       	ldi	r18, 0x01	; 1
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	01 c0       	rjmp	.+2      	; 0x3a74 <add_key+0x34>
    3a72:	22 0f       	add	r18, r18
    3a74:	8a 95       	dec	r24
    3a76:	ea f7       	brpl	.-6      	; 0x3a72 <add_key+0x32>
    3a78:	81 81       	ldd	r24, Z+1	; 0x01
    3a7a:	82 2b       	or	r24, r18
    3a7c:	81 83       	std	Z+1, r24	; 0x01
    3a7e:	08 95       	ret
    3a80:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    3a84:	90 ff       	sbrs	r25, 0
    3a86:	22 c0       	rjmp	.+68     	; 0x3acc <add_key+0x8c>
    3a88:	1f 92       	push	r1
    3a8a:	8f 93       	push	r24
    3a8c:	89 ea       	ldi	r24, 0xA9	; 169
    3a8e:	94 e0       	ldi	r25, 0x04	; 4
    3a90:	9f 93       	push	r25
    3a92:	8f 93       	push	r24
    3a94:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	08 95       	ret
    3aa2:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3aa6:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3aaa:	f9 01       	movw	r30, r18
    3aac:	32 96       	adiw	r30, 0x02	; 2
    3aae:	9f ef       	ldi	r25, 0xFF	; 255
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	51 91       	ld	r21, Z+
    3ab4:	85 17       	cp	r24, r21
    3ab6:	51 f0       	breq	.+20     	; 0x3acc <add_key+0x8c>
    3ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aba:	19 f4       	brne	.+6      	; 0x3ac2 <add_key+0x82>
    3abc:	51 11       	cpse	r21, r1
    3abe:	01 c0       	rjmp	.+2      	; 0x3ac2 <add_key+0x82>
    3ac0:	94 2f       	mov	r25, r20
    3ac2:	4f 5f       	subi	r20, 0xFF	; 255
    3ac4:	4e 31       	cpi	r20, 0x1E	; 30
    3ac6:	a9 f7       	brne	.-22     	; 0x3ab2 <add_key+0x72>
    3ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aca:	09 f4       	brne	.+2      	; 0x3ace <add_key+0x8e>
    3acc:	08 95       	ret
    3ace:	29 0f       	add	r18, r25
    3ad0:	31 1d       	adc	r19, r1
    3ad2:	97 fd       	sbrc	r25, 7
    3ad4:	3a 95       	dec	r19
    3ad6:	f9 01       	movw	r30, r18
    3ad8:	82 83       	std	Z+2, r24	; 0x02
    3ada:	08 95       	ret

00003adc <del_key>:
    3adc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <keyboard_protocol>
    3ae0:	99 23       	and	r25, r25
    3ae2:	79 f1       	breq	.+94     	; 0x3b42 <del_key+0x66>
    3ae4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <keyboard_nkro>
    3ae8:	99 23       	and	r25, r25
    3aea:	59 f1       	breq	.+86     	; 0x3b42 <del_key+0x66>
    3aec:	e8 2f       	mov	r30, r24
    3aee:	e6 95       	lsr	r30
    3af0:	e6 95       	lsr	r30
    3af2:	e6 95       	lsr	r30
    3af4:	ef 31       	cpi	r30, 0x1F	; 31
    3af6:	a1 f0       	breq	.+40     	; 0x3b20 <del_key+0x44>
    3af8:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3afc:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3b00:	e2 0f       	add	r30, r18
    3b02:	f3 2f       	mov	r31, r19
    3b04:	f1 1d       	adc	r31, r1
    3b06:	28 2f       	mov	r18, r24
    3b08:	27 70       	andi	r18, 0x07	; 7
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	01 c0       	rjmp	.+2      	; 0x3b12 <del_key+0x36>
    3b10:	88 0f       	add	r24, r24
    3b12:	2a 95       	dec	r18
    3b14:	ea f7       	brpl	.-6      	; 0x3b10 <del_key+0x34>
    3b16:	80 95       	com	r24
    3b18:	91 81       	ldd	r25, Z+1	; 0x01
    3b1a:	89 23       	and	r24, r25
    3b1c:	81 83       	std	Z+1, r24	; 0x01
    3b1e:	08 95       	ret
    3b20:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    3b24:	90 ff       	sbrs	r25, 0
    3b26:	1e c0       	rjmp	.+60     	; 0x3b64 <del_key+0x88>
    3b28:	1f 92       	push	r1
    3b2a:	8f 93       	push	r24
    3b2c:	8b e8       	ldi	r24, 0x8B	; 139
    3b2e:	94 e0       	ldi	r25, 0x04	; 4
    3b30:	9f 93       	push	r25
    3b32:	8f 93       	push	r24
    3b34:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	08 95       	ret
    3b42:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3b46:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3b4a:	f9 01       	movw	r30, r18
    3b4c:	32 96       	adiw	r30, 0x02	; 2
    3b4e:	20 5e       	subi	r18, 0xE0	; 224
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	91 91       	ld	r25, Z+
    3b54:	89 13       	cpse	r24, r25
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <del_key+0x82>
    3b58:	df 01       	movw	r26, r30
    3b5a:	11 97       	sbiw	r26, 0x01	; 1
    3b5c:	1c 92       	st	X, r1
    3b5e:	e2 17       	cp	r30, r18
    3b60:	f3 07       	cpc	r31, r19
    3b62:	b9 f7       	brne	.-18     	; 0x3b52 <del_key+0x76>
    3b64:	08 95       	ret

00003b66 <clear_keys>:
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3b6e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3b72:	e8 0f       	add	r30, r24
    3b74:	f9 1f       	adc	r31, r25
    3b76:	10 82       	st	Z, r1
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	80 32       	cpi	r24, 0x20	; 32
    3b7c:	91 05       	cpc	r25, r1
    3b7e:	a9 f7       	brne	.-22     	; 0x3b6a <clear_keys+0x4>
    3b80:	08 95       	ret

00003b82 <get_mods>:
    3b82:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3b86:	08 95       	ret

00003b88 <add_mods>:
    3b88:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <real_mods>
    3b8c:	89 2b       	or	r24, r25
    3b8e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3b92:	08 95       	ret

00003b94 <del_mods>:
    3b94:	98 2f       	mov	r25, r24
    3b96:	90 95       	com	r25
    3b98:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3b9c:	89 23       	and	r24, r25
    3b9e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3ba2:	08 95       	ret

00003ba4 <set_mods>:
    3ba4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <real_mods>
    3ba8:	08 95       	ret

00003baa <clear_mods>:
    3baa:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <real_mods>
    3bae:	08 95       	ret

00003bb0 <add_weak_mods>:
    3bb0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <weak_mods>
    3bb4:	89 2b       	or	r24, r25
    3bb6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <weak_mods>
    3bba:	08 95       	ret

00003bbc <del_weak_mods>:
    3bbc:	98 2f       	mov	r25, r24
    3bbe:	90 95       	com	r25
    3bc0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <weak_mods>
    3bc4:	89 23       	and	r24, r25
    3bc6:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <weak_mods>
    3bca:	08 95       	ret

00003bcc <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3bcc:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <weak_mods>
    3bd0:	08 95       	ret

00003bd2 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3bd2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3bd6:	08 95       	ret

00003bd8 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3bd8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <oneshot_mods>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3bdc:	08 95       	ret

00003bde <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3bde:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <keyboard_report>
    3be2:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <keyboard_report+0x1>
    3be6:	f9 01       	movw	r30, r18
    3be8:	31 96       	adiw	r30, 0x01	; 1
    3bea:	20 5e       	subi	r18, 0xE0	; 224
    3bec:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    3bee:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    3bf0:	91 91       	ld	r25, Z+
    3bf2:	91 11       	cpse	r25, r1
            cnt++;
    3bf4:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3bf6:	e2 17       	cp	r30, r18
    3bf8:	f3 07       	cpc	r31, r19
    3bfa:	d1 f7       	brne	.-12     	; 0x3bf0 <has_anykey+0x12>
    }
    return cnt;
}
    3bfc:	08 95       	ret

00003bfe <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    3bfe:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3c02:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c06:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <real_mods>
    3c0a:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3c0c:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3c10:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c14:	80 81       	ld	r24, Z
    3c16:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <weak_mods>
    3c1a:	89 2b       	or	r24, r25
    3c1c:	80 83       	st	Z, r24
    if (oneshot_mods) {
    3c1e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <oneshot_mods>
    3c22:	99 23       	and	r25, r25
    3c24:	61 f0       	breq	.+24     	; 0x3c3e <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    3c26:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    3c2a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c2e:	80 81       	ld	r24, Z
    3c30:	89 2b       	or	r24, r25
    3c32:	80 83       	st	Z, r24
        if (has_anykey()) {
    3c34:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <has_anykey>
    3c38:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    3c3a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    3c3e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <keyboard_report>
    3c42:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <keyboard_report+0x1>
    3c46:	0c 94 a6 10 	jmp	0x214c	; 0x214c <host_keyboard_send>

00003c4a <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3c4a:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    3c4e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
}
    3c52:	08 95       	ret

00003c54 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3c54:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	9c 01       	movw	r18, r24
    3c5a:	22 0f       	add	r18, r18
    3c5c:	33 1f       	adc	r19, r19
    3c5e:	22 0f       	add	r18, r18
    3c60:	33 1f       	adc	r19, r19
    3c62:	2c 7c       	andi	r18, 0xCC	; 204
    3c64:	95 95       	asr	r25
    3c66:	87 95       	ror	r24
    3c68:	95 95       	asr	r25
    3c6a:	87 95       	ror	r24
    3c6c:	83 73       	andi	r24, 0x33	; 51
    3c6e:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	c9 01       	movw	r24, r18
    3c74:	88 0f       	add	r24, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	8a 7a       	andi	r24, 0xAA	; 170
    3c7a:	35 95       	asr	r19
    3c7c:	27 95       	ror	r18
    3c7e:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3c80:	82 2b       	or	r24, r18
    3c82:	08 95       	ret

00003c84 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3c84:	cf 93       	push	r28
    3c86:	df 93       	push	r29
    3c88:	d9 2f       	mov	r29, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3c8a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <bitrev>
    3c8e:	c8 2f       	mov	r28, r24
    3c90:	8d 2f       	mov	r24, r29
    3c92:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <bitrev>
    return bits;
}
    3c96:	9c 2f       	mov	r25, r28
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	08 95       	ret

00003c9e <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3c9e:	08 95       	ret

00003ca0 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <hook_matrix_change+0x6>
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <hook_matrix_change+0x8>
    3ca8:	1f 92       	push	r1
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	df 91       	pop	r29
    3cba:	cf 91       	pop	r28
    3cbc:	08 95       	ret

00003cbe <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3cbe:	08 95       	ret

00003cc0 <hook_layer_change>:
    3cc0:	08 95       	ret

00003cc2 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3cc2:	0c 94 28 12 	jmp	0x2450	; 0x2450 <keyboard_set_leds>

00003cc6 <hook_bootmagic>:
    3cc6:	08 95       	ret

00003cc8 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3cc8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <USB_DeviceState>
    3ccc:	84 30       	cpi	r24, 0x04	; 4
    3cce:	21 f1       	breq	.+72     	; 0x3d18 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3cd0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3cd4:	88 e1       	ldi	r24, 0x18	; 24
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	20 e4       	ldi	r18, 0x40	; 64
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	a8 95       	wdr
    3ce0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3cea:	83 b7       	in	r24, 0x33	; 51
    3cec:	81 7f       	andi	r24, 0xF1	; 241
    3cee:	84 60       	ori	r24, 0x04	; 4
    3cf0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3cf2:	83 b7       	in	r24, 0x33	; 51
    3cf4:	81 60       	ori	r24, 0x01	; 1
    3cf6:	83 bf       	out	0x33, r24	; 51
    sei();
    3cf8:	78 94       	sei
    sleep_cpu();
    3cfa:	88 95       	sleep
    sleep_disable();
    3cfc:	83 b7       	in	r24, 0x33	; 51
    3cfe:	8e 7f       	andi	r24, 0xFE	; 254
    3d00:	83 bf       	out	0x33, r24	; 51
    3d02:	0f b6       	in	r0, 0x3f	; 63
    3d04:	f8 94       	cli
    3d06:	a8 95       	wdr
    3d08:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d0c:	88 61       	ori	r24, 0x18	; 24
    3d0e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d12:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d16:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3d18:	08 95       	ret

00003d1a <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3d1a:	cf 93       	push	r28
    matrix_power_up();
    3d1c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <matrix_power_up>
    matrix_scan();
    3d20:	0e 94 76 07 	call	0xeec	; 0xeec <matrix_scan>
    matrix_power_down();
    3d24:	0e 94 61 12 	call	0x24c2	; 0x24c2 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d28:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3d2a:	8c 2f       	mov	r24, r28
    3d2c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <matrix_get_row>
    3d30:	89 2b       	or	r24, r25
    3d32:	31 f4       	brne	.+12     	; 0x3d40 <suspend_wakeup_condition+0x26>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d34:	cf 5f       	subi	r28, 0xFF	; 255
    3d36:	c5 30       	cpi	r28, 0x05	; 5
    3d38:	c1 f7       	brne	.-16     	; 0x3d2a <suspend_wakeup_condition+0x10>
    }
    return false;
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
}
    3d3c:	cf 91       	pop	r28
    3d3e:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	fc cf       	rjmp	.-8      	; 0x3d3c <suspend_wakeup_condition+0x22>

00003d44 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3d44:	0e 94 2a 12 	call	0x2454	; 0x2454 <matrix_clear>
    clear_keyboard();
    3d48:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <clear_keyboard>

00003d4c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3d4c:	1f 92       	push	r1
    3d4e:	0f 92       	push	r0
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	0f 92       	push	r0
    3d54:	11 24       	eor	r1, r1
    3d56:	8f 93       	push	r24
    3d58:	9f 93       	push	r25
    3d5a:	af 93       	push	r26
    3d5c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3d5e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <wdt_timeout>
    3d62:	81 11       	cpse	r24, r1
    3d64:	13 c0       	rjmp	.+38     	; 0x3d8c <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3d66:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3d6a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3d6e:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3d72:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3d76:	41 96       	adiw	r24, 0x11	; 17
    3d78:	a1 1d       	adc	r26, r1
    3d7a:	b1 1d       	adc	r27, r1
    3d7c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer_count>
    3d80:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer_count+0x1>
    3d84:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer_count+0x2>
    3d88:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3d8c:	bf 91       	pop	r27
    3d8e:	af 91       	pop	r26
    3d90:	9f 91       	pop	r25
    3d92:	8f 91       	pop	r24
    3d94:	0f 90       	pop	r0
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	0f 90       	pop	r0
    3d9a:	1f 90       	pop	r1
    3d9c:	18 95       	reti

00003d9e <timer_init>:
    uint8_t sreg = SREG;
    cli();
    t = timer_count;
    SREG = sreg;

    return TIMER_DIFF_32(t, last);
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	84 bd       	out	0x24, r24	; 36
    3da2:	93 e0       	ldi	r25, 0x03	; 3
    3da4:	95 bd       	out	0x25, r25	; 37
    3da6:	9a ef       	ldi	r25, 0xFA	; 250
    3da8:	97 bd       	out	0x27, r25	; 39
    3daa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    3dae:	08 95       	ret

00003db0 <timer_read>:
    3db0:	2f b7       	in	r18, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3db8:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3dbc:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3dc0:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3dc4:	2f bf       	out	0x3f, r18	; 63
    3dc6:	08 95       	ret

00003dc8 <timer_read32>:
    3dc8:	2f b7       	in	r18, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <timer_count>
    3dd0:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <timer_count+0x1>
    3dd4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <timer_count+0x2>
    3dd8:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <timer_count+0x3>
    3ddc:	2f bf       	out	0x3f, r18	; 63
    3dde:	08 95       	ret

00003de0 <timer_elapsed>:
    3de0:	cf 92       	push	r12
    3de2:	df 92       	push	r13
    3de4:	ef 92       	push	r14
    3de6:	ff 92       	push	r15
    3de8:	0f 93       	push	r16
    3dea:	1f 93       	push	r17
    3dec:	2f b7       	in	r18, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <timer_count>
    3df4:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <timer_count+0x1>
    3df8:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <timer_count+0x2>
    3dfc:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <timer_count+0x3>
    3e00:	2f bf       	out	0x3f, r18	; 63
    3e02:	6a 01       	movw	r12, r20
    3e04:	7b 01       	movw	r14, r22
    3e06:	ee 24       	eor	r14, r14
    3e08:	ff 24       	eor	r15, r15
    3e0a:	8c 01       	movw	r16, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	c0 16       	cp	r12, r16
    3e12:	d1 06       	cpc	r13, r17
    3e14:	e2 06       	cpc	r14, r18
    3e16:	f3 06       	cpc	r15, r19
    3e18:	50 f0       	brcs	.+20     	; 0x3e2e <timer_elapsed+0x4e>
    3e1a:	48 1b       	sub	r20, r24
    3e1c:	59 0b       	sbc	r21, r25
    3e1e:	ca 01       	movw	r24, r20
    3e20:	1f 91       	pop	r17
    3e22:	0f 91       	pop	r16
    3e24:	ff 90       	pop	r15
    3e26:	ef 90       	pop	r14
    3e28:	df 90       	pop	r13
    3e2a:	cf 90       	pop	r12
    3e2c:	08 95       	ret
    3e2e:	41 50       	subi	r20, 0x01	; 1
    3e30:	51 09       	sbc	r21, r1
    3e32:	f3 cf       	rjmp	.-26     	; 0x3e1a <timer_elapsed+0x3a>

00003e34 <__vector_21>:
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3e34:	1f 92       	push	r1
    3e36:	0f 92       	push	r0
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	0f 92       	push	r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	8f 93       	push	r24
    3e40:	9f 93       	push	r25
    3e42:	af 93       	push	r26
    3e44:	bf 93       	push	r27
    timer_count++;
    3e46:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer_count>
    3e4a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <timer_count+0x1>
    3e4e:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <timer_count+0x2>
    3e52:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <timer_count+0x3>
    3e56:	01 96       	adiw	r24, 0x01	; 1
    3e58:	a1 1d       	adc	r26, r1
    3e5a:	b1 1d       	adc	r27, r1
    3e5c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <timer_count>
    3e60:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <timer_count+0x1>
    3e64:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <timer_count+0x2>
    3e68:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <timer_count+0x3>
}
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	0f 90       	pop	r0
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	0f 90       	pop	r0
    3e7a:	1f 90       	pop	r1
    3e7c:	18 95       	reti

00003e7e <bootloader_jump>:
    USB_Disable();
    3e7e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <USB_Disable>
    cli();
    3e82:	f8 94       	cli
    3e84:	2f ef       	ldi	r18, 0xFF	; 255
    3e86:	87 ea       	ldi	r24, 0xA7	; 167
    3e88:	91 e6       	ldi	r25, 0x61	; 97
    3e8a:	21 50       	subi	r18, 0x01	; 1
    3e8c:	80 40       	sbci	r24, 0x00	; 0
    3e8e:	90 40       	sbci	r25, 0x00	; 0
    3e90:	e1 f7       	brne	.-8      	; 0x3e8a <bootloader_jump+0xc>
    3e92:	00 c0       	rjmp	.+0      	; 0x3e94 <bootloader_jump+0x16>
    3e94:	00 00       	nop
    reset_key = BOOTLOADER_RESET_KEY;
    3e96:	87 e0       	ldi	r24, 0x07	; 7
    3e98:	90 eb       	ldi	r25, 0xB0	; 176
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__bss_end>
    3ea0:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__bss_end+0x1>
    3ea4:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <__bss_end+0x2>
    3ea8:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <__bss_end+0x3>
		__asm__ __volatile__ (
    3eac:	88 e1       	ldi	r24, 0x18	; 24
    3eae:	9c e0       	ldi	r25, 0x0C	; 12
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	a8 95       	wdr
    3eb6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3ec0:	ff cf       	rjmp	.-2      	; 0x3ec0 <bootloader_jump+0x42>

00003ec2 <keycode_to_action>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3ec2:	8d 3b       	cpi	r24, 0xBD	; 189
    3ec4:	60 f4       	brcc	.+24     	; 0x3ede <keycode_to_action+0x1c>
    3ec6:	88 3a       	cpi	r24, 0xA8	; 168
    3ec8:	80 f5       	brcc	.+96     	; 0x3f2a <keycode_to_action+0x68>
    3eca:	85 3a       	cpi	r24, 0xA5	; 165
    3ecc:	18 f5       	brcc	.+70     	; 0x3f14 <keycode_to_action+0x52>
    3ece:	84 30       	cpi	r24, 0x04	; 4
    3ed0:	f8 f4       	brcc	.+62     	; 0x3f10 <keycode_to_action+0x4e>
    3ed2:	81 30       	cpi	r24, 0x01	; 1
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <keycode_to_action+0x16>
    3ed6:	81 c0       	rjmp	.+258    	; 0x3fda <keycode_to_action+0x118>
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	80 e0       	ldi	r24, 0x00	; 0
    3edc:	08 95       	ret
    3ede:	88 3e       	cpi	r24, 0xE8	; 232
    3ee0:	90 f4       	brcc	.+36     	; 0x3f06 <keycode_to_action+0x44>
    3ee2:	80 3e       	cpi	r24, 0xE0	; 224
    3ee4:	a8 f4       	brcc	.+42     	; 0x3f10 <keycode_to_action+0x4e>
    3ee6:	8f 3b       	cpi	r24, 0xBF	; 191
    3ee8:	b9 f7       	brne	.-18     	; 0x3ed8 <keycode_to_action+0x16>
    3eea:	0e 94 34 17 	call	0x2e68	; 0x2e68 <clear_keyboard>
    3eee:	2f ef       	ldi	r18, 0xFF	; 255
    3ef0:	80 e7       	ldi	r24, 0x70	; 112
    3ef2:	92 e0       	ldi	r25, 0x02	; 2
    3ef4:	21 50       	subi	r18, 0x01	; 1
    3ef6:	80 40       	sbci	r24, 0x00	; 0
    3ef8:	90 40       	sbci	r25, 0x00	; 0
    3efa:	e1 f7       	brne	.-8      	; 0x3ef4 <keycode_to_action+0x32>
    3efc:	00 c0       	rjmp	.+0      	; 0x3efe <keycode_to_action+0x3c>
    3efe:	00 00       	nop
    3f00:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <bootloader_jump>
    3f04:	e9 cf       	rjmp	.-46     	; 0x3ed8 <keycode_to_action+0x16>
    3f06:	80 3f       	cpi	r24, 0xF0	; 240
    3f08:	38 f3       	brcs	.-50     	; 0x3ed8 <keycode_to_action+0x16>
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	90 65       	ori	r25, 0x50	; 80
    3f0e:	08 95       	ret
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	08 95       	ret
    3f14:	31 e8       	ldi	r19, 0x81	; 129
    3f16:	85 3a       	cpi	r24, 0xA5	; 165
    3f18:	21 f0       	breq	.+8      	; 0x3f22 <keycode_to_action+0x60>
    3f1a:	33 e8       	ldi	r19, 0x83	; 131
    3f1c:	86 3a       	cpi	r24, 0xA6	; 166
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <keycode_to_action+0x60>
    3f20:	32 e8       	ldi	r19, 0x82	; 130
    3f22:	20 e4       	ldi	r18, 0x40	; 64
    3f24:	83 2f       	mov	r24, r19
    3f26:	92 2f       	mov	r25, r18
    3f28:	08 95       	ret
    3f2a:	88 3a       	cpi	r24, 0xA8	; 168
    3f2c:	59 f1       	breq	.+86     	; 0x3f84 <keycode_to_action+0xc2>
    3f2e:	89 3a       	cpi	r24, 0xA9	; 169
    3f30:	61 f1       	breq	.+88     	; 0x3f8a <keycode_to_action+0xc8>
    3f32:	8a 3a       	cpi	r24, 0xAA	; 170
    3f34:	61 f1       	breq	.+88     	; 0x3f8e <keycode_to_action+0xcc>
    3f36:	8b 3a       	cpi	r24, 0xAB	; 171
    3f38:	61 f1       	breq	.+88     	; 0x3f92 <keycode_to_action+0xd0>
    3f3a:	8c 3a       	cpi	r24, 0xAC	; 172
    3f3c:	61 f1       	breq	.+88     	; 0x3f96 <keycode_to_action+0xd4>
    3f3e:	8d 3a       	cpi	r24, 0xAD	; 173
    3f40:	61 f1       	breq	.+88     	; 0x3f9a <keycode_to_action+0xd8>
    3f42:	8e 3a       	cpi	r24, 0xAE	; 174
    3f44:	61 f1       	breq	.+88     	; 0x3f9e <keycode_to_action+0xdc>
    3f46:	8f 3a       	cpi	r24, 0xAF	; 175
    3f48:	61 f1       	breq	.+88     	; 0x3fa2 <keycode_to_action+0xe0>
    3f4a:	81 3b       	cpi	r24, 0xB1	; 177
    3f4c:	61 f1       	breq	.+88     	; 0x3fa6 <keycode_to_action+0xe4>
    3f4e:	80 3b       	cpi	r24, 0xB0	; 176
    3f50:	61 f1       	breq	.+88     	; 0x3faa <keycode_to_action+0xe8>
    3f52:	82 3b       	cpi	r24, 0xB2	; 178
    3f54:	61 f1       	breq	.+88     	; 0x3fae <keycode_to_action+0xec>
    3f56:	83 3b       	cpi	r24, 0xB3	; 179
    3f58:	69 f1       	breq	.+90     	; 0x3fb4 <keycode_to_action+0xf2>
    3f5a:	84 3b       	cpi	r24, 0xB4	; 180
    3f5c:	69 f1       	breq	.+90     	; 0x3fb8 <keycode_to_action+0xf6>
    3f5e:	85 3b       	cpi	r24, 0xB5	; 181
    3f60:	69 f1       	breq	.+90     	; 0x3fbc <keycode_to_action+0xfa>
    3f62:	86 3b       	cpi	r24, 0xB6	; 182
    3f64:	69 f1       	breq	.+90     	; 0x3fc0 <keycode_to_action+0xfe>
    3f66:	87 3b       	cpi	r24, 0xB7	; 183
    3f68:	71 f1       	breq	.+92     	; 0x3fc6 <keycode_to_action+0x104>
    3f6a:	88 3b       	cpi	r24, 0xB8	; 184
    3f6c:	71 f1       	breq	.+92     	; 0x3fca <keycode_to_action+0x108>
    3f6e:	89 3b       	cpi	r24, 0xB9	; 185
    3f70:	71 f1       	breq	.+92     	; 0x3fce <keycode_to_action+0x10c>
    3f72:	8a 3b       	cpi	r24, 0xBA	; 186
    3f74:	71 f1       	breq	.+92     	; 0x3fd2 <keycode_to_action+0x110>
    3f76:	8b 3b       	cpi	r24, 0xBB	; 187
    3f78:	71 f1       	breq	.+92     	; 0x3fd6 <keycode_to_action+0x114>
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	8c 3b       	cpi	r24, 0xBC	; 188
    3f7e:	19 f4       	brne	.+6      	; 0x3f86 <keycode_to_action+0xc4>
    3f80:	3a e2       	ldi	r19, 0x2A	; 42
    3f82:	1f c0       	rjmp	.+62     	; 0x3fc2 <keycode_to_action+0x100>
    3f84:	32 ee       	ldi	r19, 0xE2	; 226
    3f86:	24 e4       	ldi	r18, 0x44	; 68
    3f88:	cd cf       	rjmp	.-102    	; 0x3f24 <keycode_to_action+0x62>
    3f8a:	39 ee       	ldi	r19, 0xE9	; 233
    3f8c:	fc cf       	rjmp	.-8      	; 0x3f86 <keycode_to_action+0xc4>
    3f8e:	3a ee       	ldi	r19, 0xEA	; 234
    3f90:	fa cf       	rjmp	.-12     	; 0x3f86 <keycode_to_action+0xc4>
    3f92:	35 eb       	ldi	r19, 0xB5	; 181
    3f94:	f8 cf       	rjmp	.-16     	; 0x3f86 <keycode_to_action+0xc4>
    3f96:	36 eb       	ldi	r19, 0xB6	; 182
    3f98:	f6 cf       	rjmp	.-20     	; 0x3f86 <keycode_to_action+0xc4>
    3f9a:	33 eb       	ldi	r19, 0xB3	; 179
    3f9c:	f4 cf       	rjmp	.-24     	; 0x3f86 <keycode_to_action+0xc4>
    3f9e:	34 eb       	ldi	r19, 0xB4	; 180
    3fa0:	f2 cf       	rjmp	.-28     	; 0x3f86 <keycode_to_action+0xc4>
    3fa2:	37 eb       	ldi	r19, 0xB7	; 183
    3fa4:	f0 cf       	rjmp	.-32     	; 0x3f86 <keycode_to_action+0xc4>
    3fa6:	3c ec       	ldi	r19, 0xCC	; 204
    3fa8:	ee cf       	rjmp	.-36     	; 0x3f86 <keycode_to_action+0xc4>
    3faa:	3d ec       	ldi	r19, 0xCD	; 205
    3fac:	ec cf       	rjmp	.-40     	; 0x3f86 <keycode_to_action+0xc4>
    3fae:	33 e8       	ldi	r19, 0x83	; 131
    3fb0:	25 e4       	ldi	r18, 0x45	; 69
    3fb2:	b8 cf       	rjmp	.-144    	; 0x3f24 <keycode_to_action+0x62>
    3fb4:	3a e8       	ldi	r19, 0x8A	; 138
    3fb6:	fc cf       	rjmp	.-8      	; 0x3fb0 <keycode_to_action+0xee>
    3fb8:	32 e9       	ldi	r19, 0x92	; 146
    3fba:	fa cf       	rjmp	.-12     	; 0x3fb0 <keycode_to_action+0xee>
    3fbc:	34 e9       	ldi	r19, 0x94	; 148
    3fbe:	f8 cf       	rjmp	.-16     	; 0x3fb0 <keycode_to_action+0xee>
    3fc0:	31 e2       	ldi	r19, 0x21	; 33
    3fc2:	26 e4       	ldi	r18, 0x46	; 70
    3fc4:	af cf       	rjmp	.-162    	; 0x3f24 <keycode_to_action+0x62>
    3fc6:	33 e2       	ldi	r19, 0x23	; 35
    3fc8:	fc cf       	rjmp	.-8      	; 0x3fc2 <keycode_to_action+0x100>
    3fca:	34 e2       	ldi	r19, 0x24	; 36
    3fcc:	fa cf       	rjmp	.-12     	; 0x3fc2 <keycode_to_action+0x100>
    3fce:	35 e2       	ldi	r19, 0x25	; 37
    3fd0:	f8 cf       	rjmp	.-16     	; 0x3fc2 <keycode_to_action+0x100>
    3fd2:	36 e2       	ldi	r19, 0x26	; 38
    3fd4:	f6 cf       	rjmp	.-20     	; 0x3fc2 <keycode_to_action+0x100>
    3fd6:	37 e2       	ldi	r19, 0x27	; 39
    3fd8:	f4 cf       	rjmp	.-24     	; 0x3fc2 <keycode_to_action+0x100>
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	08 95       	ret

00003fe0 <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    3fe0:	08 95       	ret

00003fe2 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3fe2:	e6 2f       	mov	r30, r22
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	9f e0       	ldi	r25, 0x0F	; 15
    3fe8:	79 9f       	mul	r23, r25
    3fea:	e0 0d       	add	r30, r0
    3fec:	f1 1d       	adc	r31, r1
    3fee:	11 24       	eor	r1, r1
    3ff0:	9b e4       	ldi	r25, 0x4B	; 75
    3ff2:	89 9f       	mul	r24, r25
    3ff4:	e0 0d       	add	r30, r0
    3ff6:	f1 1d       	adc	r31, r1
    3ff8:	11 24       	eor	r1, r1
    3ffa:	eb 5d       	subi	r30, 0xDB	; 219
    3ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffe:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    4000:	08 95       	ret

00004002 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    4002:	28 2f       	mov	r18, r24
    4004:	20 5c       	subi	r18, 0xC0	; 192
    4006:	33 0b       	sbc	r19, r19
    4008:	f9 01       	movw	r30, r18
    400a:	ee 0f       	add	r30, r30
    400c:	ff 1f       	adc	r31, r31
    400e:	eb 5f       	subi	r30, 0xFB	; 251
    4010:	fe 4f       	sbci	r31, 0xFE	; 254
    4012:	85 91       	lpm	r24, Z+
    4014:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    4016:	08 95       	ret

00004018 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    4018:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <keymap_key_to_keycode>
    switch (keycode) {
    401c:	80 3e       	cpi	r24, 0xE0	; 224
    401e:	d0 f4       	brcc	.+52     	; 0x4054 <action_for_key+0x3c>
    4020:	80 3c       	cpi	r24, 0xC0	; 192
    4022:	88 f5       	brcc	.+98     	; 0x4086 <action_for_key+0x6e>
    4024:	81 33       	cpi	r24, 0x31	; 49
    4026:	09 f4       	brne	.+2      	; 0x402a <action_for_key+0x12>
    4028:	52 c0       	rjmp	.+164    	; 0x40ce <action_for_key+0xb6>
    402a:	40 f4       	brcc	.+16     	; 0x403c <action_for_key+0x24>
    402c:	89 32       	cpi	r24, 0x29	; 41
    402e:	09 f4       	brne	.+2      	; 0x4032 <action_for_key+0x1a>
    4030:	48 c0       	rjmp	.+144    	; 0x40c2 <action_for_key+0xaa>
    4032:	8a 32       	cpi	r24, 0x2A	; 42
    4034:	09 f4       	brne	.+2      	; 0x4038 <action_for_key+0x20>
    4036:	51 c0       	rjmp	.+162    	; 0x40da <action_for_key+0xc2>
            return keycode_to_action(keycode);
    4038:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <keycode_to_action>
    switch (keycode) {
    403c:	89 33       	cpi	r24, 0x39	; 57
    403e:	29 f1       	breq	.+74     	; 0x408a <action_for_key+0x72>
    4040:	82 38       	cpi	r24, 0x82	; 130
    4042:	19 f1       	breq	.+70     	; 0x408a <action_for_key+0x72>
    4044:	85 33       	cpi	r24, 0x35	; 53
    4046:	c1 f7       	brne	.-16     	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    4048:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    404c:	85 ff       	sbrs	r24, 5
    404e:	3d c0       	rjmp	.+122    	; 0x40ca <action_for_key+0xb2>
                return keycode_to_action(KC_ESC);
    4050:	89 e2       	ldi	r24, 0x29	; 41
    4052:	f2 cf       	rjmp	.-28     	; 0x4038 <action_for_key+0x20>
    switch (keycode) {
    4054:	83 3e       	cpi	r24, 0xE3	; 227
    4056:	39 f1       	breq	.+78     	; 0x40a6 <action_for_key+0x8e>
    4058:	60 f4       	brcc	.+24     	; 0x4072 <action_for_key+0x5a>
    405a:	80 3e       	cpi	r24, 0xE0	; 224
    405c:	e1 f0       	breq	.+56     	; 0x4096 <action_for_key+0x7e>
    405e:	82 3e       	cpi	r24, 0xE2	; 226
    4060:	59 f7       	brne	.-42     	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    4062:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    4066:	82 ff       	sbrs	r24, 2
    4068:	22 c0       	rjmp	.+68     	; 0x40ae <action_for_key+0x96>
                if (keymap_config.no_gui) {
    406a:	84 ff       	sbrs	r24, 4
    406c:	1a c0       	rjmp	.+52     	; 0x40a2 <action_for_key+0x8a>
                    return keycode_to_action(KC_NO);
    406e:	80 e0       	ldi	r24, 0x00	; 0
    4070:	e3 cf       	rjmp	.-58     	; 0x4038 <action_for_key+0x20>
    switch (keycode) {
    4072:	86 3e       	cpi	r24, 0xE6	; 230
    4074:	f1 f0       	breq	.+60     	; 0x40b2 <action_for_key+0x9a>
    4076:	87 3e       	cpi	r24, 0xE7	; 231
    4078:	f9 f6       	brne	.-66     	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    407a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    407e:	83 ff       	sbrs	r24, 3
    4080:	1c c0       	rjmp	.+56     	; 0x40ba <action_for_key+0xa2>
            return keycode_to_action(KC_RALT);
    4082:	86 ee       	ldi	r24, 0xE6	; 230
    4084:	d9 cf       	rjmp	.-78     	; 0x4038 <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    4086:	0c 94 01 20 	jmp	0x4002	; 0x4002 <keymap_fn_to_action>
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    408a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    408e:	93 70       	andi	r25, 0x03	; 3
    4090:	99 f2       	breq	.-90     	; 0x4038 <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    4092:	80 ee       	ldi	r24, 0xE0	; 224
    4094:	d1 cf       	rjmp	.-94     	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    4096:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    409a:	80 ff       	sbrs	r24, 0
    409c:	fa cf       	rjmp	.-12     	; 0x4092 <action_for_key+0x7a>
                return keycode_to_action(KC_CAPSLOCK);
    409e:	89 e3       	ldi	r24, 0x39	; 57
    40a0:	cb cf       	rjmp	.-106    	; 0x4038 <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    40a2:	83 ee       	ldi	r24, 0xE3	; 227
    40a4:	c9 cf       	rjmp	.-110    	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    40a6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    40aa:	82 ff       	sbrs	r24, 2
    40ac:	de cf       	rjmp	.-68     	; 0x406a <action_for_key+0x52>
            return keycode_to_action(KC_LALT);
    40ae:	82 ee       	ldi	r24, 0xE2	; 226
    40b0:	c3 cf       	rjmp	.-122    	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    40b2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    40b6:	83 ff       	sbrs	r24, 3
    40b8:	e4 cf       	rjmp	.-56     	; 0x4082 <action_for_key+0x6a>
            if (keymap_config.no_gui) {
    40ba:	84 fd       	sbrc	r24, 4
    40bc:	d8 cf       	rjmp	.-80     	; 0x406e <action_for_key+0x56>
                return keycode_to_action(KC_RGUI);
    40be:	87 ee       	ldi	r24, 0xE7	; 231
    40c0:	bb cf       	rjmp	.-138    	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    40c2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    40c6:	85 ff       	sbrs	r24, 5
    40c8:	c3 cf       	rjmp	.-122    	; 0x4050 <action_for_key+0x38>
            return keycode_to_action(KC_GRAVE);
    40ca:	85 e3       	ldi	r24, 0x35	; 53
    40cc:	b5 cf       	rjmp	.-150    	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    40ce:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    40d2:	86 ff       	sbrs	r24, 6
    40d4:	06 c0       	rjmp	.+12     	; 0x40e2 <action_for_key+0xca>
                return keycode_to_action(KC_BSPACE);
    40d6:	8a e2       	ldi	r24, 0x2A	; 42
    40d8:	af cf       	rjmp	.-162    	; 0x4038 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    40da:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    40de:	86 ff       	sbrs	r24, 6
    40e0:	fa cf       	rjmp	.-12     	; 0x40d6 <action_for_key+0xbe>
            return keycode_to_action(KC_BSLASH);
    40e2:	81 e3       	ldi	r24, 0x31	; 49
    40e4:	a9 cf       	rjmp	.-174    	; 0x4038 <action_for_key+0x20>

000040e6 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    40e6:	af 92       	push	r10
    40e8:	bf 92       	push	r11
    40ea:	cf 92       	push	r12
    40ec:	df 92       	push	r13
    40ee:	ef 92       	push	r14
    40f0:	ff 92       	push	r15
    40f2:	0f 93       	push	r16
    40f4:	1f 93       	push	r17
    40f6:	cf 93       	push	r28
    40f8:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    40fa:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    40fc:	cc 24       	eor	r12, r12
    40fe:	c3 94       	inc	r12
    4100:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    4102:	8c 2f       	mov	r24, r28
    4104:	0e 94 d5 08 	call	0x11aa	; 0x11aa <matrix_get_row>
    4108:	5c 01       	movw	r10, r24
    410a:	10 e0       	ldi	r17, 0x00	; 0
    410c:	00 e0       	ldi	r16, 0x00	; 0
            if (matrix_row & ((matrix_row_t)1<<c)) {
    410e:	c6 01       	movw	r24, r12
    4110:	00 2e       	mov	r0, r16
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <scan_key+0x32>
    4114:	88 0f       	add	r24, r24
    4116:	99 1f       	adc	r25, r25
    4118:	0a 94       	dec	r0
    411a:	e2 f7       	brpl	.-8      	; 0x4114 <scan_key+0x2e>
    411c:	8a 21       	and	r24, r10
    411e:	9b 21       	and	r25, r11
    4120:	89 2b       	or	r24, r25
    4122:	e9 f0       	breq	.+58     	; 0x415e <scan_key+0x78>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    4124:	60 2f       	mov	r22, r16
    4126:	7c 2f       	mov	r23, r28
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	0e 94 0c 20 	call	0x4018	; 0x4018 <action_for_key>
                if (action.code == code ||
    412e:	8e 15       	cp	r24, r14
    4130:	9f 05       	cpc	r25, r15
    4132:	51 f0       	breq	.+20     	; 0x4148 <scan_key+0x62>
    4134:	29 2f       	mov	r18, r25
    4136:	20 7e       	andi	r18, 0xE0	; 224
    4138:	39 2f       	mov	r19, r25
    413a:	30 7c       	andi	r19, 0xC0	; 192
    413c:	11 f0       	breq	.+4      	; 0x4142 <scan_key+0x5c>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    413e:	20 3a       	cpi	r18, 0xA0	; 160
    4140:	71 f4       	brne	.+28     	; 0x415e <scan_key+0x78>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    4142:	8e 15       	cp	r24, r14
    4144:	1f 04       	cpc	r1, r15
    4146:	59 f4       	brne	.+22     	; 0x415e <scan_key+0x78>
                     action.key.code == code)) {
                    return true;
    4148:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	ff 90       	pop	r15
    4152:	ef 90       	pop	r14
    4154:	df 90       	pop	r13
    4156:	cf 90       	pop	r12
    4158:	bf 90       	pop	r11
    415a:	af 90       	pop	r10
    415c:	08 95       	ret
    415e:	0f 5f       	subi	r16, 0xFF	; 255
    4160:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4162:	0f 30       	cpi	r16, 0x0F	; 15
    4164:	11 05       	cpc	r17, r1
    4166:	99 f6       	brne	.-90     	; 0x410e <scan_key+0x28>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4168:	cf 5f       	subi	r28, 0xFF	; 255
    416a:	c5 30       	cpi	r28, 0x05	; 5
    416c:	51 f6       	brne	.-108    	; 0x4102 <scan_key+0x1c>
    return false;
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	ec cf       	rjmp	.-40     	; 0x414a <scan_key+0x64>

00004172 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    4178:	8c e2       	ldi	r24, 0x2C	; 44
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <scan_key>
    4180:	88 23       	and	r24, r24
    4182:	29 f0       	breq	.+10     	; 0x418e <bootmagic_scan_key+0x1c>

    return scan_key(code);
    4184:	ce 01       	movw	r24, r28
}
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    return scan_key(code);
    418a:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <scan_key>
}
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	08 95       	ret

00004196 <bootmagic>:
{
    4196:	cf 93       	push	r28
    if (!eeconfig_is_enabled()) {
    4198:	0e 94 14 22 	call	0x4428	; 0x4428 <eeconfig_is_enabled>
    419c:	81 11       	cpse	r24, r1
    419e:	02 c0       	rjmp	.+4      	; 0x41a4 <bootmagic+0xe>
        eeconfig_init();
    41a0:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <eeconfig_init>
    print("bootmagic scan: ... ");
    41a4:	8e ec       	ldi	r24, 0xCE	; 206
    41a6:	94 e0       	ldi	r25, 0x04	; 4
    41a8:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    41ac:	c5 e6       	ldi	r28, 0x65	; 101
    41ae:	c1 50       	subi	r28, 0x01	; 1
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <bootmagic+0x1e>
    41b2:	f0 c0       	rjmp	.+480    	; 0x4394 <bootmagic+0x1fe>
    print("done.\n");
    41b4:	87 ec       	ldi	r24, 0xC7	; 199
    41b6:	94 e0       	ldi	r25, 0x04	; 4
    41b8:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    41bc:	89 e2       	ldi	r24, 0x29	; 41
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    41c4:	81 11       	cpse	r24, r1
    41c6:	14 c1       	rjmp	.+552    	; 0x43f0 <bootmagic+0x25a>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    41c8:	8a e2       	ldi	r24, 0x2A	; 42
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    41d0:	81 11       	cpse	r24, r1
        eeconfig_init();
    41d2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    41d6:	85 e0       	ldi	r24, 0x05	; 5
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    41de:	81 11       	cpse	r24, r1
        bootloader_jump();
    41e0:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <bootloader_jump>
    hook_bootmagic();
    41e4:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    41e8:	0e 94 1f 22 	call	0x443e	; 0x443e <eeconfig_read_debug>
    41ec:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    41f0:	87 e0       	ldi	r24, 0x07	; 7
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    41f8:	88 23       	and	r24, r24
    41fa:	79 f0       	breq	.+30     	; 0x421a <bootmagic+0x84>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    41fc:	8b e1       	ldi	r24, 0x1B	; 27
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4204:	88 23       	and	r24, r24
    4206:	09 f4       	brne	.+2      	; 0x420a <bootmagic+0x74>
    4208:	ce c0       	rjmp	.+412    	; 0x43a6 <bootmagic+0x210>
            debug_config.matrix = !debug_config.matrix;
    420a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    420e:	89 2f       	mov	r24, r25
    4210:	8d 7f       	andi	r24, 0xFD	; 253
    4212:	91 ff       	sbrs	r25, 1
    4214:	82 60       	ori	r24, 0x02	; 2
            debug_config.enable = !debug_config.enable;
    4216:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    eeconfig_write_debug(debug_config.raw);
    421a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    421e:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    4222:	0e 94 31 22 	call	0x4462	; 0x4462 <eeconfig_read_keymap>
    4226:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    422a:	80 ee       	ldi	r24, 0xE0	; 224
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4232:	88 23       	and	r24, r24
    4234:	41 f0       	breq	.+16     	; 0x4246 <bootmagic+0xb0>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4236:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    423a:	89 2f       	mov	r24, r25
    423c:	8e 7f       	andi	r24, 0xFE	; 254
    423e:	90 ff       	sbrs	r25, 0
    4240:	81 60       	ori	r24, 0x01	; 1
    4242:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4246:	89 e3       	ldi	r24, 0x39	; 57
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    424e:	88 23       	and	r24, r24
    4250:	41 f0       	breq	.+16     	; 0x4262 <bootmagic+0xcc>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4252:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    4256:	89 2f       	mov	r24, r25
    4258:	8d 7f       	andi	r24, 0xFD	; 253
    425a:	91 ff       	sbrs	r25, 1
    425c:	82 60       	ori	r24, 0x02	; 2
    425e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4262:	82 ee       	ldi	r24, 0xE2	; 226
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    426a:	88 23       	and	r24, r24
    426c:	41 f0       	breq	.+16     	; 0x427e <bootmagic+0xe8>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    426e:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    4272:	89 2f       	mov	r24, r25
    4274:	8b 7f       	andi	r24, 0xFB	; 251
    4276:	92 ff       	sbrs	r25, 2
    4278:	84 60       	ori	r24, 0x04	; 4
    427a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    427e:	86 ee       	ldi	r24, 0xE6	; 230
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4286:	88 23       	and	r24, r24
    4288:	41 f0       	breq	.+16     	; 0x429a <bootmagic+0x104>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    428a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    428e:	89 2f       	mov	r24, r25
    4290:	87 7f       	andi	r24, 0xF7	; 247
    4292:	93 ff       	sbrs	r25, 3
    4294:	88 60       	ori	r24, 0x08	; 8
    4296:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    429a:	83 ee       	ldi	r24, 0xE3	; 227
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    42a2:	88 23       	and	r24, r24
    42a4:	41 f0       	breq	.+16     	; 0x42b6 <bootmagic+0x120>
        keymap_config.no_gui = !keymap_config.no_gui;
    42a6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    42aa:	89 2f       	mov	r24, r25
    42ac:	8f 7e       	andi	r24, 0xEF	; 239
    42ae:	94 ff       	sbrs	r25, 4
    42b0:	80 61       	ori	r24, 0x10	; 16
    42b2:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    42b6:	85 e3       	ldi	r24, 0x35	; 53
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    42be:	88 23       	and	r24, r24
    42c0:	41 f0       	breq	.+16     	; 0x42d2 <bootmagic+0x13c>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    42c2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    42c6:	89 2f       	mov	r24, r25
    42c8:	8f 7d       	andi	r24, 0xDF	; 223
    42ca:	95 ff       	sbrs	r25, 5
    42cc:	80 62       	ori	r24, 0x20	; 32
    42ce:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    42d2:	81 e3       	ldi	r24, 0x31	; 49
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    42da:	88 23       	and	r24, r24
    42dc:	41 f0       	breq	.+16     	; 0x42ee <bootmagic+0x158>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    42de:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    42e2:	89 2f       	mov	r24, r25
    42e4:	8f 7b       	andi	r24, 0xBF	; 191
    42e6:	96 ff       	sbrs	r25, 6
    42e8:	80 64       	ori	r24, 0x40	; 64
    42ea:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    42ee:	81 e1       	ldi	r24, 0x11	; 17
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    42f6:	88 23       	and	r24, r24
    42f8:	41 f0       	breq	.+16     	; 0x430a <bootmagic+0x174>
        keymap_config.nkro = !keymap_config.nkro;
    42fa:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <keymap_config>
    42fe:	89 2f       	mov	r24, r25
    4300:	97 fb       	bst	r25, 7
    4302:	87 f9       	bld	r24, 7
    4304:	80 58       	subi	r24, 0x80	; 128
    4306:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    430a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    430e:	0e 94 35 22 	call	0x446a	; 0x446a <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
    4312:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <keymap_config>
    4316:	87 fb       	bst	r24, 7
    4318:	88 27       	eor	r24, r24
    431a:	80 f9       	bld	r24, 0
    431c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <keyboard_nkro>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4320:	87 e2       	ldi	r24, 0x27	; 39
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4328:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    432a:	8e e1       	ldi	r24, 0x1E	; 30
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4332:	81 11       	cpse	r24, r1
    4334:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4336:	8f e1       	ldi	r24, 0x1F	; 31
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    433e:	81 11       	cpse	r24, r1
    4340:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4342:	80 e2       	ldi	r24, 0x20	; 32
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    434a:	81 11       	cpse	r24, r1
    434c:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    434e:	81 e2       	ldi	r24, 0x21	; 33
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4356:	81 11       	cpse	r24, r1
    4358:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    435a:	82 e2       	ldi	r24, 0x22	; 34
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    4362:	81 11       	cpse	r24, r1
    4364:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4366:	83 e2       	ldi	r24, 0x23	; 35
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    436e:	81 11       	cpse	r24, r1
    4370:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4372:	84 e2       	ldi	r24, 0x24	; 36
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    437a:	88 23       	and	r24, r24
    437c:	99 f1       	breq	.+102    	; 0x43e4 <bootmagic+0x24e>
    437e:	c0 68       	ori	r28, 0x80	; 128
        eeconfig_write_default_layer(default_layer);
    4380:	8c 2f       	mov	r24, r28
    4382:	0e 94 2c 22 	call	0x4458	; 0x4458 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4386:	6c 2f       	mov	r22, r28
        default_layer_set((uint32_t)default_layer);
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	80 e0       	ldi	r24, 0x00	; 0
}
    438e:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    4390:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    4394:	0e 94 76 07 	call	0xeec	; 0xeec <matrix_scan>
    4398:	8f e3       	ldi	r24, 0x3F	; 63
    439a:	9c e9       	ldi	r25, 0x9C	; 156
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <bootmagic+0x206>
    43a0:	00 c0       	rjmp	.+0      	; 0x43a2 <bootmagic+0x20c>
    43a2:	00 00       	nop
    43a4:	04 cf       	rjmp	.-504    	; 0x41ae <bootmagic+0x18>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    43a6:	8e e0       	ldi	r24, 0x0E	; 14
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    43ae:	88 23       	and	r24, r24
    43b0:	39 f0       	breq	.+14     	; 0x43c0 <bootmagic+0x22a>
            debug_config.keyboard = !debug_config.keyboard;
    43b2:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    43b6:	89 2f       	mov	r24, r25
    43b8:	8b 7f       	andi	r24, 0xFB	; 251
    43ba:	92 ff       	sbrs	r25, 2
    43bc:	84 60       	ori	r24, 0x04	; 4
    43be:	2b cf       	rjmp	.-426    	; 0x4216 <bootmagic+0x80>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    43c0:	80 e1       	ldi	r24, 0x10	; 16
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 b9 20 	call	0x4172	; 0x4172 <bootmagic_scan_key>
    43c8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    43cc:	88 23       	and	r24, r24
    43ce:	29 f0       	breq	.+10     	; 0x43da <bootmagic+0x244>
            debug_config.mouse = !debug_config.mouse;
    43d0:	89 2f       	mov	r24, r25
    43d2:	87 7f       	andi	r24, 0xF7	; 247
    43d4:	93 ff       	sbrs	r25, 3
    43d6:	88 60       	ori	r24, 0x08	; 8
    43d8:	1e cf       	rjmp	.-452    	; 0x4216 <bootmagic+0x80>
            debug_config.enable = !debug_config.enable;
    43da:	89 2f       	mov	r24, r25
    43dc:	8e 7f       	andi	r24, 0xFE	; 254
    43de:	90 ff       	sbrs	r25, 0
    43e0:	81 60       	ori	r24, 0x01	; 1
    43e2:	19 cf       	rjmp	.-462    	; 0x4216 <bootmagic+0x80>
    if (default_layer) {
    43e4:	c1 11       	cpse	r28, r1
    43e6:	cc cf       	rjmp	.-104    	; 0x4380 <bootmagic+0x1ea>
        default_layer = eeconfig_read_default_layer();
    43e8:	0e 94 28 22 	call	0x4450	; 0x4450 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    43ec:	68 2f       	mov	r22, r24
    43ee:	cc cf       	rjmp	.-104    	; 0x4388 <bootmagic+0x1f2>
}
    43f0:	cf 91       	pop	r28
    43f2:	08 95       	ret

000043f4 <eeconfig_init>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    43f4:	6d ee       	ldi	r22, 0xED	; 237
    43f6:	7e ef       	ldi	r23, 0xFE	; 254
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	0e 94 67 2b 	call	0x56ce	; 0x56ce <eeprom_write_word>
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <eeprom_write_byte>
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <eeprom_write_byte>
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	84 e0       	ldi	r24, 0x04	; 4
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <eeprom_write_byte>
    441e:	60 e0       	ldi	r22, 0x00	; 0
    4420:	85 e0       	ldi	r24, 0x05	; 5
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <eeprom_write_byte>

00004428 <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <eeprom_read_word>
    4430:	21 e0       	ldi	r18, 0x01	; 1
    4432:	8d 3e       	cpi	r24, 0xED	; 237
    4434:	9e 4f       	sbci	r25, 0xFE	; 254
    4436:	09 f0       	breq	.+2      	; 0x443a <eeconfig_is_enabled+0x12>
    4438:	20 e0       	ldi	r18, 0x00	; 0
}
    443a:	82 2f       	mov	r24, r18
    443c:	08 95       	ret

0000443e <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <eeprom_read_byte>

00004446 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4446:	68 2f       	mov	r22, r24
    4448:	82 e0       	ldi	r24, 0x02	; 2
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <eeprom_write_byte>

00004450 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <eeprom_read_byte>

00004458 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4458:	68 2f       	mov	r22, r24
    445a:	83 e0       	ldi	r24, 0x03	; 3
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <eeprom_write_byte>

00004462 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <eeprom_read_byte>

0000446a <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    446a:	68 2f       	mov	r22, r24
    446c:	84 e0       	ldi	r24, 0x04	; 4
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <eeprom_write_byte>

00004474 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4474:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4478:	80 ff       	sbrs	r24, 0
    447a:	12 c0       	rjmp	.+36     	; 0x44a0 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    447c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    4480:	85 e0       	ldi	r24, 0x05	; 5
    4482:	68 9f       	mul	r22, r24
    4484:	b0 01       	movw	r22, r0
    4486:	11 24       	eor	r1, r1
    4488:	75 95       	asr	r23
    448a:	67 95       	ror	r22
    448c:	75 95       	asr	r23
    448e:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4490:	60 38       	cpi	r22, 0x80	; 128
    4492:	71 05       	cpc	r23, r1
    4494:	a8 f5       	brcc	.+106    	; 0x4500 <move_unit+0x8c>
    4496:	61 15       	cp	r22, r1
    4498:	71 05       	cpc	r23, r1
    449a:	a1 f1       	breq	.+104    	; 0x4504 <move_unit+0x90>
    449c:	86 2f       	mov	r24, r22
    449e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    44a0:	81 ff       	sbrs	r24, 1
    44a2:	09 c0       	rjmp	.+18     	; 0x44b6 <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    44a4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    44a8:	85 e0       	ldi	r24, 0x05	; 5
    44aa:	68 9f       	mul	r22, r24
    44ac:	b0 01       	movw	r22, r0
    44ae:	11 24       	eor	r1, r1
    44b0:	75 95       	asr	r23
    44b2:	67 95       	ror	r22
    44b4:	ed cf       	rjmp	.-38     	; 0x4490 <move_unit+0x1c>
    } else if (mousekey_accel & (1<<2)) {
    44b6:	82 ff       	sbrs	r24, 2
    44b8:	07 c0       	rjmp	.+14     	; 0x44c8 <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    44ba:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    44be:	85 e0       	ldi	r24, 0x05	; 5
    44c0:	68 9f       	mul	r22, r24
    44c2:	b0 01       	movw	r22, r0
    44c4:	11 24       	eor	r1, r1
    44c6:	e4 cf       	rjmp	.-56     	; 0x4490 <move_unit+0x1c>
    } else if (mousekey_repeat == 0) {
    44c8:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <mousekey_repeat>
    44cc:	22 23       	and	r18, r18
    44ce:	a9 f0       	breq	.+42     	; 0x44fa <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    44d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <mk_time_to_max>
    44d4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <mk_max_speed>
    44d8:	85 e0       	ldi	r24, 0x05	; 5
    44da:	68 9f       	mul	r22, r24
    44dc:	b0 01       	movw	r22, r0
    44de:	11 24       	eor	r1, r1
    44e0:	29 17       	cp	r18, r25
    44e2:	b0 f6       	brcc	.-84     	; 0x4490 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    44e4:	26 9f       	mul	r18, r22
    44e6:	a0 01       	movw	r20, r0
    44e8:	27 9f       	mul	r18, r23
    44ea:	50 0d       	add	r21, r0
    44ec:	11 24       	eor	r1, r1
    44ee:	69 2f       	mov	r22, r25
    44f0:	70 e0       	ldi	r23, 0x00	; 0
    44f2:	ca 01       	movw	r24, r20
    44f4:	0e 94 1d 2b 	call	0x563a	; 0x563a <__divmodhi4>
    44f8:	cb cf       	rjmp	.-106    	; 0x4490 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    44fa:	65 e0       	ldi	r22, 0x05	; 5
    44fc:	70 e0       	ldi	r23, 0x00	; 0
    44fe:	ce cf       	rjmp	.-100    	; 0x449c <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4500:	8f e7       	ldi	r24, 0x7F	; 127
    4502:	08 95       	ret
    4504:	81 e0       	ldi	r24, 0x01	; 1
}
    4506:	08 95       	ret

00004508 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4508:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    450c:	80 ff       	sbrs	r24, 0
    450e:	0c c0       	rjmp	.+24     	; 0x4528 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4510:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	75 95       	asr	r23
    4518:	67 95       	ror	r22
    451a:	75 95       	asr	r23
    451c:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    451e:	61 15       	cp	r22, r1
    4520:	71 05       	cpc	r23, r1
    4522:	49 f1       	breq	.+82     	; 0x4576 <wheel_unit+0x6e>
    4524:	86 2f       	mov	r24, r22
    4526:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4528:	81 ff       	sbrs	r24, 1
    452a:	06 c0       	rjmp	.+12     	; 0x4538 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    452c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4530:	70 e0       	ldi	r23, 0x00	; 0
    4532:	75 95       	asr	r23
    4534:	67 95       	ror	r22
    4536:	f3 cf       	rjmp	.-26     	; 0x451e <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4538:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    453c:	82 fd       	sbrc	r24, 2
    453e:	0b c0       	rjmp	.+22     	; 0x4556 <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    4540:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <mousekey_repeat>
    4544:	99 23       	and	r25, r25
    4546:	a1 f0       	breq	.+40     	; 0x4570 <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4548:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    454c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4550:	96 17       	cp	r25, r22
    4552:	38 f0       	brcs	.+14     	; 0x4562 <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4554:	68 2f       	mov	r22, r24
    4556:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4558:	60 38       	cpi	r22, 0x80	; 128
    455a:	71 05       	cpc	r23, r1
    455c:	00 f3       	brcs	.-64     	; 0x451e <wheel_unit+0x16>
    455e:	8f e7       	ldi	r24, 0x7F	; 127
    4560:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4562:	89 9f       	mul	r24, r25
    4564:	c0 01       	movw	r24, r0
    4566:	11 24       	eor	r1, r1
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	0e 94 1d 2b 	call	0x563a	; 0x563a <__divmodhi4>
    456e:	f4 cf       	rjmp	.-24     	; 0x4558 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    4570:	61 e0       	ldi	r22, 0x01	; 1
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	d7 cf       	rjmp	.-82     	; 0x4524 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4576:	81 e0       	ldi	r24, 0x01	; 1
}
    4578:	08 95       	ret

0000457a <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    457a:	80 3f       	cpi	r24, 0xF0	; 240
    457c:	31 f4       	brne	.+12     	; 0x458a <mousekey_on+0x10>
    457e:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    4582:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4584:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    4588:	08 95       	ret
    458a:	81 3f       	cpi	r24, 0xF1	; 241
    458c:	19 f4       	brne	.+6      	; 0x4594 <mousekey_on+0x1a>
    458e:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    4592:	f8 cf       	rjmp	.-16     	; 0x4584 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4594:	82 3f       	cpi	r24, 0xF2	; 242
    4596:	31 f4       	brne	.+12     	; 0x45a4 <mousekey_on+0x2a>
    4598:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    459c:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    459e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    45a2:	08 95       	ret
    45a4:	83 3f       	cpi	r24, 0xF3	; 243
    45a6:	19 f4       	brne	.+6      	; 0x45ae <mousekey_on+0x34>
    45a8:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    45ac:	f8 cf       	rjmp	.-16     	; 0x459e <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    45ae:	89 3f       	cpi	r24, 0xF9	; 249
    45b0:	29 f4       	brne	.+10     	; 0x45bc <mousekey_on+0x42>
    45b2:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    45b6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    45ba:	08 95       	ret
    45bc:	8a 3f       	cpi	r24, 0xFA	; 250
    45be:	21 f4       	brne	.+8      	; 0x45c8 <mousekey_on+0x4e>
    45c0:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    45c4:	81 95       	neg	r24
    45c6:	f7 cf       	rjmp	.-18     	; 0x45b6 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    45c8:	8b 3f       	cpi	r24, 0xFB	; 251
    45ca:	31 f4       	brne	.+12     	; 0x45d8 <mousekey_on+0x5e>
    45cc:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    45d0:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    45d2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
    45d6:	08 95       	ret
    45d8:	8c 3f       	cpi	r24, 0xFC	; 252
    45da:	19 f4       	brne	.+6      	; 0x45e2 <mousekey_on+0x68>
    45dc:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    45e0:	f8 cf       	rjmp	.-16     	; 0x45d2 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    45e2:	84 3f       	cpi	r24, 0xF4	; 244
    45e4:	31 f4       	brne	.+12     	; 0x45f2 <mousekey_on+0x78>
    45e6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    45ea:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    45ec:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <mouse_report>
    45f0:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    45f2:	85 3f       	cpi	r24, 0xF5	; 245
    45f4:	21 f4       	brne	.+8      	; 0x45fe <mousekey_on+0x84>
    45f6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    45fa:	82 60       	ori	r24, 0x02	; 2
    45fc:	f7 cf       	rjmp	.-18     	; 0x45ec <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    45fe:	86 3f       	cpi	r24, 0xF6	; 246
    4600:	21 f4       	brne	.+8      	; 0x460a <mousekey_on+0x90>
    4602:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4606:	84 60       	ori	r24, 0x04	; 4
    4608:	f1 cf       	rjmp	.-30     	; 0x45ec <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    460a:	87 3f       	cpi	r24, 0xF7	; 247
    460c:	21 f4       	brne	.+8      	; 0x4616 <mousekey_on+0x9c>
    460e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4612:	88 60       	ori	r24, 0x08	; 8
    4614:	eb cf       	rjmp	.-42     	; 0x45ec <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4616:	88 3f       	cpi	r24, 0xF8	; 248
    4618:	21 f4       	brne	.+8      	; 0x4622 <mousekey_on+0xa8>
    461a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    461e:	80 61       	ori	r24, 0x10	; 16
    4620:	e5 cf       	rjmp	.-54     	; 0x45ec <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4622:	8d 3f       	cpi	r24, 0xFD	; 253
    4624:	31 f4       	brne	.+12     	; 0x4632 <mousekey_on+0xb8>
    4626:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    462a:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    462c:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <mousekey_accel>
}
    4630:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4632:	8e 3f       	cpi	r24, 0xFE	; 254
    4634:	21 f4       	brne	.+8      	; 0x463e <mousekey_on+0xc4>
    4636:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    463a:	82 60       	ori	r24, 0x02	; 2
    463c:	f7 cf       	rjmp	.-18     	; 0x462c <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    463e:	8f 3f       	cpi	r24, 0xFF	; 255
    4640:	b9 f7       	brne	.-18     	; 0x4630 <mousekey_on+0xb6>
    4642:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4646:	84 60       	ori	r24, 0x04	; 4
    4648:	f1 cf       	rjmp	.-30     	; 0x462c <mousekey_on+0xb2>

0000464a <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    464a:	80 3f       	cpi	r24, 0xF0	; 240
    464c:	c1 f4       	brne	.+48     	; 0x467e <mousekey_off+0x34>
    464e:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    4652:	87 fd       	sbrc	r24, 7
    4654:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4658:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    465c:	81 11       	cpse	r24, r1
    465e:	0e c0       	rjmp	.+28     	; 0x467c <mousekey_off+0x32>
    4660:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    4664:	81 11       	cpse	r24, r1
    4666:	0a c0       	rjmp	.+20     	; 0x467c <mousekey_off+0x32>
    4668:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    466c:	81 11       	cpse	r24, r1
    466e:	06 c0       	rjmp	.+12     	; 0x467c <mousekey_off+0x32>
    4670:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    4674:	81 11       	cpse	r24, r1
    4676:	02 c0       	rjmp	.+4      	; 0x467c <mousekey_off+0x32>
        mousekey_repeat = 0;
    4678:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mousekey_repeat>
}
    467c:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    467e:	81 3f       	cpi	r24, 0xF1	; 241
    4680:	29 f4       	brne	.+10     	; 0x468c <mousekey_off+0x42>
    4682:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    4686:	18 16       	cp	r1, r24
    4688:	2c f3       	brlt	.-54     	; 0x4654 <mousekey_off+0xa>
    468a:	e6 cf       	rjmp	.-52     	; 0x4658 <mousekey_off+0xe>
    468c:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <mouse_report+0x1>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4690:	82 3f       	cpi	r24, 0xF2	; 242
    4692:	29 f4       	brne	.+10     	; 0x469e <mousekey_off+0x54>
    4694:	97 ff       	sbrs	r25, 7
    4696:	e0 cf       	rjmp	.-64     	; 0x4658 <mousekey_off+0xe>
    4698:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <mouse_report+0x1>
    469c:	dd cf       	rjmp	.-70     	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    469e:	83 3f       	cpi	r24, 0xF3	; 243
    46a0:	19 f4       	brne	.+6      	; 0x46a8 <mousekey_off+0x5e>
    46a2:	19 16       	cp	r1, r25
    46a4:	cc f3       	brlt	.-14     	; 0x4698 <mousekey_off+0x4e>
    46a6:	d8 cf       	rjmp	.-80     	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    46a8:	89 3f       	cpi	r24, 0xF9	; 249
    46aa:	39 f4       	brne	.+14     	; 0x46ba <mousekey_off+0x70>
    46ac:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    46b0:	18 16       	cp	r1, r24
    46b2:	94 f6       	brge	.-92     	; 0x4658 <mousekey_off+0xe>
    46b4:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <mouse_report+0x3>
    46b8:	cf cf       	rjmp	.-98     	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    46ba:	8a 3f       	cpi	r24, 0xFA	; 250
    46bc:	29 f4       	brne	.+10     	; 0x46c8 <mousekey_off+0x7e>
    46be:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    46c2:	87 ff       	sbrs	r24, 7
    46c4:	c9 cf       	rjmp	.-110    	; 0x4658 <mousekey_off+0xe>
    46c6:	f6 cf       	rjmp	.-20     	; 0x46b4 <mousekey_off+0x6a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    46c8:	8b 3f       	cpi	r24, 0xFB	; 251
    46ca:	39 f4       	brne	.+14     	; 0x46da <mousekey_off+0x90>
    46cc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    46d0:	87 ff       	sbrs	r24, 7
    46d2:	c2 cf       	rjmp	.-124    	; 0x4658 <mousekey_off+0xe>
    46d4:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <mouse_report+0x4>
    46d8:	bf cf       	rjmp	.-130    	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    46da:	8c 3f       	cpi	r24, 0xFC	; 252
    46dc:	29 f4       	brne	.+10     	; 0x46e8 <mousekey_off+0x9e>
    46de:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    46e2:	18 16       	cp	r1, r24
    46e4:	bc f3       	brlt	.-18     	; 0x46d4 <mousekey_off+0x8a>
    46e6:	b8 cf       	rjmp	.-144    	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    46e8:	84 3f       	cpi	r24, 0xF4	; 244
    46ea:	31 f4       	brne	.+12     	; 0x46f8 <mousekey_off+0xae>
    46ec:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    46f0:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    46f2:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <mouse_report>
    46f6:	b0 cf       	rjmp	.-160    	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    46f8:	85 3f       	cpi	r24, 0xF5	; 245
    46fa:	21 f4       	brne	.+8      	; 0x4704 <mousekey_off+0xba>
    46fc:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4700:	8d 7f       	andi	r24, 0xFD	; 253
    4702:	f7 cf       	rjmp	.-18     	; 0x46f2 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4704:	86 3f       	cpi	r24, 0xF6	; 246
    4706:	21 f4       	brne	.+8      	; 0x4710 <mousekey_off+0xc6>
    4708:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    470c:	8b 7f       	andi	r24, 0xFB	; 251
    470e:	f1 cf       	rjmp	.-30     	; 0x46f2 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4710:	87 3f       	cpi	r24, 0xF7	; 247
    4712:	21 f4       	brne	.+8      	; 0x471c <mousekey_off+0xd2>
    4714:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4718:	87 7f       	andi	r24, 0xF7	; 247
    471a:	eb cf       	rjmp	.-42     	; 0x46f2 <mousekey_off+0xa8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    471c:	88 3f       	cpi	r24, 0xF8	; 248
    471e:	21 f4       	brne	.+8      	; 0x4728 <mousekey_off+0xde>
    4720:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4724:	8f 7e       	andi	r24, 0xEF	; 239
    4726:	e5 cf       	rjmp	.-54     	; 0x46f2 <mousekey_off+0xa8>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4728:	8d 3f       	cpi	r24, 0xFD	; 253
    472a:	31 f4       	brne	.+12     	; 0x4738 <mousekey_off+0xee>
    472c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4730:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4732:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <mousekey_accel>
    4736:	90 cf       	rjmp	.-224    	; 0x4658 <mousekey_off+0xe>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4738:	8e 3f       	cpi	r24, 0xFE	; 254
    473a:	21 f4       	brne	.+8      	; 0x4744 <mousekey_off+0xfa>
    473c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    4740:	8d 7f       	andi	r24, 0xFD	; 253
    4742:	f7 cf       	rjmp	.-18     	; 0x4732 <mousekey_off+0xe8>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4744:	8f 3f       	cpi	r24, 0xFF	; 255
    4746:	09 f0       	breq	.+2      	; 0x474a <mousekey_off+0x100>
    4748:	87 cf       	rjmp	.-242    	; 0x4658 <mousekey_off+0xe>
    474a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    474e:	8b 7f       	andi	r24, 0xFB	; 251
    4750:	f0 cf       	rjmp	.-32     	; 0x4732 <mousekey_off+0xe8>

00004752 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4752:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    4756:	83 ff       	sbrs	r24, 3
    4758:	7e c0       	rjmp	.+252    	; 0x4856 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    475a:	8a e0       	ldi	r24, 0x0A	; 10
    475c:	95 e0       	ldi	r25, 0x05	; 5
    475e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    phex(mouse_report.buttons); print("|");
    4762:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <mouse_report>
    4766:	1f 92       	push	r1
    4768:	8f 93       	push	r24
    476a:	85 e0       	ldi	r24, 0x05	; 5
    476c:	95 e0       	ldi	r25, 0x05	; 5
    476e:	9f 93       	push	r25
    4770:	8f 93       	push	r24
    4772:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4776:	83 e0       	ldi	r24, 0x03	; 3
    4778:	95 e0       	ldi	r25, 0x05	; 5
    477a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_decs(mouse_report.x); print(" ");
    477e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    4782:	28 2f       	mov	r18, r24
    4784:	08 2e       	mov	r0, r24
    4786:	00 0c       	add	r0, r0
    4788:	33 0b       	sbc	r19, r19
    478a:	3f 93       	push	r19
    478c:	8f 93       	push	r24
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	95 e0       	ldi	r25, 0x05	; 5
    4792:	9f 93       	push	r25
    4794:	8f 93       	push	r24
    4796:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    479a:	8e ef       	ldi	r24, 0xFE	; 254
    479c:	94 e0       	ldi	r25, 0x04	; 4
    479e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_decs(mouse_report.y); print(" ");
    47a2:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    47a6:	28 2f       	mov	r18, r24
    47a8:	08 2e       	mov	r0, r24
    47aa:	00 0c       	add	r0, r0
    47ac:	33 0b       	sbc	r19, r19
    47ae:	3f 93       	push	r19
    47b0:	8f 93       	push	r24
    47b2:	8b ef       	ldi	r24, 0xFB	; 251
    47b4:	94 e0       	ldi	r25, 0x04	; 4
    47b6:	9f 93       	push	r25
    47b8:	8f 93       	push	r24
    47ba:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    47be:	89 ef       	ldi	r24, 0xF9	; 249
    47c0:	94 e0       	ldi	r25, 0x04	; 4
    47c2:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_decs(mouse_report.v); print(" ");
    47c6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    47ca:	28 2f       	mov	r18, r24
    47cc:	08 2e       	mov	r0, r24
    47ce:	00 0c       	add	r0, r0
    47d0:	33 0b       	sbc	r19, r19
    47d2:	3f 93       	push	r19
    47d4:	8f 93       	push	r24
    47d6:	86 ef       	ldi	r24, 0xF6	; 246
    47d8:	94 e0       	ldi	r25, 0x04	; 4
    47da:	9f 93       	push	r25
    47dc:	8f 93       	push	r24
    47de:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    47e2:	84 ef       	ldi	r24, 0xF4	; 244
    47e4:	94 e0       	ldi	r25, 0x04	; 4
    47e6:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_decs(mouse_report.h); print("](");
    47ea:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    47ee:	28 2f       	mov	r18, r24
    47f0:	08 2e       	mov	r0, r24
    47f2:	00 0c       	add	r0, r0
    47f4:	33 0b       	sbc	r19, r19
    47f6:	3f 93       	push	r19
    47f8:	8f 93       	push	r24
    47fa:	81 ef       	ldi	r24, 0xF1	; 241
    47fc:	94 e0       	ldi	r25, 0x04	; 4
    47fe:	9f 93       	push	r25
    4800:	8f 93       	push	r24
    4802:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4806:	8e ee       	ldi	r24, 0xEE	; 238
    4808:	94 e0       	ldi	r25, 0x04	; 4
    480a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_dec(mousekey_repeat); print("/");
    480e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <mousekey_repeat>
    4812:	1f 92       	push	r1
    4814:	8f 93       	push	r24
    4816:	8b ee       	ldi	r24, 0xEB	; 235
    4818:	94 e0       	ldi	r25, 0x04	; 4
    481a:	9f 93       	push	r25
    481c:	8f 93       	push	r24
    481e:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4822:	89 ee       	ldi	r24, 0xE9	; 233
    4824:	94 e0       	ldi	r25, 0x04	; 4
    4826:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print_dec(mousekey_accel); print(")\n");
    482a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <mousekey_accel>
    482e:	1f 92       	push	r1
    4830:	8f 93       	push	r24
    4832:	86 ee       	ldi	r24, 0xE6	; 230
    4834:	94 e0       	ldi	r25, 0x04	; 4
    4836:	9f 93       	push	r25
    4838:	8f 93       	push	r24
    483a:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    483e:	83 ee       	ldi	r24, 0xE3	; 227
    4840:	94 e0       	ldi	r25, 0x04	; 4
    4842:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4846:	8d b7       	in	r24, 0x3d	; 61
    4848:	9e b7       	in	r25, 0x3e	; 62
    484a:	4c 96       	adiw	r24, 0x1c	; 28
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	9e bf       	out	0x3e, r25	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4856:	8f e3       	ldi	r24, 0x3F	; 63
    4858:	92 e0       	ldi	r25, 0x02	; 2
    485a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <host_mouse_send>
    last_timer = timer_read();
    485e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <timer_read>
    4862:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <last_timer+0x1>
    4866:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <last_timer>
}
    486a:	08 95       	ret

0000486c <mousekey_task>:
{
    486c:	1f 93       	push	r17
    486e:	cf 93       	push	r28
    4870:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4872:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <last_timer>
    4876:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <last_timer+0x1>
    487a:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <timer_elapsed>
    487e:	ac 01       	movw	r20, r24
    4880:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <mousekey_repeat>
    4884:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_interval>
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	91 11       	cpse	r25, r1
    488c:	06 c0       	rjmp	.+12     	; 0x489a <mousekey_task+0x2e>
    488e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <mk_delay>
    4892:	8a e0       	ldi	r24, 0x0A	; 10
    4894:	28 9f       	mul	r18, r24
    4896:	90 01       	movw	r18, r0
    4898:	11 24       	eor	r1, r1
    489a:	42 17       	cp	r20, r18
    489c:	53 07       	cpc	r21, r19
    489e:	80 f0       	brcs	.+32     	; 0x48c0 <mousekey_task+0x54>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    48a0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    48a4:	c0 91 41 02 	lds	r28, 0x0241	; 0x800241 <mouse_report+0x2>
    48a8:	10 91 42 02 	lds	r17, 0x0242	; 0x800242 <mouse_report+0x3>
    48ac:	d0 91 43 02 	lds	r29, 0x0243	; 0x800243 <mouse_report+0x4>
    48b0:	81 11       	cpse	r24, r1
    48b2:	0a c0       	rjmp	.+20     	; 0x48c8 <mousekey_task+0x5c>
    48b4:	c1 11       	cpse	r28, r1
    48b6:	78 c0       	rjmp	.+240    	; 0x49a8 <mousekey_task+0x13c>
    48b8:	11 11       	cpse	r17, r1
    48ba:	76 c0       	rjmp	.+236    	; 0x49a8 <mousekey_task+0x13c>
    48bc:	d1 11       	cpse	r29, r1
    48be:	74 c0       	rjmp	.+232    	; 0x49a8 <mousekey_task+0x13c>
}
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	1f 91       	pop	r17
    48c6:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    48c8:	9f 3f       	cpi	r25, 0xFF	; 255
    48ca:	19 f0       	breq	.+6      	; 0x48d2 <mousekey_task+0x66>
        mousekey_repeat++;
    48cc:	9f 5f       	subi	r25, 0xFF	; 255
    48ce:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    48d2:	18 16       	cp	r1, r24
    48d4:	24 f4       	brge	.+8      	; 0x48de <mousekey_task+0x72>
    48d6:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    48da:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    48de:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <mouse_report+0x1>
    48e2:	87 ff       	sbrs	r24, 7
    48e4:	05 c0       	rjmp	.+10     	; 0x48f0 <mousekey_task+0x84>
    48e6:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    48ea:	81 95       	neg	r24
    48ec:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    48f0:	1c 16       	cp	r1, r28
    48f2:	24 f4       	brge	.+8      	; 0x48fc <mousekey_task+0x90>
    48f4:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    48f8:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48fc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <mouse_report+0x2>
    4900:	87 ff       	sbrs	r24, 7
    4902:	05 c0       	rjmp	.+10     	; 0x490e <mousekey_task+0xa2>
    4904:	0e 94 3a 22 	call	0x4474	; 0x4474 <move_unit>
    4908:	81 95       	neg	r24
    490a:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    490e:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <mouse_report+0x1>
    4912:	66 23       	and	r22, r22
    4914:	31 f1       	breq	.+76     	; 0x4962 <mousekey_task+0xf6>
    4916:	c0 91 41 02 	lds	r28, 0x0241	; 0x800241 <mouse_report+0x2>
    491a:	cc 23       	and	r28, r28
    491c:	11 f1       	breq	.+68     	; 0x4962 <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    491e:	06 2e       	mov	r0, r22
    4920:	00 0c       	add	r0, r0
    4922:	77 0b       	sbc	r23, r23
    4924:	88 0b       	sbc	r24, r24
    4926:	99 0b       	sbc	r25, r25
    4928:	0e 94 18 2a 	call	0x5430	; 0x5430 <__floatsisf>
    492c:	23 e3       	ldi	r18, 0x33	; 51
    492e:	33 e3       	ldi	r19, 0x33	; 51
    4930:	43 e3       	ldi	r20, 0x33	; 51
    4932:	5f e3       	ldi	r21, 0x3F	; 63
    4934:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__mulsf3>
    4938:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__fixsfsi>
    493c:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4940:	6c 2f       	mov	r22, r28
    4942:	cc 0f       	add	r28, r28
    4944:	77 0b       	sbc	r23, r23
    4946:	88 0b       	sbc	r24, r24
    4948:	99 0b       	sbc	r25, r25
    494a:	0e 94 18 2a 	call	0x5430	; 0x5430 <__floatsisf>
    494e:	23 e3       	ldi	r18, 0x33	; 51
    4950:	33 e3       	ldi	r19, 0x33	; 51
    4952:	43 e3       	ldi	r20, 0x33	; 51
    4954:	5f e3       	ldi	r21, 0x3F	; 63
    4956:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <__mulsf3>
    495a:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__fixsfsi>
    495e:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4962:	11 16       	cp	r1, r17
    4964:	24 f4       	brge	.+8      	; 0x496e <mousekey_task+0x102>
    4966:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    496a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    496e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <mouse_report+0x3>
    4972:	87 ff       	sbrs	r24, 7
    4974:	05 c0       	rjmp	.+10     	; 0x4980 <mousekey_task+0x114>
    4976:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    497a:	81 95       	neg	r24
    497c:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4980:	1d 16       	cp	r1, r29
    4982:	24 f4       	brge	.+8      	; 0x498c <mousekey_task+0x120>
    4984:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    4988:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    498c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <mouse_report+0x4>
    4990:	87 ff       	sbrs	r24, 7
    4992:	05 c0       	rjmp	.+10     	; 0x499e <mousekey_task+0x132>
    4994:	0e 94 84 22 	call	0x4508	; 0x4508 <wheel_unit>
    4998:	81 95       	neg	r24
    499a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <mouse_report+0x4>
}
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	1f 91       	pop	r17
    mousekey_send();
    49a4:	0c 94 a9 23 	jmp	0x4752	; 0x4752 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    49a8:	9f 3f       	cpi	r25, 0xFF	; 255
    49aa:	09 f0       	breq	.+2      	; 0x49ae <mousekey_task+0x142>
    49ac:	8f cf       	rjmp	.-226    	; 0x48cc <mousekey_task+0x60>
    49ae:	a0 cf       	rjmp	.-192    	; 0x48f0 <mousekey_task+0x84>

000049b0 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    49b0:	85 e0       	ldi	r24, 0x05	; 5
    49b2:	ef e3       	ldi	r30, 0x3F	; 63
    49b4:	f2 e0       	ldi	r31, 0x02	; 2
    49b6:	df 01       	movw	r26, r30
    49b8:	1d 92       	st	X+, r1
    49ba:	8a 95       	dec	r24
    49bc:	e9 f7       	brne	.-6      	; 0x49b8 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49be:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <mousekey_repeat>
    mousekey_accel = 0;
    49c2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <mousekey_accel>
}
    49c6:	08 95       	ret

000049c8 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    49c8:	8d e2       	ldi	r24, 0x2D	; 45
    49ca:	97 e0       	ldi	r25, 0x07	; 7
    49cc:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    49d0:	1f 92       	push	r1
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	8f 93       	push	r24
    49d6:	1f 92       	push	r1
    49d8:	85 e0       	ldi	r24, 0x05	; 5
    49da:	8f 93       	push	r24
    49dc:	8f ed       	ldi	r24, 0xDF	; 223
    49de:	96 e0       	ldi	r25, 0x06	; 6
    49e0:	9f 93       	push	r25
    49e2:	8f 93       	push	r24
    49e4:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    49e8:	0f 90       	pop	r0
    49ea:	0f 90       	pop	r0
    49ec:	0f 90       	pop	r0
    49ee:	0f 90       	pop	r0
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	08 95       	ret

000049f6 <mousekey_param_inc>:
    switch (param) {
    49f6:	83 30       	cpi	r24, 0x03	; 3
    49f8:	09 f4       	brne	.+2      	; 0x49fc <mousekey_param_inc+0x6>
    49fa:	45 c0       	rjmp	.+138    	; 0x4a86 <mousekey_param_inc+0x90>
    49fc:	28 f4       	brcc	.+10     	; 0x4a08 <mousekey_param_inc+0x12>
    49fe:	81 30       	cpi	r24, 0x01	; 1
    4a00:	61 f0       	breq	.+24     	; 0x4a1a <mousekey_param_inc+0x24>
    4a02:	82 30       	cpi	r24, 0x02	; 2
    4a04:	49 f1       	breq	.+82     	; 0x4a58 <mousekey_param_inc+0x62>
    4a06:	08 95       	ret
    4a08:	85 30       	cpi	r24, 0x05	; 5
    4a0a:	09 f4       	brne	.+2      	; 0x4a0e <mousekey_param_inc+0x18>
    4a0c:	6a c0       	rjmp	.+212    	; 0x4ae2 <mousekey_param_inc+0xec>
    4a0e:	08 f4       	brcc	.+2      	; 0x4a12 <mousekey_param_inc+0x1c>
    4a10:	51 c0       	rjmp	.+162    	; 0x4ab4 <mousekey_param_inc+0xbe>
    4a12:	86 30       	cpi	r24, 0x06	; 6
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <mousekey_param_inc+0x22>
    4a16:	7c c0       	rjmp	.+248    	; 0x4b10 <mousekey_param_inc+0x11a>
    4a18:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    4a1a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4a1e:	48 2f       	mov	r20, r24
    4a20:	46 0f       	add	r20, r22
    4a22:	55 27       	eor	r21, r21
    4a24:	55 1f       	adc	r21, r21
    4a26:	4f 3f       	cpi	r20, 0xFF	; 255
    4a28:	51 05       	cpc	r21, r1
    4a2a:	94 f4       	brge	.+36     	; 0x4a50 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    4a2c:	68 0f       	add	r22, r24
    4a2e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4a32:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4a36:	1f 92       	push	r1
    4a38:	8f 93       	push	r24
    4a3a:	88 e1       	ldi	r24, 0x18	; 24
    4a3c:	96 e0       	ldi	r25, 0x06	; 6
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4a3e:	9f 93       	push	r25
    4a40:	8f 93       	push	r24
    4a42:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            break;
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
}
    4a4e:	08 95       	ret
                mk_delay = UINT8_MAX;
    4a50:	8f ef       	ldi	r24, 0xFF	; 255
    4a52:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
    4a56:	ed cf       	rjmp	.-38     	; 0x4a32 <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    4a58:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4a5c:	48 2f       	mov	r20, r24
    4a5e:	46 0f       	add	r20, r22
    4a60:	55 27       	eor	r21, r21
    4a62:	55 1f       	adc	r21, r21
    4a64:	4f 3f       	cpi	r20, 0xFF	; 255
    4a66:	51 05       	cpc	r21, r1
    4a68:	54 f4       	brge	.+20     	; 0x4a7e <mousekey_param_inc+0x88>
                mk_interval += inc;
    4a6a:	68 0f       	add	r22, r24
    4a6c:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4a70:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4a74:	1f 92       	push	r1
    4a76:	8f 93       	push	r24
    4a78:	86 e0       	ldi	r24, 0x06	; 6
    4a7a:	96 e0       	ldi	r25, 0x06	; 6
    4a7c:	e0 cf       	rjmp	.-64     	; 0x4a3e <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    4a7e:	8f ef       	ldi	r24, 0xFF	; 255
    4a80:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
    4a84:	f5 cf       	rjmp	.-22     	; 0x4a70 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    4a86:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4a8a:	48 2f       	mov	r20, r24
    4a8c:	46 0f       	add	r20, r22
    4a8e:	55 27       	eor	r21, r21
    4a90:	55 1f       	adc	r21, r21
    4a92:	4f 3f       	cpi	r20, 0xFF	; 255
    4a94:	51 05       	cpc	r21, r1
    4a96:	54 f4       	brge	.+20     	; 0x4aac <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    4a98:	68 0f       	add	r22, r24
    4a9a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4a9e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4aa2:	1f 92       	push	r1
    4aa4:	8f 93       	push	r24
    4aa6:	83 ef       	ldi	r24, 0xF3	; 243
    4aa8:	95 e0       	ldi	r25, 0x05	; 5
    4aaa:	c9 cf       	rjmp	.-110    	; 0x4a3e <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    4aac:	8f ef       	ldi	r24, 0xFF	; 255
    4aae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
    4ab2:	f5 cf       	rjmp	.-22     	; 0x4a9e <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4ab4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4ab8:	48 2f       	mov	r20, r24
    4aba:	46 0f       	add	r20, r22
    4abc:	55 27       	eor	r21, r21
    4abe:	55 1f       	adc	r21, r21
    4ac0:	4f 3f       	cpi	r20, 0xFF	; 255
    4ac2:	51 05       	cpc	r21, r1
    4ac4:	54 f4       	brge	.+20     	; 0x4ada <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    4ac6:	68 0f       	add	r22, r24
    4ac8:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4acc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4ad0:	1f 92       	push	r1
    4ad2:	8f 93       	push	r24
    4ad4:	8e ed       	ldi	r24, 0xDE	; 222
    4ad6:	95 e0       	ldi	r25, 0x05	; 5
    4ad8:	b2 cf       	rjmp	.-156    	; 0x4a3e <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    4ada:	8f ef       	ldi	r24, 0xFF	; 255
    4adc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
    4ae0:	f5 cf       	rjmp	.-22     	; 0x4acc <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4ae2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4ae6:	48 2f       	mov	r20, r24
    4ae8:	46 0f       	add	r20, r22
    4aea:	55 27       	eor	r21, r21
    4aec:	55 1f       	adc	r21, r21
    4aee:	4f 3f       	cpi	r20, 0xFF	; 255
    4af0:	51 05       	cpc	r21, r1
    4af2:	54 f4       	brge	.+20     	; 0x4b08 <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    4af4:	68 0f       	add	r22, r24
    4af6:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4afa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4afe:	1f 92       	push	r1
    4b00:	8f 93       	push	r24
    4b02:	85 ec       	ldi	r24, 0xC5	; 197
    4b04:	95 e0       	ldi	r25, 0x05	; 5
    4b06:	9b cf       	rjmp	.-202    	; 0x4a3e <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    4b08:	8f ef       	ldi	r24, 0xFF	; 255
    4b0a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
    4b0e:	f5 cf       	rjmp	.-22     	; 0x4afa <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4b10:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4b14:	48 2f       	mov	r20, r24
    4b16:	46 0f       	add	r20, r22
    4b18:	55 27       	eor	r21, r21
    4b1a:	55 1f       	adc	r21, r21
    4b1c:	4f 3f       	cpi	r20, 0xFF	; 255
    4b1e:	51 05       	cpc	r21, r1
    4b20:	54 f4       	brge	.+20     	; 0x4b36 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4b22:	68 0f       	add	r22, r24
    4b24:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b28:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4b2c:	1f 92       	push	r1
    4b2e:	8f 93       	push	r24
    4b30:	8a ea       	ldi	r24, 0xAA	; 170
    4b32:	95 e0       	ldi	r25, 0x05	; 5
    4b34:	84 cf       	rjmp	.-248    	; 0x4a3e <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4b36:	8f ef       	ldi	r24, 0xFF	; 255
    4b38:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
    4b3c:	f5 cf       	rjmp	.-22     	; 0x4b28 <mousekey_param_inc+0x132>

00004b3e <mousekey_param_dec>:
    switch (param) {
    4b3e:	83 30       	cpi	r24, 0x03	; 3
    4b40:	c9 f1       	breq	.+114    	; 0x4bb4 <mousekey_param_dec+0x76>
    4b42:	28 f4       	brcc	.+10     	; 0x4b4e <mousekey_param_dec+0x10>
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	61 f0       	breq	.+24     	; 0x4b60 <mousekey_param_dec+0x22>
    4b48:	82 30       	cpi	r24, 0x02	; 2
    4b4a:	19 f1       	breq	.+70     	; 0x4b92 <mousekey_param_dec+0x54>
    4b4c:	08 95       	ret
    4b4e:	85 30       	cpi	r24, 0x05	; 5
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <mousekey_param_dec+0x16>
    4b52:	52 c0       	rjmp	.+164    	; 0x4bf8 <mousekey_param_dec+0xba>
    4b54:	08 f4       	brcc	.+2      	; 0x4b58 <mousekey_param_dec+0x1a>
    4b56:	3f c0       	rjmp	.+126    	; 0x4bd6 <mousekey_param_dec+0x98>
    4b58:	86 30       	cpi	r24, 0x06	; 6
    4b5a:	09 f4       	brne	.+2      	; 0x4b5e <mousekey_param_dec+0x20>
    4b5c:	5e c0       	rjmp	.+188    	; 0x4c1a <mousekey_param_dec+0xdc>
    4b5e:	08 95       	ret
            if (mk_delay > dec)
    4b60:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4b64:	68 17       	cp	r22, r24
    4b66:	90 f4       	brcc	.+36     	; 0x4b8c <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    4b68:	86 1b       	sub	r24, r22
    4b6a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4b6e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    4b72:	1f 92       	push	r1
    4b74:	8f 93       	push	r24
    4b76:	8b e9       	ldi	r24, 0x9B	; 155
    4b78:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b7a:	9f 93       	push	r25
    4b7c:	8f 93       	push	r24
    4b7e:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            break;
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
}
    4b8a:	08 95       	ret
                mk_delay = 0;
    4b8c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_delay>
    4b90:	ee cf       	rjmp	.-36     	; 0x4b6e <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    4b92:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4b96:	68 17       	cp	r22, r24
    4b98:	50 f4       	brcc	.+20     	; 0x4bae <mousekey_param_dec+0x70>
                mk_interval -= dec;
    4b9a:	86 1b       	sub	r24, r22
    4b9c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4ba0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    4ba4:	1f 92       	push	r1
    4ba6:	8f 93       	push	r24
    4ba8:	89 e8       	ldi	r24, 0x89	; 137
    4baa:	95 e0       	ldi	r25, 0x05	; 5
    4bac:	e6 cf       	rjmp	.-52     	; 0x4b7a <mousekey_param_dec+0x3c>
                mk_interval = 0;
    4bae:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_interval>
    4bb2:	f6 cf       	rjmp	.-20     	; 0x4ba0 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4bb4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4bb8:	68 17       	cp	r22, r24
    4bba:	50 f4       	brcc	.+20     	; 0x4bd0 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    4bbc:	86 1b       	sub	r24, r22
    4bbe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4bc2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    4bc6:	1f 92       	push	r1
    4bc8:	8f 93       	push	r24
    4bca:	86 e7       	ldi	r24, 0x76	; 118
    4bcc:	95 e0       	ldi	r25, 0x05	; 5
    4bce:	d5 cf       	rjmp	.-86     	; 0x4b7a <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    4bd0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <mk_max_speed>
    4bd4:	f6 cf       	rjmp	.-20     	; 0x4bc2 <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    4bd6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4bda:	68 17       	cp	r22, r24
    4bdc:	50 f4       	brcc	.+20     	; 0x4bf2 <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    4bde:	86 1b       	sub	r24, r22
    4be0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4be4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    4be8:	1f 92       	push	r1
    4bea:	8f 93       	push	r24
    4bec:	81 e6       	ldi	r24, 0x61	; 97
    4bee:	95 e0       	ldi	r25, 0x05	; 5
    4bf0:	c4 cf       	rjmp	.-120    	; 0x4b7a <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    4bf2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <mk_time_to_max>
    4bf6:	f6 cf       	rjmp	.-20     	; 0x4be4 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    4bf8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4bfc:	68 17       	cp	r22, r24
    4bfe:	50 f4       	brcc	.+20     	; 0x4c14 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    4c00:	86 1b       	sub	r24, r22
    4c02:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c06:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    4c0a:	1f 92       	push	r1
    4c0c:	8f 93       	push	r24
    4c0e:	88 e4       	ldi	r24, 0x48	; 72
    4c10:	95 e0       	ldi	r25, 0x05	; 5
    4c12:	b3 cf       	rjmp	.-154    	; 0x4b7a <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    4c14:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mk_wheel_max_speed>
    4c18:	f6 cf       	rjmp	.-20     	; 0x4c06 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    4c1a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4c1e:	68 17       	cp	r22, r24
    4c20:	50 f4       	brcc	.+20     	; 0x4c36 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4c22:	86 1b       	sub	r24, r22
    4c24:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c28:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    4c2c:	1f 92       	push	r1
    4c2e:	8f 93       	push	r24
    4c30:	8d e2       	ldi	r24, 0x2D	; 45
    4c32:	95 e0       	ldi	r25, 0x05	; 5
    4c34:	a2 cf       	rjmp	.-188    	; 0x4b7a <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4c36:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mk_wheel_time_to_max>
    4c3a:	f6 cf       	rjmp	.-20     	; 0x4c28 <mousekey_param_dec+0xea>

00004c3c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4c3c:	cf 93       	push	r28
    4c3e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4c40:	1f 92       	push	r1
    4c42:	8f 93       	push	r24
    4c44:	82 e3       	ldi	r24, 0x32	; 50
    4c46:	98 e0       	ldi	r25, 0x08	; 8
    4c48:	9f 93       	push	r25
    4c4a:	8f 93       	push	r24
    4c4c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    default_layer_set(1UL<<layer);
    4c50:	61 e0       	ldi	r22, 0x01	; 1
    4c52:	70 e0       	ldi	r23, 0x00	; 0
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	04 c0       	rjmp	.+8      	; 0x4c62 <switch_default_layer+0x26>
    4c5a:	66 0f       	add	r22, r22
    4c5c:	77 1f       	adc	r23, r23
    4c5e:	88 1f       	adc	r24, r24
    4c60:	99 1f       	adc	r25, r25
    4c62:	ca 95       	dec	r28
    4c64:	d2 f7       	brpl	.-12     	; 0x4c5a <switch_default_layer+0x1e>
    4c66:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <default_layer_set>
    clear_keyboard();
    4c6a:	0f 90       	pop	r0
    4c6c:	0f 90       	pop	r0
    4c6e:	0f 90       	pop	r0
    4c70:	0f 90       	pop	r0
}
    4c72:	cf 91       	pop	r28
    clear_keyboard();
    4c74:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <clear_keyboard>

00004c78 <command_common>:
{
    4c78:	cf 93       	push	r28
    switch (code) {
    4c7a:	8b 31       	cpi	r24, 0x1B	; 27
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <command_common+0x8>
    4c7e:	d7 c1       	rjmp	.+942    	; 0x502e <command_common+0x3b6>
    4c80:	08 f0       	brcs	.+2      	; 0x4c84 <command_common+0xc>
    4c82:	4a c0       	rjmp	.+148    	; 0x4d18 <command_common+0xa0>
    4c84:	8e 30       	cpi	r24, 0x0E	; 14
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <command_common+0x12>
    4c88:	e2 c1       	rjmp	.+964    	; 0x504e <command_common+0x3d6>
    4c8a:	b8 f4       	brcc	.+46     	; 0x4cba <command_common+0x42>
    4c8c:	87 30       	cpi	r24, 0x07	; 7
    4c8e:	09 f4       	brne	.+2      	; 0x4c92 <command_common+0x1a>
    4c90:	b7 c1       	rjmp	.+878    	; 0x5000 <command_common+0x388>
    4c92:	48 f4       	brcc	.+18     	; 0x4ca6 <command_common+0x2e>
    4c94:	86 30       	cpi	r24, 0x06	; 6
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <command_common+0x22>
    4c98:	a1 c1       	rjmp	.+834    	; 0x4fdc <command_common+0x364>
            print("?");
    4c9a:	86 e4       	ldi	r24, 0x46	; 70
    4c9c:	9a e0       	ldi	r25, 0x0A	; 10
    4c9e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            return false;
    4ca2:	c0 e0       	ldi	r28, 0x00	; 0
    4ca4:	36 c2       	rjmp	.+1132   	; 0x5112 <command_common+0x49a>
    switch (code) {
    4ca6:	88 30       	cpi	r24, 0x08	; 8
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <command_common+0x34>
    4caa:	68 c0       	rjmp	.+208    	; 0x4d7c <command_common+0x104>
    4cac:	8b 30       	cpi	r24, 0x0B	; 11
    4cae:	a9 f7       	brne	.-22     	; 0x4c9a <command_common+0x22>
    print("\n\t- Magic -\n"
    4cb0:	8e e5       	ldi	r24, 0x5E	; 94
    4cb2:	98 e0       	ldi	r25, 0x08	; 8
                print("NKRO: off\n");
    4cb4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4cb8:	8f c1       	rjmp	.+798    	; 0x4fd8 <command_common+0x360>
    switch (code) {
    4cba:	81 31       	cpi	r24, 0x11	; 17
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <command_common+0x48>
    4cbe:	1b c2       	rjmp	.+1078   	; 0x50f6 <command_common+0x47e>
    4cc0:	78 f4       	brcc	.+30     	; 0x4ce0 <command_common+0x68>
    4cc2:	80 31       	cpi	r24, 0x10	; 16
    4cc4:	51 f7       	brne	.-44     	; 0x4c9a <command_common+0x22>
            debug_mouse = !debug_mouse;
    4cc6:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    4cca:	89 2f       	mov	r24, r25
    4ccc:	87 7f       	andi	r24, 0xF7	; 247
    4cce:	93 ff       	sbrs	r25, 3
    4cd0:	88 60       	ori	r24, 0x08	; 8
    4cd2:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_mouse) {
    4cd6:	83 ff       	sbrs	r24, 3
    4cd8:	ca c1       	rjmp	.+916    	; 0x506e <command_common+0x3f6>
                print("\nmouse: on\n");
    4cda:	8a ee       	ldi	r24, 0xEA	; 234
    4cdc:	9b e0       	ldi	r25, 0x0B	; 11
    4cde:	a1 c1       	rjmp	.+834    	; 0x5022 <command_common+0x3aa>
    switch (code) {
    4ce0:	86 31       	cpi	r24, 0x16	; 22
    4ce2:	09 f4       	brne	.+2      	; 0x4ce6 <command_common+0x6e>
    4ce4:	c7 c1       	rjmp	.+910    	; 0x5074 <command_common+0x3fc>
    4ce6:	89 31       	cpi	r24, 0x19	; 25
    4ce8:	c1 f6       	brne	.-80     	; 0x4c9a <command_common+0x22>
            print("\n\t- Version -\n");
    4cea:	8e ec       	ldi	r24, 0xCE	; 206
    4cec:	9b e0       	ldi	r25, 0x0B	; 11
    4cee:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4cf2:	85 ea       	ldi	r24, 0xA5	; 165
    4cf4:	9b e0       	ldi	r25, 0x0B	; 11
    4cf6:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4cfa:	80 e7       	ldi	r24, 0x70	; 112
    4cfc:	9b e0       	ldi	r25, 0x0B	; 11
    4cfe:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4d02:	89 e4       	ldi	r24, 0x49	; 73
    4d04:	9b e0       	ldi	r25, 0x0B	; 11
    4d06:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("OPTIONS:"
    4d0a:	84 e0       	ldi	r24, 0x04	; 4
    4d0c:	9b e0       	ldi	r25, 0x0B	; 11
    4d0e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4d12:	89 ed       	ldi	r24, 0xD9	; 217
    4d14:	9a e0       	ldi	r25, 0x0A	; 10
    4d16:	ce cf       	rjmp	.-100    	; 0x4cb4 <command_common+0x3c>
    switch (code) {
    4d18:	85 33       	cpi	r24, 0x35	; 53
    4d1a:	61 f0       	breq	.+24     	; 0x4d34 <command_common+0xbc>
    4d1c:	78 f4       	brcc	.+30     	; 0x4d3c <command_common+0xc4>
    4d1e:	87 32       	cpi	r24, 0x27	; 39
    4d20:	49 f0       	breq	.+18     	; 0x4d34 <command_common+0xbc>
    4d22:	28 f4       	brcc	.+10     	; 0x4d2e <command_common+0xb6>
    4d24:	8e 31       	cpi	r24, 0x1E	; 30
    4d26:	08 f4       	brcc	.+2      	; 0x4d2a <command_common+0xb2>
    4d28:	b8 cf       	rjmp	.-144    	; 0x4c9a <command_common+0x22>
            switch_default_layer((code - KC_1) + 1);
    4d2a:	8d 51       	subi	r24, 0x1D	; 29
    4d2c:	04 c0       	rjmp	.+8      	; 0x4d36 <command_common+0xbe>
    switch (code) {
    4d2e:	89 32       	cpi	r24, 0x29	; 41
    4d30:	09 f0       	breq	.+2      	; 0x4d34 <command_common+0xbc>
    4d32:	b3 cf       	rjmp	.-154    	; 0x4c9a <command_common+0x22>
            switch_default_layer(0);
    4d34:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4d36:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <switch_default_layer>
    4d3a:	4e c1       	rjmp	.+668    	; 0x4fd8 <command_common+0x360>
    switch (code) {
    4d3c:	83 34       	cpi	r24, 0x43	; 67
    4d3e:	38 f4       	brcc	.+14     	; 0x4d4e <command_common+0xd6>
    4d40:	8a 33       	cpi	r24, 0x3A	; 58
    4d42:	08 f0       	brcs	.+2      	; 0x4d46 <command_common+0xce>
    4d44:	ec c1       	rjmp	.+984    	; 0x511e <command_common+0x4a6>
    4d46:	88 33       	cpi	r24, 0x38	; 56
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <command_common+0xd4>
    4d4a:	b2 cf       	rjmp	.-156    	; 0x4cb0 <command_common+0x38>
    4d4c:	a6 cf       	rjmp	.-180    	; 0x4c9a <command_common+0x22>
    4d4e:	83 34       	cpi	r24, 0x43	; 67
    4d50:	89 f3       	breq	.-30     	; 0x4d34 <command_common+0xbc>
    4d52:	88 34       	cpi	r24, 0x48	; 72
    4d54:	09 f0       	breq	.+2      	; 0x4d58 <command_common+0xe0>
    4d56:	a1 cf       	rjmp	.-190    	; 0x4c9a <command_common+0x22>
            clear_keyboard();
    4d58:	0e 94 34 17 	call	0x2e68	; 0x2e68 <clear_keyboard>
            print("\n\nbootloader... ");
    4d5c:	89 e4       	ldi	r24, 0x49	; 73
    4d5e:	9c e0       	ldi	r25, 0x0C	; 12
    4d60:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4d64:	9f ef       	ldi	r25, 0xFF	; 255
    4d66:	23 ed       	ldi	r18, 0xD3	; 211
    4d68:	80 e3       	ldi	r24, 0x30	; 48
    4d6a:	91 50       	subi	r25, 0x01	; 1
    4d6c:	20 40       	sbci	r18, 0x00	; 0
    4d6e:	80 40       	sbci	r24, 0x00	; 0
    4d70:	e1 f7       	brne	.-8      	; 0x4d6a <command_common+0xf2>
    4d72:	00 c0       	rjmp	.+0      	; 0x4d74 <command_common+0xfc>
    4d74:	00 00       	nop
            bootloader_jump(); // not return
    4d76:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <bootloader_jump>
    4d7a:	2e c1       	rjmp	.+604    	; 0x4fd8 <command_common+0x360>
            print("eeconfig:\n");
    4d7c:	8e e5       	ldi	r24, 0x5E	; 94
    4d7e:	9c e0       	ldi	r25, 0x0C	; 12
    4d80:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4d84:	86 e3       	ldi	r24, 0x36	; 54
    4d86:	9a e0       	ldi	r25, 0x0A	; 10
    4d88:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4d8c:	0e 94 28 22 	call	0x4450	; 0x4450 <eeconfig_read_default_layer>
    4d90:	1f 92       	push	r1
    4d92:	8f 93       	push	r24
    4d94:	83 e3       	ldi	r24, 0x33	; 51
    4d96:	9a e0       	ldi	r25, 0x0A	; 10
    4d98:	9f 93       	push	r25
    4d9a:	8f 93       	push	r24
    4d9c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4da0:	81 e3       	ldi	r24, 0x31	; 49
    4da2:	9a e0       	ldi	r25, 0x0A	; 10
    4da4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    dc.raw = eeconfig_read_debug();
    4da8:	0e 94 1f 22 	call	0x443e	; 0x443e <eeconfig_read_debug>
    4dac:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4dae:	8e e1       	ldi	r24, 0x1E	; 30
    4db0:	9a e0       	ldi	r25, 0x0A	; 10
    4db2:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4db6:	1f 92       	push	r1
    4db8:	cf 93       	push	r28
    4dba:	89 e1       	ldi	r24, 0x19	; 25
    4dbc:	9a e0       	ldi	r25, 0x0A	; 10
    4dbe:	9f 93       	push	r25
    4dc0:	8f 93       	push	r24
    4dc2:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4dc6:	87 e1       	ldi	r24, 0x17	; 23
    4dc8:	9a e0       	ldi	r25, 0x0A	; 10
    4dca:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4dce:	8d e0       	ldi	r24, 0x0D	; 13
    4dd0:	9a e0       	ldi	r25, 0x0A	; 10
    4dd2:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4dd6:	8c 2f       	mov	r24, r28
    4dd8:	81 70       	andi	r24, 0x01	; 1
    4dda:	1f 92       	push	r1
    4ddc:	8f 93       	push	r24
    4dde:	8a e0       	ldi	r24, 0x0A	; 10
    4de0:	9a e0       	ldi	r25, 0x0A	; 10
    4de2:	9f 93       	push	r25
    4de4:	8f 93       	push	r24
    4de6:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4dea:	88 e0       	ldi	r24, 0x08	; 8
    4dec:	9a e0       	ldi	r25, 0x0A	; 10
    4dee:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4df2:	8e ef       	ldi	r24, 0xFE	; 254
    4df4:	99 e0       	ldi	r25, 0x09	; 9
    4df6:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4dfa:	c1 fb       	bst	r28, 1
    4dfc:	88 27       	eor	r24, r24
    4dfe:	80 f9       	bld	r24, 0
    4e00:	1f 92       	push	r1
    4e02:	8f 93       	push	r24
    4e04:	8b ef       	ldi	r24, 0xFB	; 251
    4e06:	99 e0       	ldi	r25, 0x09	; 9
    4e08:	9f 93       	push	r25
    4e0a:	8f 93       	push	r24
    4e0c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4e10:	89 ef       	ldi	r24, 0xF9	; 249
    4e12:	99 e0       	ldi	r25, 0x09	; 9
    4e14:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4e18:	8d ee       	ldi	r24, 0xED	; 237
    4e1a:	99 e0       	ldi	r25, 0x09	; 9
    4e1c:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4e20:	c2 fb       	bst	r28, 2
    4e22:	88 27       	eor	r24, r24
    4e24:	80 f9       	bld	r24, 0
    4e26:	1f 92       	push	r1
    4e28:	8f 93       	push	r24
    4e2a:	8a ee       	ldi	r24, 0xEA	; 234
    4e2c:	99 e0       	ldi	r25, 0x09	; 9
    4e2e:	9f 93       	push	r25
    4e30:	8f 93       	push	r24
    4e32:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4e36:	88 ee       	ldi	r24, 0xE8	; 232
    4e38:	99 e0       	ldi	r25, 0x09	; 9
    4e3a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4e3e:	8f ed       	ldi	r24, 0xDF	; 223
    4e40:	99 e0       	ldi	r25, 0x09	; 9
    4e42:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4e46:	c3 fb       	bst	r28, 3
    4e48:	cc 27       	eor	r28, r28
    4e4a:	c0 f9       	bld	r28, 0
    4e4c:	1f 92       	push	r1
    4e4e:	cf 93       	push	r28
    4e50:	8c ed       	ldi	r24, 0xDC	; 220
    4e52:	99 e0       	ldi	r25, 0x09	; 9
    4e54:	9f 93       	push	r25
    4e56:	8f 93       	push	r24
    4e58:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4e5c:	8a ed       	ldi	r24, 0xDA	; 218
    4e5e:	99 e0       	ldi	r25, 0x09	; 9
    4e60:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    kc.raw = eeconfig_read_keymap();
    4e64:	0e 94 31 22 	call	0x4462	; 0x4462 <eeconfig_read_keymap>
    4e68:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4e6a:	86 ec       	ldi	r24, 0xC6	; 198
    4e6c:	99 e0       	ldi	r25, 0x09	; 9
    4e6e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4e72:	1f 92       	push	r1
    4e74:	cf 93       	push	r28
    4e76:	81 ec       	ldi	r24, 0xC1	; 193
    4e78:	99 e0       	ldi	r25, 0x09	; 9
    4e7a:	9f 93       	push	r25
    4e7c:	8f 93       	push	r24
    4e7e:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4e82:	8f eb       	ldi	r24, 0xBF	; 191
    4e84:	99 e0       	ldi	r25, 0x09	; 9
    4e86:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4e8a:	86 ea       	ldi	r24, 0xA6	; 166
    4e8c:	99 e0       	ldi	r25, 0x09	; 9
    4e8e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4e92:	8c 2f       	mov	r24, r28
    4e94:	81 70       	andi	r24, 0x01	; 1
    4e96:	1f 92       	push	r1
    4e98:	8f 93       	push	r24
    4e9a:	83 ea       	ldi	r24, 0xA3	; 163
    4e9c:	99 e0       	ldi	r25, 0x09	; 9
    4e9e:	9f 93       	push	r25
    4ea0:	8f 93       	push	r24
    4ea2:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4ea6:	8d b7       	in	r24, 0x3d	; 61
    4ea8:	9e b7       	in	r25, 0x3e	; 62
    4eaa:	80 96       	adiw	r24, 0x20	; 32
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	9e bf       	out	0x3e, r25	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	8d bf       	out	0x3d, r24	; 61
    4eb6:	81 ea       	ldi	r24, 0xA1	; 161
    4eb8:	99 e0       	ldi	r25, 0x09	; 9
    4eba:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4ebe:	8a e8       	ldi	r24, 0x8A	; 138
    4ec0:	99 e0       	ldi	r25, 0x09	; 9
    4ec2:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4ec6:	c1 fb       	bst	r28, 1
    4ec8:	88 27       	eor	r24, r24
    4eca:	80 f9       	bld	r24, 0
    4ecc:	1f 92       	push	r1
    4ece:	8f 93       	push	r24
    4ed0:	87 e8       	ldi	r24, 0x87	; 135
    4ed2:	99 e0       	ldi	r25, 0x09	; 9
    4ed4:	9f 93       	push	r25
    4ed6:	8f 93       	push	r24
    4ed8:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4edc:	85 e8       	ldi	r24, 0x85	; 133
    4ede:	99 e0       	ldi	r25, 0x09	; 9
    4ee0:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4ee4:	83 e7       	ldi	r24, 0x73	; 115
    4ee6:	99 e0       	ldi	r25, 0x09	; 9
    4ee8:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4eec:	c2 fb       	bst	r28, 2
    4eee:	88 27       	eor	r24, r24
    4ef0:	80 f9       	bld	r24, 0
    4ef2:	1f 92       	push	r1
    4ef4:	8f 93       	push	r24
    4ef6:	80 e7       	ldi	r24, 0x70	; 112
    4ef8:	99 e0       	ldi	r25, 0x09	; 9
    4efa:	9f 93       	push	r25
    4efc:	8f 93       	push	r24
    4efe:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4f02:	8e e6       	ldi	r24, 0x6E	; 110
    4f04:	99 e0       	ldi	r25, 0x09	; 9
    4f06:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4f0a:	8c e5       	ldi	r24, 0x5C	; 92
    4f0c:	99 e0       	ldi	r25, 0x09	; 9
    4f0e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4f12:	c3 fb       	bst	r28, 3
    4f14:	88 27       	eor	r24, r24
    4f16:	80 f9       	bld	r24, 0
    4f18:	1f 92       	push	r1
    4f1a:	8f 93       	push	r24
    4f1c:	89 e5       	ldi	r24, 0x59	; 89
    4f1e:	99 e0       	ldi	r25, 0x09	; 9
    4f20:	9f 93       	push	r25
    4f22:	8f 93       	push	r24
    4f24:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4f28:	87 e5       	ldi	r24, 0x57	; 87
    4f2a:	99 e0       	ldi	r25, 0x09	; 9
    4f2c:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4f30:	8d e4       	ldi	r24, 0x4D	; 77
    4f32:	99 e0       	ldi	r25, 0x09	; 9
    4f34:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4f38:	c4 fb       	bst	r28, 4
    4f3a:	88 27       	eor	r24, r24
    4f3c:	80 f9       	bld	r24, 0
    4f3e:	1f 92       	push	r1
    4f40:	8f 93       	push	r24
    4f42:	8a e4       	ldi	r24, 0x4A	; 74
    4f44:	99 e0       	ldi	r25, 0x09	; 9
    4f46:	9f 93       	push	r25
    4f48:	8f 93       	push	r24
    4f4a:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4f4e:	88 e4       	ldi	r24, 0x48	; 72
    4f50:	99 e0       	ldi	r25, 0x09	; 9
    4f52:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4f56:	86 e3       	ldi	r24, 0x36	; 54
    4f58:	99 e0       	ldi	r25, 0x09	; 9
    4f5a:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4f5e:	c5 fb       	bst	r28, 5
    4f60:	88 27       	eor	r24, r24
    4f62:	80 f9       	bld	r24, 0
    4f64:	1f 92       	push	r1
    4f66:	8f 93       	push	r24
    4f68:	83 e3       	ldi	r24, 0x33	; 51
    4f6a:	99 e0       	ldi	r25, 0x09	; 9
    4f6c:	9f 93       	push	r25
    4f6e:	8f 93       	push	r24
    4f70:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4f74:	81 e3       	ldi	r24, 0x31	; 49
    4f76:	99 e0       	ldi	r25, 0x09	; 9
    4f78:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4f7c:	85 e1       	ldi	r24, 0x15	; 21
    4f7e:	99 e0       	ldi	r25, 0x09	; 9
    4f80:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4f84:	c6 fb       	bst	r28, 6
    4f86:	88 27       	eor	r24, r24
    4f88:	80 f9       	bld	r24, 0
    4f8a:	1f 92       	push	r1
    4f8c:	8f 93       	push	r24
    4f8e:	82 e1       	ldi	r24, 0x12	; 18
    4f90:	99 e0       	ldi	r25, 0x09	; 9
    4f92:	9f 93       	push	r25
    4f94:	8f 93       	push	r24
    4f96:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4f9a:	80 e1       	ldi	r24, 0x10	; 16
    4f9c:	99 e0       	ldi	r25, 0x09	; 9
    4f9e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4fa2:	88 e0       	ldi	r24, 0x08	; 8
    4fa4:	99 e0       	ldi	r25, 0x09	; 9
    4fa6:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4faa:	c7 fb       	bst	r28, 7
    4fac:	cc 27       	eor	r28, r28
    4fae:	c0 f9       	bld	r28, 0
    4fb0:	1f 92       	push	r1
    4fb2:	cf 93       	push	r28
    4fb4:	85 e0       	ldi	r24, 0x05	; 5
    4fb6:	99 e0       	ldi	r25, 0x09	; 9
    4fb8:	9f 93       	push	r25
    4fba:	8f 93       	push	r24
    4fbc:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    4fc0:	83 e0       	ldi	r24, 0x03	; 3
    4fc2:	99 e0       	ldi	r25, 0x09	; 9
    4fc4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    4fc8:	8d b7       	in	r24, 0x3d	; 61
    4fca:	9e b7       	in	r25, 0x3e	; 62
    4fcc:	4c 96       	adiw	r24, 0x1c	; 28
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	9e bf       	out	0x3e, r25	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	8d bf       	out	0x3d, r24	; 61
    return true;
    4fd8:	c1 e0       	ldi	r28, 0x01	; 1
            break;
    4fda:	9b c0       	rjmp	.+310    	; 0x5112 <command_common+0x49a>
            debug_matrix   = false;
    4fdc:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
            debug_enable   = false;
    4fe0:	81 7f       	andi	r24, 0xF1	; 241
    4fe2:	8e 7f       	andi	r24, 0xFE	; 254
    4fe4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    print("\n\t- Console -\n"
    4fe8:	87 e3       	ldi	r24, 0x37	; 55
    4fea:	98 e0       	ldi	r25, 0x08	; 8
    4fec:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print("C> ");
    4ff0:	8a e5       	ldi	r24, 0x5A	; 90
    4ff2:	9c e0       	ldi	r25, 0x0C	; 12
    4ff4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            command_state = CONSOLE;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    4ffe:	ec cf       	rjmp	.-40     	; 0x4fd8 <command_common+0x360>
            if (debug_enable) {
    5000:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    5004:	80 ff       	sbrs	r24, 0
    5006:	0b c0       	rjmp	.+22     	; 0x501e <command_common+0x3a6>
                print("\ndebug: off\n");
    5008:	8c e3       	ldi	r24, 0x3C	; 60
    500a:	9c e0       	ldi	r25, 0x0C	; 12
    500c:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
                debug_matrix   = false;
    5010:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
                debug_enable   = false;
    5014:	81 7f       	andi	r24, 0xF1	; 241
    5016:	8e 7f       	andi	r24, 0xFE	; 254
                debug_enable = true;
    5018:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
    501c:	dd cf       	rjmp	.-70     	; 0x4fd8 <command_common+0x360>
                print("\ndebug: on\n");
    501e:	80 e3       	ldi	r24, 0x30	; 48
    5020:	9c e0       	ldi	r25, 0x0C	; 12
                print("\nmouse: on\n");
    5022:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
                debug_enable = true;
    5026:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <debug_config>
    502a:	81 60       	ori	r24, 0x01	; 1
    502c:	f5 cf       	rjmp	.-22     	; 0x5018 <command_common+0x3a0>
            debug_matrix = !debug_matrix;
    502e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    5032:	89 2f       	mov	r24, r25
    5034:	8d 7f       	andi	r24, 0xFD	; 253
    5036:	91 ff       	sbrs	r25, 1
    5038:	82 60       	ori	r24, 0x02	; 2
    503a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_matrix) {
    503e:	81 ff       	sbrs	r24, 1
    5040:	03 c0       	rjmp	.+6      	; 0x5048 <command_common+0x3d0>
                print("\nmatrix: on\n");
    5042:	83 e2       	ldi	r24, 0x23	; 35
    5044:	9c e0       	ldi	r25, 0x0C	; 12
    5046:	ed cf       	rjmp	.-38     	; 0x5022 <command_common+0x3aa>
                print("\nmatrix: off\n");
    5048:	85 e1       	ldi	r24, 0x15	; 21
    504a:	9c e0       	ldi	r25, 0x0C	; 12
    504c:	33 ce       	rjmp	.-922    	; 0x4cb4 <command_common+0x3c>
            debug_keyboard = !debug_keyboard;
    504e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <debug_config>
    5052:	89 2f       	mov	r24, r25
    5054:	8b 7f       	andi	r24, 0xFB	; 251
    5056:	92 ff       	sbrs	r25, 2
    5058:	84 60       	ori	r24, 0x04	; 4
    505a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <debug_config>
            if (debug_keyboard) {
    505e:	82 ff       	sbrs	r24, 2
    5060:	03 c0       	rjmp	.+6      	; 0x5068 <command_common+0x3f0>
                print("\nkeyboard: on\n");
    5062:	86 e0       	ldi	r24, 0x06	; 6
    5064:	9c e0       	ldi	r25, 0x0C	; 12
    5066:	dd cf       	rjmp	.-70     	; 0x5022 <command_common+0x3aa>
                print("\nkeyboard: off\n");
    5068:	86 ef       	ldi	r24, 0xF6	; 246
    506a:	9b e0       	ldi	r25, 0x0B	; 11
    506c:	23 ce       	rjmp	.-954    	; 0x4cb4 <command_common+0x3c>
                print("\nmouse: off\n");
    506e:	8d ed       	ldi	r24, 0xDD	; 221
    5070:	9b e0       	ldi	r25, 0x0B	; 11
    5072:	20 ce       	rjmp	.-960    	; 0x4cb4 <command_common+0x3c>
            print("\n\t- Status -\n");
    5074:	8b ec       	ldi	r24, 0xCB	; 203
    5076:	9a e0       	ldi	r25, 0x0A	; 10
    5078:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            print_val_hex8(host_keyboard_leds());
    507c:	0e 94 9a 10 	call	0x2134	; 0x2134 <host_keyboard_leds>
    5080:	1f 92       	push	r1
    5082:	8f 93       	push	r24
    5084:	81 eb       	ldi	r24, 0xB1	; 177
    5086:	9a e0       	ldi	r25, 0x0A	; 10
    5088:	9f 93       	push	r25
    508a:	8f 93       	push	r24
    508c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5090:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <keyboard_protocol>
    5094:	1f 92       	push	r1
    5096:	8f 93       	push	r24
    5098:	8a e9       	ldi	r24, 0x9A	; 154
    509a:	9a e0       	ldi	r25, 0x0A	; 10
    509c:	9f 93       	push	r25
    509e:	8f 93       	push	r24
    50a0:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            print_val_hex8(keyboard_idle);
    50a4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <keyboard_idle>
    50a8:	1f 92       	push	r1
    50aa:	8f 93       	push	r24
    50ac:	87 e8       	ldi	r24, 0x87	; 135
    50ae:	9a e0       	ldi	r25, 0x0A	; 10
    50b0:	9f 93       	push	r25
    50b2:	8f 93       	push	r24
    50b4:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            print_val_hex8(keyboard_nkro);
    50b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <keyboard_nkro>
    50bc:	1f 92       	push	r1
    50be:	8f 93       	push	r24
    50c0:	84 e7       	ldi	r24, 0x74	; 116
    50c2:	9a e0       	ldi	r25, 0x0A	; 10
    50c4:	9f 93       	push	r25
    50c6:	8f 93       	push	r24
    50c8:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            print_val_hex32(timer_read32());
    50cc:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <timer_read32>
    50d0:	9f 93       	push	r25
    50d2:	8f 93       	push	r24
    50d4:	7f 93       	push	r23
    50d6:	6f 93       	push	r22
    50d8:	8d e5       	ldi	r24, 0x5D	; 93
    50da:	9a e0       	ldi	r25, 0x0A	; 10
    50dc:	9f 93       	push	r25
    50de:	8f 93       	push	r24
    50e0:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
            break;
    50e4:	8d b7       	in	r24, 0x3d	; 61
    50e6:	9e b7       	in	r25, 0x3e	; 62
    50e8:	46 96       	adiw	r24, 0x16	; 22
    50ea:	0f b6       	in	r0, 0x3f	; 63
    50ec:	f8 94       	cli
    50ee:	9e bf       	out	0x3e, r25	; 62
    50f0:	0f be       	out	0x3f, r0	; 63
    50f2:	8d bf       	out	0x3d, r24	; 61
    50f4:	71 cf       	rjmp	.-286    	; 0x4fd8 <command_common+0x360>
            clear_keyboard(); //Prevents stuck keys.
    50f6:	0e 94 34 17 	call	0x2e68	; 0x2e68 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    50fa:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <keyboard_nkro>
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	c8 27       	eor	r28, r24
    5102:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <keyboard_nkro>
            if (keyboard_nkro) {
    5106:	cc 23       	and	r28, r28
    5108:	39 f0       	breq	.+14     	; 0x5118 <command_common+0x4a0>
                print("NKRO: on\n");
    510a:	83 e5       	ldi	r24, 0x53	; 83
    510c:	9a e0       	ldi	r25, 0x0A	; 10
    510e:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
}
    5112:	8c 2f       	mov	r24, r28
    5114:	cf 91       	pop	r28
    5116:	08 95       	ret
                print("NKRO: off\n");
    5118:	88 e4       	ldi	r24, 0x48	; 72
    511a:	9a e0       	ldi	r25, 0x0A	; 10
    511c:	cb cd       	rjmp	.-1130   	; 0x4cb4 <command_common+0x3c>
            switch_default_layer((code - KC_F1) + 1);
    511e:	89 53       	subi	r24, 0x39	; 57
    5120:	0a ce       	rjmp	.-1004   	; 0x4d36 <command_common+0xbe>

00005122 <command_extra>:
}
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	08 95       	ret

00005126 <command_console_extra>:
    5126:	0c 94 91 28 	jmp	0x5122	; 0x5122 <command_extra>

0000512a <command_proc>:
{
    512a:	cf 93       	push	r28
    512c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    512e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <command_state>
    5132:	81 30       	cpi	r24, 0x01	; 1
    5134:	d1 f0       	breq	.+52     	; 0x516a <command_proc+0x40>
    5136:	38 f0       	brcs	.+14     	; 0x5146 <command_proc+0x1c>
    5138:	82 30       	cpi	r24, 0x02	; 2
    513a:	09 f4       	brne	.+2      	; 0x513e <command_proc+0x14>
    513c:	4d c0       	rjmp	.+154    	; 0x51d8 <command_proc+0xae>
            command_state = ONESHOT;
    513e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <command_state>
                return false;
    5142:	80 e0       	ldi	r24, 0x00	; 0
    5144:	10 c0       	rjmp	.+32     	; 0x5166 <command_proc+0x3c>
            if (!IS_COMMAND())
    5146:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    514a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    514e:	80 81       	ld	r24, Z
    5150:	82 32       	cpi	r24, 0x22	; 34
    5152:	b9 f7       	brne	.-18     	; 0x5142 <command_proc+0x18>
                return (command_extra(code) || command_common(code));
    5154:	8c 2f       	mov	r24, r28
    5156:	0e 94 91 28 	call	0x5122	; 0x5122 <command_extra>
    515a:	81 11       	cpse	r24, r1
    515c:	1e c0       	rjmp	.+60     	; 0x519a <command_proc+0x70>
    515e:	8c 2f       	mov	r24, r28
    5160:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <command_common>
                return (command_console_extra(code) || command_console(code));
    5164:	81 70       	andi	r24, 0x01	; 1
}
    5166:	cf 91       	pop	r28
    5168:	08 95       	ret
            if (IS_COMMAND())
    516a:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <keyboard_report>
    516e:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <keyboard_report+0x1>
    5172:	80 81       	ld	r24, Z
    5174:	82 32       	cpi	r24, 0x22	; 34
    5176:	71 f3       	breq	.-36     	; 0x5154 <command_proc+0x2a>
                return (command_console_extra(code) || command_console(code));
    5178:	8c 2f       	mov	r24, r28
    517a:	0e 94 93 28 	call	0x5126	; 0x5126 <command_console_extra>
    517e:	81 11       	cpse	r24, r1
    5180:	1b c0       	rjmp	.+54     	; 0x51b8 <command_proc+0x8e>
    switch (code) {
    5182:	c4 31       	cpi	r28, 0x14	; 20
    5184:	d9 f0       	breq	.+54     	; 0x51bc <command_proc+0x92>
    5186:	60 f4       	brcc	.+24     	; 0x51a0 <command_proc+0x76>
    5188:	cb 30       	cpi	r28, 0x0B	; 11
    518a:	71 f0       	breq	.+28     	; 0x51a8 <command_proc+0x7e>
    518c:	c0 31       	cpi	r28, 0x10	; 16
    518e:	d1 f0       	breq	.+52     	; 0x51c4 <command_proc+0x9a>
            print("?");
    5190:	88 e2       	ldi	r24, 0x28	; 40
    5192:	98 e0       	ldi	r25, 0x08	; 8
    5194:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    5198:	13 c0       	rjmp	.+38     	; 0x51c0 <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	e2 cf       	rjmp	.-60     	; 0x5164 <command_proc+0x3a>
    switch (code) {
    51a0:	c9 32       	cpi	r28, 0x29	; 41
    51a2:	61 f0       	breq	.+24     	; 0x51bc <command_proc+0x92>
    51a4:	c8 33       	cpi	r28, 0x38	; 56
    51a6:	a1 f7       	brne	.-24     	; 0x5190 <command_proc+0x66>
    print("\n\t- Console -\n"
    51a8:	87 e3       	ldi	r24, 0x37	; 55
    51aa:	98 e0       	ldi	r25, 0x08	; 8
    51ac:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("C> ");
    51b0:	8e e2       	ldi	r24, 0x2E	; 46
    51b2:	98 e0       	ldi	r25, 0x08	; 8
    51b4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
                return (command_console_extra(code) || command_console(code));
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	d4 cf       	rjmp	.-88     	; 0x5164 <command_proc+0x3a>
            command_state = ONESHOT;
    51bc:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <command_state>
                return (command_console_extra(code) || command_console(code));
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	d0 cf       	rjmp	.-96     	; 0x5164 <command_proc+0x3a>
            mousekey_console_help();
    51c4:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <mousekey_console_help>
            print("M> ");
    51c8:	8a e2       	ldi	r24, 0x2A	; 42
    51ca:	98 e0       	ldi	r25, 0x08	; 8
    51cc:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
            command_state = MOUSEKEY;
    51d0:	82 e0       	ldi	r24, 0x02	; 2
    51d2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    51d6:	f0 cf       	rjmp	.-32     	; 0x51b8 <command_proc+0x8e>
    switch (code) {
    51d8:	c4 32       	cpi	r28, 0x24	; 36
    51da:	c8 f4       	brcc	.+50     	; 0x520e <command_proc+0xe4>
    51dc:	ce 31       	cpi	r28, 0x1E	; 30
    51de:	08 f0       	brcs	.+2      	; 0x51e2 <command_proc+0xb8>
    51e0:	be c0       	rjmp	.+380    	; 0x535e <command_proc+0x234>
    51e2:	cb 30       	cpi	r28, 0x0B	; 11
    51e4:	e1 f0       	breq	.+56     	; 0x521e <command_proc+0xf4>
    51e6:	40 f4       	brcc	.+16     	; 0x51f8 <command_proc+0xce>
    51e8:	c7 30       	cpi	r28, 0x07	; 7
    51ea:	09 f4       	brne	.+2      	; 0x51ee <command_proc+0xc4>
    51ec:	cf c0       	rjmp	.+414    	; 0x538c <command_proc+0x262>
            print("?");
    51ee:	8c ec       	ldi	r24, 0xCC	; 204
    51f0:	96 e0       	ldi	r25, 0x06	; 6
        print("M>" );
    51f2:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    51f6:	26 c0       	rjmp	.+76     	; 0x5244 <command_proc+0x11a>
    switch (code) {
    51f8:	c3 31       	cpi	r28, 0x13	; 19
    51fa:	c1 f1       	breq	.+112    	; 0x526c <command_proc+0x142>
    51fc:	c4 31       	cpi	r28, 0x14	; 20
    51fe:	b9 f7       	brne	.-18     	; 0x51ee <command_proc+0xc4>
            if (mousekey_param) {
    5200:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    5204:	88 23       	and	r24, r24
    5206:	51 f1       	breq	.+84     	; 0x525c <command_proc+0x132>
                mousekey_param = 0;
    5208:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <mousekey_param>
    520c:	0a c0       	rjmp	.+20     	; 0x5222 <command_proc+0xf8>
    switch (code) {
    520e:	cb 34       	cpi	r28, 0x4B	; 75
    5210:	09 f4       	brne	.+2      	; 0x5214 <command_proc+0xea>
    5212:	ba c0       	rjmp	.+372    	; 0x5388 <command_proc+0x25e>
    5214:	c8 f4       	brcc	.+50     	; 0x5248 <command_proc+0x11e>
    5216:	c9 32       	cpi	r28, 0x29	; 41
    5218:	99 f3       	breq	.-26     	; 0x5200 <command_proc+0xd6>
    521a:	c8 33       	cpi	r28, 0x38	; 56
    521c:	41 f7       	brne	.-48     	; 0x51ee <command_proc+0xc4>
            mousekey_console_help();
    521e:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <mousekey_console_help>
    if (mousekey_param) {
    5222:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    5226:	88 23       	and	r24, r24
    5228:	09 f4       	brne	.+2      	; 0x522c <command_proc+0x102>
    522a:	c7 c0       	rjmp	.+398    	; 0x53ba <command_proc+0x290>
        xprintf("M%d> ", mousekey_param);
    522c:	1f 92       	push	r1
    522e:	8f 93       	push	r24
    5230:	86 ec       	ldi	r24, 0xC6	; 198
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
    return true;
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	8f cf       	rjmp	.-226    	; 0x5166 <command_proc+0x3c>
    switch (code) {
    5248:	c1 35       	cpi	r28, 0x51	; 81
    524a:	09 f4       	brne	.+2      	; 0x524e <command_proc+0x124>
    524c:	97 c0       	rjmp	.+302    	; 0x537c <command_proc+0x252>
    524e:	c2 35       	cpi	r28, 0x52	; 82
    5250:	09 f4       	brne	.+2      	; 0x5254 <command_proc+0x12a>
    5252:	8e c0       	rjmp	.+284    	; 0x5370 <command_proc+0x246>
    5254:	ce 34       	cpi	r28, 0x4E	; 78
    5256:	59 f6       	brne	.-106    	; 0x51ee <command_proc+0xc4>
            mousekey_param_dec(mousekey_param, 10);
    5258:	6a e0       	ldi	r22, 0x0A	; 10
    525a:	91 c0       	rjmp	.+290    	; 0x537e <command_proc+0x254>
                print("C> ");
    525c:	8b ed       	ldi	r24, 0xDB	; 219
    525e:	96 e0       	ldi	r25, 0x06	; 6
    5260:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
                command_state = CONSOLE;
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <command_state>
    526a:	7d cf       	rjmp	.-262    	; 0x5166 <command_proc+0x3c>
    print("\n\t- Values -\n");
    526c:	85 eb       	ldi	r24, 0xB5	; 181
    526e:	96 e0       	ldi	r25, 0x06	; 6
    5270:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5274:	83 ea       	ldi	r24, 0xA3	; 163
    5276:	96 e0       	ldi	r25, 0x06	; 6
    5278:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    527c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_delay>
    5280:	1f 92       	push	r1
    5282:	8f 93       	push	r24
    5284:	80 ea       	ldi	r24, 0xA0	; 160
    5286:	96 e0       	ldi	r25, 0x06	; 6
    5288:	9f 93       	push	r25
    528a:	8f 93       	push	r24
    528c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    5290:	8e e9       	ldi	r24, 0x9E	; 158
    5292:	96 e0       	ldi	r25, 0x06	; 6
    5294:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5298:	8c e8       	ldi	r24, 0x8C	; 140
    529a:	96 e0       	ldi	r25, 0x06	; 6
    529c:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    52a0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_interval>
    52a4:	1f 92       	push	r1
    52a6:	8f 93       	push	r24
    52a8:	89 e8       	ldi	r24, 0x89	; 137
    52aa:	96 e0       	ldi	r25, 0x06	; 6
    52ac:	9f 93       	push	r25
    52ae:	8f 93       	push	r24
    52b0:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    52b4:	87 e8       	ldi	r24, 0x87	; 135
    52b6:	96 e0       	ldi	r25, 0x06	; 6
    52b8:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    52bc:	88 e7       	ldi	r24, 0x78	; 120
    52be:	96 e0       	ldi	r25, 0x06	; 6
    52c0:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    52c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mk_max_speed>
    52c8:	1f 92       	push	r1
    52ca:	8f 93       	push	r24
    52cc:	85 e7       	ldi	r24, 0x75	; 117
    52ce:	96 e0       	ldi	r25, 0x06	; 6
    52d0:	9f 93       	push	r25
    52d2:	8f 93       	push	r24
    52d4:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    52d8:	83 e7       	ldi	r24, 0x73	; 115
    52da:	96 e0       	ldi	r25, 0x06	; 6
    52dc:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    52e0:	82 e6       	ldi	r24, 0x62	; 98
    52e2:	96 e0       	ldi	r25, 0x06	; 6
    52e4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    52e8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mk_time_to_max>
    52ec:	1f 92       	push	r1
    52ee:	8f 93       	push	r24
    52f0:	8f e5       	ldi	r24, 0x5F	; 95
    52f2:	96 e0       	ldi	r25, 0x06	; 6
    52f4:	9f 93       	push	r25
    52f6:	8f 93       	push	r24
    52f8:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    52fc:	8d e5       	ldi	r24, 0x5D	; 93
    52fe:	96 e0       	ldi	r25, 0x06	; 6
    5300:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5304:	88 e4       	ldi	r24, 0x48	; 72
    5306:	96 e0       	ldi	r25, 0x06	; 6
    5308:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    530c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mk_wheel_max_speed>
    5310:	1f 92       	push	r1
    5312:	8f 93       	push	r24
    5314:	85 e4       	ldi	r24, 0x45	; 69
    5316:	96 e0       	ldi	r25, 0x06	; 6
    5318:	9f 93       	push	r25
    531a:	8f 93       	push	r24
    531c:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    5320:	83 e4       	ldi	r24, 0x43	; 67
    5322:	96 e0       	ldi	r25, 0x06	; 6
    5324:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5328:	8c e2       	ldi	r24, 0x2C	; 44
    532a:	96 e0       	ldi	r25, 0x06	; 6
    532c:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    5330:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mk_wheel_time_to_max>
    5334:	1f 92       	push	r1
    5336:	8f 93       	push	r24
    5338:	89 e2       	ldi	r24, 0x29	; 41
    533a:	96 e0       	ldi	r25, 0x06	; 6
    533c:	9f 93       	push	r25
    533e:	8f 93       	push	r24
    5340:	0e 94 23 07 	call	0xe46	; 0xe46 <__xprintf>
    5344:	87 e2       	ldi	r24, 0x27	; 39
    5346:	96 e0       	ldi	r25, 0x06	; 6
    5348:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    534c:	8d b7       	in	r24, 0x3d	; 61
    534e:	9e b7       	in	r25, 0x3e	; 62
    5350:	48 96       	adiw	r24, 0x18	; 24
    5352:	0f b6       	in	r0, 0x3f	; 63
    5354:	f8 94       	cli
    5356:	9e bf       	out	0x3e, r25	; 62
    5358:	0f be       	out	0x3f, r0	; 63
    535a:	8d bf       	out	0x3d, r24	; 61
    535c:	62 cf       	rjmp	.-316    	; 0x5222 <command_proc+0xf8>
            mousekey_param = numkey2num(code);
    535e:	ce 51       	subi	r28, 0x1E	; 30
    5360:	ec 2f       	mov	r30, r28
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	e1 5d       	subi	r30, 0xD1	; 209
    5366:	fe 4f       	sbci	r31, 0xFE	; 254
    5368:	80 81       	ld	r24, Z
    536a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <mousekey_param>
    536e:	59 cf       	rjmp	.-334    	; 0x5222 <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 1);
    5370:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    5372:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    5376:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <mousekey_param_inc>
    537a:	53 cf       	rjmp	.-346    	; 0x5222 <command_proc+0xf8>
            mousekey_param_dec(mousekey_param, 1);
    537c:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    537e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <mousekey_param>
    5382:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <mousekey_param_dec>
    5386:	4d cf       	rjmp	.-358    	; 0x5222 <command_proc+0xf8>
            mousekey_param_inc(mousekey_param, 10);
    5388:	6a e0       	ldi	r22, 0x0A	; 10
    538a:	f3 cf       	rjmp	.-26     	; 0x5372 <command_proc+0x248>
            mk_delay = MOUSEKEY_DELAY/10;
    538c:	8e e1       	ldi	r24, 0x1E	; 30
    538e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5392:	82 e3       	ldi	r24, 0x32	; 50
    5394:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5398:	8a e0       	ldi	r24, 0x0A	; 10
    539a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    539e:	84 e1       	ldi	r24, 0x14	; 20
    53a0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    53a4:	88 e0       	ldi	r24, 0x08	; 8
    53a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    53aa:	88 e2       	ldi	r24, 0x28	; 40
    53ac:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mk_wheel_time_to_max>
            print("set default\n");
    53b0:	8e ec       	ldi	r24, 0xCE	; 206
    53b2:	96 e0       	ldi	r25, 0x06	; 6
    53b4:	0e 94 8a 06 	call	0xd14	; 0xd14 <xputs>
    53b8:	34 cf       	rjmp	.-408    	; 0x5222 <command_proc+0xf8>
        print("M>" );
    53ba:	83 ec       	ldi	r24, 0xC3	; 195
    53bc:	96 e0       	ldi	r25, 0x06	; 6
    53be:	19 cf       	rjmp	.-462    	; 0x51f2 <command_proc+0xc8>

000053c0 <__fixsfsi>:
    53c0:	0e 94 e7 29 	call	0x53ce	; 0x53ce <__fixunssfsi>
    53c4:	68 94       	set
    53c6:	b1 11       	cpse	r27, r1
    53c8:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__fp_szero>
    53cc:	08 95       	ret

000053ce <__fixunssfsi>:
    53ce:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <__fp_splitA>
    53d2:	88 f0       	brcs	.+34     	; 0x53f6 <__fixunssfsi+0x28>
    53d4:	9f 57       	subi	r25, 0x7F	; 127
    53d6:	98 f0       	brcs	.+38     	; 0x53fe <__fixunssfsi+0x30>
    53d8:	b9 2f       	mov	r27, r25
    53da:	99 27       	eor	r25, r25
    53dc:	b7 51       	subi	r27, 0x17	; 23
    53de:	b0 f0       	brcs	.+44     	; 0x540c <__fixunssfsi+0x3e>
    53e0:	e1 f0       	breq	.+56     	; 0x541a <__fixunssfsi+0x4c>
    53e2:	66 0f       	add	r22, r22
    53e4:	77 1f       	adc	r23, r23
    53e6:	88 1f       	adc	r24, r24
    53e8:	99 1f       	adc	r25, r25
    53ea:	1a f0       	brmi	.+6      	; 0x53f2 <__fixunssfsi+0x24>
    53ec:	ba 95       	dec	r27
    53ee:	c9 f7       	brne	.-14     	; 0x53e2 <__fixunssfsi+0x14>
    53f0:	14 c0       	rjmp	.+40     	; 0x541a <__fixunssfsi+0x4c>
    53f2:	b1 30       	cpi	r27, 0x01	; 1
    53f4:	91 f0       	breq	.+36     	; 0x541a <__fixunssfsi+0x4c>
    53f6:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__fp_zero>
    53fa:	b1 e0       	ldi	r27, 0x01	; 1
    53fc:	08 95       	ret
    53fe:	0c 94 75 2a 	jmp	0x54ea	; 0x54ea <__fp_zero>
    5402:	67 2f       	mov	r22, r23
    5404:	78 2f       	mov	r23, r24
    5406:	88 27       	eor	r24, r24
    5408:	b8 5f       	subi	r27, 0xF8	; 248
    540a:	39 f0       	breq	.+14     	; 0x541a <__fixunssfsi+0x4c>
    540c:	b9 3f       	cpi	r27, 0xF9	; 249
    540e:	cc f3       	brlt	.-14     	; 0x5402 <__fixunssfsi+0x34>
    5410:	86 95       	lsr	r24
    5412:	77 95       	ror	r23
    5414:	67 95       	ror	r22
    5416:	b3 95       	inc	r27
    5418:	d9 f7       	brne	.-10     	; 0x5410 <__fixunssfsi+0x42>
    541a:	3e f4       	brtc	.+14     	; 0x542a <__fixunssfsi+0x5c>
    541c:	90 95       	com	r25
    541e:	80 95       	com	r24
    5420:	70 95       	com	r23
    5422:	61 95       	neg	r22
    5424:	7f 4f       	sbci	r23, 0xFF	; 255
    5426:	8f 4f       	sbci	r24, 0xFF	; 255
    5428:	9f 4f       	sbci	r25, 0xFF	; 255
    542a:	08 95       	ret

0000542c <__floatunsisf>:
    542c:	e8 94       	clt
    542e:	09 c0       	rjmp	.+18     	; 0x5442 <__floatsisf+0x12>

00005430 <__floatsisf>:
    5430:	97 fb       	bst	r25, 7
    5432:	3e f4       	brtc	.+14     	; 0x5442 <__floatsisf+0x12>
    5434:	90 95       	com	r25
    5436:	80 95       	com	r24
    5438:	70 95       	com	r23
    543a:	61 95       	neg	r22
    543c:	7f 4f       	sbci	r23, 0xFF	; 255
    543e:	8f 4f       	sbci	r24, 0xFF	; 255
    5440:	9f 4f       	sbci	r25, 0xFF	; 255
    5442:	99 23       	and	r25, r25
    5444:	a9 f0       	breq	.+42     	; 0x5470 <__floatsisf+0x40>
    5446:	f9 2f       	mov	r31, r25
    5448:	96 e9       	ldi	r25, 0x96	; 150
    544a:	bb 27       	eor	r27, r27
    544c:	93 95       	inc	r25
    544e:	f6 95       	lsr	r31
    5450:	87 95       	ror	r24
    5452:	77 95       	ror	r23
    5454:	67 95       	ror	r22
    5456:	b7 95       	ror	r27
    5458:	f1 11       	cpse	r31, r1
    545a:	f8 cf       	rjmp	.-16     	; 0x544c <__floatsisf+0x1c>
    545c:	fa f4       	brpl	.+62     	; 0x549c <__floatsisf+0x6c>
    545e:	bb 0f       	add	r27, r27
    5460:	11 f4       	brne	.+4      	; 0x5466 <__floatsisf+0x36>
    5462:	60 ff       	sbrs	r22, 0
    5464:	1b c0       	rjmp	.+54     	; 0x549c <__floatsisf+0x6c>
    5466:	6f 5f       	subi	r22, 0xFF	; 255
    5468:	7f 4f       	sbci	r23, 0xFF	; 255
    546a:	8f 4f       	sbci	r24, 0xFF	; 255
    546c:	9f 4f       	sbci	r25, 0xFF	; 255
    546e:	16 c0       	rjmp	.+44     	; 0x549c <__floatsisf+0x6c>
    5470:	88 23       	and	r24, r24
    5472:	11 f0       	breq	.+4      	; 0x5478 <__floatsisf+0x48>
    5474:	96 e9       	ldi	r25, 0x96	; 150
    5476:	11 c0       	rjmp	.+34     	; 0x549a <__floatsisf+0x6a>
    5478:	77 23       	and	r23, r23
    547a:	21 f0       	breq	.+8      	; 0x5484 <__floatsisf+0x54>
    547c:	9e e8       	ldi	r25, 0x8E	; 142
    547e:	87 2f       	mov	r24, r23
    5480:	76 2f       	mov	r23, r22
    5482:	05 c0       	rjmp	.+10     	; 0x548e <__floatsisf+0x5e>
    5484:	66 23       	and	r22, r22
    5486:	71 f0       	breq	.+28     	; 0x54a4 <__floatsisf+0x74>
    5488:	96 e8       	ldi	r25, 0x86	; 134
    548a:	86 2f       	mov	r24, r22
    548c:	70 e0       	ldi	r23, 0x00	; 0
    548e:	60 e0       	ldi	r22, 0x00	; 0
    5490:	2a f0       	brmi	.+10     	; 0x549c <__floatsisf+0x6c>
    5492:	9a 95       	dec	r25
    5494:	66 0f       	add	r22, r22
    5496:	77 1f       	adc	r23, r23
    5498:	88 1f       	adc	r24, r24
    549a:	da f7       	brpl	.-10     	; 0x5492 <__floatsisf+0x62>
    549c:	88 0f       	add	r24, r24
    549e:	96 95       	lsr	r25
    54a0:	87 95       	ror	r24
    54a2:	97 f9       	bld	r25, 7
    54a4:	08 95       	ret

000054a6 <__fp_split3>:
    54a6:	57 fd       	sbrc	r21, 7
    54a8:	90 58       	subi	r25, 0x80	; 128
    54aa:	44 0f       	add	r20, r20
    54ac:	55 1f       	adc	r21, r21
    54ae:	59 f0       	breq	.+22     	; 0x54c6 <__fp_splitA+0x10>
    54b0:	5f 3f       	cpi	r21, 0xFF	; 255
    54b2:	71 f0       	breq	.+28     	; 0x54d0 <__fp_splitA+0x1a>
    54b4:	47 95       	ror	r20

000054b6 <__fp_splitA>:
    54b6:	88 0f       	add	r24, r24
    54b8:	97 fb       	bst	r25, 7
    54ba:	99 1f       	adc	r25, r25
    54bc:	61 f0       	breq	.+24     	; 0x54d6 <__fp_splitA+0x20>
    54be:	9f 3f       	cpi	r25, 0xFF	; 255
    54c0:	79 f0       	breq	.+30     	; 0x54e0 <__fp_splitA+0x2a>
    54c2:	87 95       	ror	r24
    54c4:	08 95       	ret
    54c6:	12 16       	cp	r1, r18
    54c8:	13 06       	cpc	r1, r19
    54ca:	14 06       	cpc	r1, r20
    54cc:	55 1f       	adc	r21, r21
    54ce:	f2 cf       	rjmp	.-28     	; 0x54b4 <__fp_split3+0xe>
    54d0:	46 95       	lsr	r20
    54d2:	f1 df       	rcall	.-30     	; 0x54b6 <__fp_splitA>
    54d4:	08 c0       	rjmp	.+16     	; 0x54e6 <__fp_splitA+0x30>
    54d6:	16 16       	cp	r1, r22
    54d8:	17 06       	cpc	r1, r23
    54da:	18 06       	cpc	r1, r24
    54dc:	99 1f       	adc	r25, r25
    54de:	f1 cf       	rjmp	.-30     	; 0x54c2 <__fp_splitA+0xc>
    54e0:	86 95       	lsr	r24
    54e2:	71 05       	cpc	r23, r1
    54e4:	61 05       	cpc	r22, r1
    54e6:	08 94       	sec
    54e8:	08 95       	ret

000054ea <__fp_zero>:
    54ea:	e8 94       	clt

000054ec <__fp_szero>:
    54ec:	bb 27       	eor	r27, r27
    54ee:	66 27       	eor	r22, r22
    54f0:	77 27       	eor	r23, r23
    54f2:	cb 01       	movw	r24, r22
    54f4:	97 f9       	bld	r25, 7
    54f6:	08 95       	ret

000054f8 <__mulsf3>:
    54f8:	0e 94 8f 2a 	call	0x551e	; 0x551e <__mulsf3x>
    54fc:	0c 94 00 2b 	jmp	0x5600	; 0x5600 <__fp_round>
    5500:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <__fp_pscA>
    5504:	38 f0       	brcs	.+14     	; 0x5514 <__mulsf3+0x1c>
    5506:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <__fp_pscB>
    550a:	20 f0       	brcs	.+8      	; 0x5514 <__mulsf3+0x1c>
    550c:	95 23       	and	r25, r21
    550e:	11 f0       	breq	.+4      	; 0x5514 <__mulsf3+0x1c>
    5510:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__fp_inf>
    5514:	0c 94 ef 2a 	jmp	0x55de	; 0x55de <__fp_nan>
    5518:	11 24       	eor	r1, r1
    551a:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__fp_szero>

0000551e <__mulsf3x>:
    551e:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <__fp_split3>
    5522:	70 f3       	brcs	.-36     	; 0x5500 <__mulsf3+0x8>

00005524 <__mulsf3_pse>:
    5524:	95 9f       	mul	r25, r21
    5526:	c1 f3       	breq	.-16     	; 0x5518 <__mulsf3+0x20>
    5528:	95 0f       	add	r25, r21
    552a:	50 e0       	ldi	r21, 0x00	; 0
    552c:	55 1f       	adc	r21, r21
    552e:	62 9f       	mul	r22, r18
    5530:	f0 01       	movw	r30, r0
    5532:	72 9f       	mul	r23, r18
    5534:	bb 27       	eor	r27, r27
    5536:	f0 0d       	add	r31, r0
    5538:	b1 1d       	adc	r27, r1
    553a:	63 9f       	mul	r22, r19
    553c:	aa 27       	eor	r26, r26
    553e:	f0 0d       	add	r31, r0
    5540:	b1 1d       	adc	r27, r1
    5542:	aa 1f       	adc	r26, r26
    5544:	64 9f       	mul	r22, r20
    5546:	66 27       	eor	r22, r22
    5548:	b0 0d       	add	r27, r0
    554a:	a1 1d       	adc	r26, r1
    554c:	66 1f       	adc	r22, r22
    554e:	82 9f       	mul	r24, r18
    5550:	22 27       	eor	r18, r18
    5552:	b0 0d       	add	r27, r0
    5554:	a1 1d       	adc	r26, r1
    5556:	62 1f       	adc	r22, r18
    5558:	73 9f       	mul	r23, r19
    555a:	b0 0d       	add	r27, r0
    555c:	a1 1d       	adc	r26, r1
    555e:	62 1f       	adc	r22, r18
    5560:	83 9f       	mul	r24, r19
    5562:	a0 0d       	add	r26, r0
    5564:	61 1d       	adc	r22, r1
    5566:	22 1f       	adc	r18, r18
    5568:	74 9f       	mul	r23, r20
    556a:	33 27       	eor	r19, r19
    556c:	a0 0d       	add	r26, r0
    556e:	61 1d       	adc	r22, r1
    5570:	23 1f       	adc	r18, r19
    5572:	84 9f       	mul	r24, r20
    5574:	60 0d       	add	r22, r0
    5576:	21 1d       	adc	r18, r1
    5578:	82 2f       	mov	r24, r18
    557a:	76 2f       	mov	r23, r22
    557c:	6a 2f       	mov	r22, r26
    557e:	11 24       	eor	r1, r1
    5580:	9f 57       	subi	r25, 0x7F	; 127
    5582:	50 40       	sbci	r21, 0x00	; 0
    5584:	9a f0       	brmi	.+38     	; 0x55ac <__mulsf3_pse+0x88>
    5586:	f1 f0       	breq	.+60     	; 0x55c4 <__mulsf3_pse+0xa0>
    5588:	88 23       	and	r24, r24
    558a:	4a f0       	brmi	.+18     	; 0x559e <__mulsf3_pse+0x7a>
    558c:	ee 0f       	add	r30, r30
    558e:	ff 1f       	adc	r31, r31
    5590:	bb 1f       	adc	r27, r27
    5592:	66 1f       	adc	r22, r22
    5594:	77 1f       	adc	r23, r23
    5596:	88 1f       	adc	r24, r24
    5598:	91 50       	subi	r25, 0x01	; 1
    559a:	50 40       	sbci	r21, 0x00	; 0
    559c:	a9 f7       	brne	.-22     	; 0x5588 <__mulsf3_pse+0x64>
    559e:	9e 3f       	cpi	r25, 0xFE	; 254
    55a0:	51 05       	cpc	r21, r1
    55a2:	80 f0       	brcs	.+32     	; 0x55c4 <__mulsf3_pse+0xa0>
    55a4:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__fp_inf>
    55a8:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <__fp_szero>
    55ac:	5f 3f       	cpi	r21, 0xFF	; 255
    55ae:	e4 f3       	brlt	.-8      	; 0x55a8 <__mulsf3_pse+0x84>
    55b0:	98 3e       	cpi	r25, 0xE8	; 232
    55b2:	d4 f3       	brlt	.-12     	; 0x55a8 <__mulsf3_pse+0x84>
    55b4:	86 95       	lsr	r24
    55b6:	77 95       	ror	r23
    55b8:	67 95       	ror	r22
    55ba:	b7 95       	ror	r27
    55bc:	f7 95       	ror	r31
    55be:	e7 95       	ror	r30
    55c0:	9f 5f       	subi	r25, 0xFF	; 255
    55c2:	c1 f7       	brne	.-16     	; 0x55b4 <__mulsf3_pse+0x90>
    55c4:	fe 2b       	or	r31, r30
    55c6:	88 0f       	add	r24, r24
    55c8:	91 1d       	adc	r25, r1
    55ca:	96 95       	lsr	r25
    55cc:	87 95       	ror	r24
    55ce:	97 f9       	bld	r25, 7
    55d0:	08 95       	ret

000055d2 <__fp_inf>:
    55d2:	97 f9       	bld	r25, 7
    55d4:	9f 67       	ori	r25, 0x7F	; 127
    55d6:	80 e8       	ldi	r24, 0x80	; 128
    55d8:	70 e0       	ldi	r23, 0x00	; 0
    55da:	60 e0       	ldi	r22, 0x00	; 0
    55dc:	08 95       	ret

000055de <__fp_nan>:
    55de:	9f ef       	ldi	r25, 0xFF	; 255
    55e0:	80 ec       	ldi	r24, 0xC0	; 192
    55e2:	08 95       	ret

000055e4 <__fp_pscA>:
    55e4:	00 24       	eor	r0, r0
    55e6:	0a 94       	dec	r0
    55e8:	16 16       	cp	r1, r22
    55ea:	17 06       	cpc	r1, r23
    55ec:	18 06       	cpc	r1, r24
    55ee:	09 06       	cpc	r0, r25
    55f0:	08 95       	ret

000055f2 <__fp_pscB>:
    55f2:	00 24       	eor	r0, r0
    55f4:	0a 94       	dec	r0
    55f6:	12 16       	cp	r1, r18
    55f8:	13 06       	cpc	r1, r19
    55fa:	14 06       	cpc	r1, r20
    55fc:	05 06       	cpc	r0, r21
    55fe:	08 95       	ret

00005600 <__fp_round>:
    5600:	09 2e       	mov	r0, r25
    5602:	03 94       	inc	r0
    5604:	00 0c       	add	r0, r0
    5606:	11 f4       	brne	.+4      	; 0x560c <__fp_round+0xc>
    5608:	88 23       	and	r24, r24
    560a:	52 f0       	brmi	.+20     	; 0x5620 <__fp_round+0x20>
    560c:	bb 0f       	add	r27, r27
    560e:	40 f4       	brcc	.+16     	; 0x5620 <__fp_round+0x20>
    5610:	bf 2b       	or	r27, r31
    5612:	11 f4       	brne	.+4      	; 0x5618 <__fp_round+0x18>
    5614:	60 ff       	sbrs	r22, 0
    5616:	04 c0       	rjmp	.+8      	; 0x5620 <__fp_round+0x20>
    5618:	6f 5f       	subi	r22, 0xFF	; 255
    561a:	7f 4f       	sbci	r23, 0xFF	; 255
    561c:	8f 4f       	sbci	r24, 0xFF	; 255
    561e:	9f 4f       	sbci	r25, 0xFF	; 255
    5620:	08 95       	ret

00005622 <__udivmodqi4>:
    5622:	99 1b       	sub	r25, r25
    5624:	79 e0       	ldi	r23, 0x09	; 9
    5626:	04 c0       	rjmp	.+8      	; 0x5630 <__udivmodqi4_ep>

00005628 <__udivmodqi4_loop>:
    5628:	99 1f       	adc	r25, r25
    562a:	96 17       	cp	r25, r22
    562c:	08 f0       	brcs	.+2      	; 0x5630 <__udivmodqi4_ep>
    562e:	96 1b       	sub	r25, r22

00005630 <__udivmodqi4_ep>:
    5630:	88 1f       	adc	r24, r24
    5632:	7a 95       	dec	r23
    5634:	c9 f7       	brne	.-14     	; 0x5628 <__udivmodqi4_loop>
    5636:	80 95       	com	r24
    5638:	08 95       	ret

0000563a <__divmodhi4>:
    563a:	97 fb       	bst	r25, 7
    563c:	07 2e       	mov	r0, r23
    563e:	16 f4       	brtc	.+4      	; 0x5644 <__divmodhi4+0xa>
    5640:	00 94       	com	r0
    5642:	07 d0       	rcall	.+14     	; 0x5652 <__divmodhi4_neg1>
    5644:	77 fd       	sbrc	r23, 7
    5646:	09 d0       	rcall	.+18     	; 0x565a <__divmodhi4_neg2>
    5648:	0e 94 37 2b 	call	0x566e	; 0x566e <__udivmodhi4>
    564c:	07 fc       	sbrc	r0, 7
    564e:	05 d0       	rcall	.+10     	; 0x565a <__divmodhi4_neg2>
    5650:	3e f4       	brtc	.+14     	; 0x5660 <__divmodhi4_exit>

00005652 <__divmodhi4_neg1>:
    5652:	90 95       	com	r25
    5654:	81 95       	neg	r24
    5656:	9f 4f       	sbci	r25, 0xFF	; 255
    5658:	08 95       	ret

0000565a <__divmodhi4_neg2>:
    565a:	70 95       	com	r23
    565c:	61 95       	neg	r22
    565e:	7f 4f       	sbci	r23, 0xFF	; 255

00005660 <__divmodhi4_exit>:
    5660:	08 95       	ret

00005662 <__tablejump2__>:
    5662:	ee 0f       	add	r30, r30
    5664:	ff 1f       	adc	r31, r31
    5666:	05 90       	lpm	r0, Z+
    5668:	f4 91       	lpm	r31, Z
    566a:	e0 2d       	mov	r30, r0
    566c:	09 94       	ijmp

0000566e <__udivmodhi4>:
    566e:	aa 1b       	sub	r26, r26
    5670:	bb 1b       	sub	r27, r27
    5672:	51 e1       	ldi	r21, 0x11	; 17
    5674:	07 c0       	rjmp	.+14     	; 0x5684 <__udivmodhi4_ep>

00005676 <__udivmodhi4_loop>:
    5676:	aa 1f       	adc	r26, r26
    5678:	bb 1f       	adc	r27, r27
    567a:	a6 17       	cp	r26, r22
    567c:	b7 07       	cpc	r27, r23
    567e:	10 f0       	brcs	.+4      	; 0x5684 <__udivmodhi4_ep>
    5680:	a6 1b       	sub	r26, r22
    5682:	b7 0b       	sbc	r27, r23

00005684 <__udivmodhi4_ep>:
    5684:	88 1f       	adc	r24, r24
    5686:	99 1f       	adc	r25, r25
    5688:	5a 95       	dec	r21
    568a:	a9 f7       	brne	.-22     	; 0x5676 <__udivmodhi4_loop>
    568c:	80 95       	com	r24
    568e:	90 95       	com	r25
    5690:	bc 01       	movw	r22, r24
    5692:	cd 01       	movw	r24, r26
    5694:	08 95       	ret

00005696 <eeprom_read_byte>:
    5696:	f9 99       	sbic	0x1f, 1	; 31
    5698:	fe cf       	rjmp	.-4      	; 0x5696 <eeprom_read_byte>
    569a:	92 bd       	out	0x22, r25	; 34
    569c:	81 bd       	out	0x21, r24	; 33
    569e:	f8 9a       	sbi	0x1f, 0	; 31
    56a0:	99 27       	eor	r25, r25
    56a2:	80 b5       	in	r24, 0x20	; 32
    56a4:	08 95       	ret

000056a6 <eeprom_read_word>:
    56a6:	a8 e1       	ldi	r26, 0x18	; 24
    56a8:	b0 e0       	ldi	r27, 0x00	; 0
    56aa:	42 e0       	ldi	r20, 0x02	; 2
    56ac:	50 e0       	ldi	r21, 0x00	; 0
    56ae:	0c 94 6e 2b 	jmp	0x56dc	; 0x56dc <eeprom_read_blraw>

000056b2 <eeprom_write_byte>:
    56b2:	26 2f       	mov	r18, r22

000056b4 <eeprom_write_r18>:
    56b4:	f9 99       	sbic	0x1f, 1	; 31
    56b6:	fe cf       	rjmp	.-4      	; 0x56b4 <eeprom_write_r18>
    56b8:	1f ba       	out	0x1f, r1	; 31
    56ba:	92 bd       	out	0x22, r25	; 34
    56bc:	81 bd       	out	0x21, r24	; 33
    56be:	20 bd       	out	0x20, r18	; 32
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	f8 94       	cli
    56c4:	fa 9a       	sbi	0x1f, 2	; 31
    56c6:	f9 9a       	sbi	0x1f, 1	; 31
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	01 96       	adiw	r24, 0x01	; 1
    56cc:	08 95       	ret

000056ce <eeprom_write_word>:
    56ce:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <eeprom_write_byte>
    56d2:	27 2f       	mov	r18, r23
    56d4:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <eeprom_write_r18>

000056d8 <eeprom_read_block>:
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22

000056dc <eeprom_read_blraw>:
    56dc:	fc 01       	movw	r30, r24
    56de:	f9 99       	sbic	0x1f, 1	; 31
    56e0:	fe cf       	rjmp	.-4      	; 0x56de <eeprom_read_blraw+0x2>
    56e2:	06 c0       	rjmp	.+12     	; 0x56f0 <eeprom_read_blraw+0x14>
    56e4:	f2 bd       	out	0x22, r31	; 34
    56e6:	e1 bd       	out	0x21, r30	; 33
    56e8:	f8 9a       	sbi	0x1f, 0	; 31
    56ea:	31 96       	adiw	r30, 0x01	; 1
    56ec:	00 b4       	in	r0, 0x20	; 32
    56ee:	0d 92       	st	X+, r0
    56f0:	41 50       	subi	r20, 0x01	; 1
    56f2:	50 40       	sbci	r21, 0x00	; 0
    56f4:	b8 f7       	brcc	.-18     	; 0x56e4 <eeprom_read_blraw+0x8>
    56f6:	08 95       	ret

000056f8 <_exit>:
    56f8:	f8 94       	cli

000056fa <__stop_program>:
    56fa:	ff cf       	rjmp	.-2      	; 0x56fa <__stop_program>
